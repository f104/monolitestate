$(document).ready(function () {
    app.initialize();
});

var app = {
    initialized: false,

    initialize: function () {
        $('.js-hide-empty').each(function () {
            if (!$(this).find('.js-hide-empty__cnt > *').length) {
                $(this).remove();
            }
        });
        this.initLogo();
        this.initPseudoSelect();
        this.initPseudoSelectSearch();
        this.initTabs();
        this.initRange();
        this.initChess();
        this.initChessFilter();
        this.initialized = true;
    },

    initLogo: function () {
        var timeout = appConfig.logoUpdateTimeout || 3000,
                $logo = $('.js-logo'), newSrc = $logo.data('newsrc'),
                $newLogo = $('<img>');
        $newLogo.attr('src', newSrc);
        $newLogo.on('load', function () {
            setTimeout(function () {
                $logo.parent().css('width', $logo.outerWidth());
                $logo.fadeOut(function () {
                    $logo.attr('src', $newLogo.attr('src'));
                    $logo.fadeIn(function () {
                        $logo.parent().css('width', 'auto');
                    });
                });
            }, timeout);
        });
    },

    initPseudoSelect: function () {
        // custom select
        $('.js-select').on('click', function (e) {
            e.stopPropagation();
        });
        $('.js-select__toggler').on('click', function () {
            $('.js-select').removeClass('_active');
            $(this).parents('.js-select').addClass('_active').toggleClass('_opened');
            $('.js-select').not('._active').removeClass('_opened');
        });
        $(window).on('click', function () {
            $('.js-select').removeClass('_opened _active');
        });
    },

    initPseudoSelectSearch: function () {
        // custom select search
        $('.js-select-search').each(function (index, element) {
            var $items = $(element).find('.js-select-search__item');
            $(element).find('.js-select-search__input')
                    .on('keyup', function () {
                        var query = $(this).val().trim().toLowerCase();
//                console.log(query);
                        if (query.length) {
                            $items.each(function () {
                                $(this).data('select-search').toLowerCase().indexOf(query) != -1 ? $(this).show() : $(this).hide();
                            });
                        } else {
                            $items.show();
                        }
                    })
                    .on('change', function () {
                        // need for mFilter2
                        return false;
                    });
        });
    },

    initTabs: function () {
        $('.js-tabs').each(function (index, elem) {
            var tabsSelector = typeof $(elem).data('tabs') === 'undefined' ? '.js-tabs__list > li' : $(elem).data('tabs');
            var $select = $(elem).find('.js-tabs__select'), withSelect = $select.length;
            $(elem).easytabs({
                // для вложенных табов используем data
                tabs: tabsSelector,
                panelContext: $(elem).hasClass('js-tabs_disconnected') ? $('.js-tabs__content') : $(elem),
                updateHash: false,
            });
            if (withSelect) {
                $(elem).find(tabsSelector).find('a').each(function () {
                    var value = $(this).attr('href'),
                            text = $(this).data('select') || $(this).text();
                    $select.append('<option value="' + value + '">' + text + '</option>');
                });
                $select.on('change', function () {
                    $(elem).easytabs('select', $(this).val());
                });
            }
            $(elem).find(tabsSelector).find('a:not(.disabled)').first().click();
            $(elem).bind('easytabs:after', function (event, $clicked, $target) {
                if (withSelect) {
                    $select.val($clicked.attr('href')).change();
                }
                $target.find('.slick-initialized').slick('setPosition');
                $target.find('.js-select2').select2();
            });
        });
    },

    initRange: function () {
        $('.js-range').each(function (index, elem) {
            var slider = $(elem).find('.js-range__target')[0],
                    $inputs = $(elem).find('input'),
                    from = $inputs.first()[0],
                    to = $inputs.last()[0];
            if (slider && from && to) {
                var min = parseInt(from.value) || 0,
                        max = parseInt(to.value) || 0;
                noUiSlider.create(slider, {
                    start: [
                        min,
                        max
                    ],
                    connect: true,
                    range: {
                        'min': min,
                        'max': max
                    }
                });
                var snapValues = [from, to];
                slider.noUiSlider.on('update', function (values, handle) {
                    snapValues[handle].value = Math.round(values[handle]);
                });
                from.addEventListener('change', function () {
                    slider.noUiSlider.set([this.value, null]);
                });
                to.addEventListener('change', function () {
                    slider.noUiSlider.set([null, this.value]);
                });
                if ($(elem).hasClass('js-chess-range')) {
                    slider.noUiSlider.on('end', function (values, handle) {
                        $('[name="price_max"]').trigger('change');
                    });
                }
            }
        });

        $('.js-picker').each(function (index, elem) {
            var slider = $(elem).find('.js-picker__target')[0],
                    input = $(elem).find('.js-picker__input')[0];
            if (slider && input) {
                var min = parseInt(input.getAttribute('min')) || 0,
                        max = parseInt(input.getAttribute('max')) || 0,
                        val = parseInt(input.value) || min;
                noUiSlider.create(slider, {
                    start: val,
                    connect: [true, false],
//                    format: {
//                        to: function (value) {
//                            return parseInt(value);
//                        },
//                        from: function (value) {
//                            return value;
//                        }
//                    },
                    range: {
                        'min': min,
                        'max': max
                    }
                });
                slider.noUiSlider.on('update', function () {
                    input.value = slider.noUiSlider.get();
                    $(elem).find('.js-picker__input').trigger('change');
                    var mask = input.inputmask;
                    if (mask && input.classList.contains('js-mask__age')) {
                        var suffix = app.getNumEnding(parseInt(slider.noUiSlider.get()), [' год', ' года', ' лет']);
                        mask.option({
                            suffix: suffix
                        });
                    }
                });
                input.addEventListener('change', function () {
                    slider.noUiSlider.set(this.value);
                });
            }
        });
    },

    initChess: function () {
        if ($(window).outerWidth() >= appConfig.breakpoint.lg) {
            $('.js-chess-tooltip__content').parent().hover(app.showChessTooltip, app.hideChessTooltip);
        }
        var $target = {
            title: $('.js-chess-info__title'),
            area: $('.js-chess-info__area'),
            price: $('.js-chess-info__price'),
            pricePerSquare: $('.js-chess-info__pricePerSquare'),
            floor: $('.js-chess-info__floor'),
            floorsTotal: $('.js-chess-info__floorsTotal'),
        },
                $hypothec = $('.js-chess-info__hypothec'),
                $hypothecWrapper = $('.js-chess-info__hypothec-wrapper'),
                $imgFlat = $('.js-chess-info__imgFlat'),
                $imgFloor = $('.js-chess-info__imgFloor'),
                $tabs = $('.js-chess-info__tabs'),
                $tabFloor = $('.js-chess-info__tabFloor'),
                $tabFlat = $('.js-chess-info__tabFlat'),
                $form = $('.js-chess-info__form'),
                init = false;
        $('.js-chess-info__item._active').on('click', function () {
            var $this = $(this);
            if ($this.hasClass('_selected'))
                return;
            $('.js-chess-info__item').removeClass('_selected');
            $this.addClass('_selected');
            var data = $this.data();
            for (var key in $target) {
                $target[key].text(data[key]);
            }
            $form.val(data.form);
            if (data.hypothec) {
                $hypothec.text(data.hypothec);
                $hypothecWrapper.show();
            } else {
                $hypothecWrapper.hide();
            }
            if ($('.js-hypothec__cost').length > 0) {
                $('.js-hypothec__cost').val(data.filterPrice).trigger('change');
                $('.js-hypothec__payment-sum').val(data.filterPrice / 2).trigger('change');
            }
            if (data.imgFlat) {
                $imgFlat.attr('href', data.imgFlat);
                $imgFlat.find('img').attr('src', data.imgFlat);
                $imgFlat.show();
                $tabFlat.show();
            } else {
                $imgFlat.hide();
                $tabFlat.hide();
            }
            if (data.imgFloor) {
                $imgFloor.attr('href', data.imgFloor);
                $imgFloor.find('img').attr('src', data.imgFloor);
                $imgFloor.show();
                $tabFloor.show();
            } else {
                $imgFloor.hide();
                $tabFloor.hide();
            }
            if ($tabs.find('li:visible').length == 1) {
                $tabs.find('li:visible').first().find('a').click();
            }
            if (init) {
                $("html, body").animate({
                    scrollTop: $target.title.offset().top - 100
                }, 500);
            }
        });
        $('.js-chess-info__item._active').first().click();
        init = true;
    },

    $chessTooltip: null,
    $chessTooltipTimeout: null,

    showChessTooltip: function () {
        var $self = $(this);
        app.$chessTooltipTimeout = setTimeout(function () {
            var offset = $self.offset();
            app.$chessTooltip = $self.find('.js-chess-tooltip__content').clone();
            app.$chessTooltip.css({
                top: offset.top + 28,
                left: offset.left + 10,
            }).appendTo($('body')).addClass('_active');
        }, 300);
    },

    hideChessTooltip: function () {
        clearTimeout(app.$chessTooltipTimeout);
        app.$chessTooltip.remove();
    },

    initChessFilter: function () {
        // chess link in filter result
        function initLink() {
            if (typeof (mSearch2) != 'undefined') {
                $('.js-chess__link').on('click', function () {
                    var query = $.param(mSearch2.getFilters());
                    // window.location = $(this).attr('href') + '?' + query;
                    window.open($(this).attr('href') + '?' + query, '_blank');
                    return false;
                });
            }
        }
        initLink();
        $(document).on('mse2_load', function (e, data) {
            initLink();
        });

        var $form = $('.js-chess-filter'),
                $items = $('.js-chess-filter__item'),
                areaMin = null, areaMax = null,
                priceMin = null, priceMax = null,
                sliderPrice = $form.find('[name="price_min"]').parents('.js-range').find('.js-range__target')[0],
                sliderArea = $form.find('[name="area_min"]').parents('.js-range').find('.js-range__target')[0],
                total = $items.length - $items.filter('._sold').length;
        if ($form.length === 0 || $items.length === 0)
            return;
        this.setChessTotal(total);
        $items.filter('[data-filter-area]').each(function () {
            var area = parseFloat($(this).data('filter-area'));
            if (!areaMin || area < areaMin) {
                areaMin = Math.floor(area);
            }
            if (!areaMax || area > areaMax) {
                areaMax = Math.ceil(area);
            }
        });
        $items.filter('[data-filter-price]').each(function () {
            var price = parseInt($(this).data('filter-price'));
            if (!priceMin || price < priceMin) {
                priceMin = price;
            }
            if (!priceMax || price > priceMax) {
                priceMax = price;
            }
        });
        $form.find('[name="area_min"]').attr('value', areaMin).attr('min', areaMin).attr('max', areaMax);
        $form.find('[name="area_max"]').attr('value', areaMax).attr('min', areaMin).attr('max', areaMax);
        $form.find('[name="price_min"]').attr('value', priceMin).attr('min', priceMin).attr('max', priceMax);
        $form.find('[name="price_max"]').attr('value', priceMax).attr('min', priceMin).attr('max', priceMax);
        $form.find('[name="rooms"]').each(function () {
            if ($items.filter('[data-filter-rooms="' + $(this).val() + '"]').length === 0) {
                $(this).parent().remove();
            }
        });
        sliderPrice.noUiSlider.updateOptions({
            start: [
                priceMin,
                priceMax
            ],
            range: {
                'min': priceMin,
                'max': priceMax
            }
        }, true // Boolean 'fireSetEvent'
                );
        sliderArea.noUiSlider.updateOptions({
            start: [
                areaMin,
                areaMax
            ],
            range: {
                'min': areaMin,
                'max': areaMax
            }
        }, true // Boolean 'fireSetEvent'
                );

        $form.find('input').on('change', function () {
            var formData = $form.serializeArray(),
                    filters = {
                        area: [areaMin, areaMax],
                        price: [priceMin, priceMax],
                        rooms: []
                    };
//            console.log(formData);
            $.each(formData, function (n, v) {
                if (v.name == 'area_min' && v.value != areaMin) {
                    filters.area[0] = parseInt(v.value);
                }
                if (v.name == 'area_max' && v.value != areaMax) {
                    filters.area[1] = parseInt(v.value);
                }
                if (v.name == 'price_min' && v.value != priceMin) {
                    filters.price[0] = parseInt(v.value);
                }
                if (v.name == 'price_max' && v.value != priceMax) {
                    filters.price[1] = parseInt(v.value);
                }
                if (v.name == 'rooms') {
                    filters.rooms.push(v.value);
                }
            });
            if (filters.area[0] == areaMin && filters.area[1] == areaMax)
                delete filters.area;
            if (filters.price[0] == priceMin && filters.price[1] == priceMax)
                delete filters.price;
            if (filters.rooms.length == 0)
                delete filters.rooms;
//            console.log(filters);

            if (Object.keys(filters).length) {
                $items.addClass('_filtered');
                $items.each(function () {
                    var filtered = true, $_item = $(this);
                    $.each(filters, function (k, v) {
                        switch (k) {
                            case 'area':
                                if (typeof ($_item.data('filter-area')) !== 'undefined') {
                                    var area = Math.round(parseFloat($_item.data('filter-area')));
                                    if (area < v[0] || area > v[1]) {
                                        filtered = false;
                                    }
                                } else {
                                    filtered = false;
                                }
                                break;
                            case 'price':
                                if (typeof ($_item.data('filter-price')) !== 'undefined' && $_item.data('filter-price') !== '') {
                                    var price = Math.round(parseFloat($_item.data('filter-price')));
                                    if (price < v[0] || price > v[1]) {
                                        filtered = false;
                                    }
                                } else {
                                    filtered = false;
                                }
                                break;
                            case 'rooms':
                                if (typeof ($_item.data('filter-rooms')) === 'undefined' || v.indexOf($_item.data('filter-rooms').toString()) === -1) {
                                    filtered = false;
                                }
                                break;
                        }
                    })
                    if (filtered) {
                        $(this).removeClass('_filtered');
                    }
                });
                app.setChessTotal($items.length - $items.filter('._filtered').length);
            } else {
                $items.removeClass('_filtered');
                app.setChessTotal(total);
            }

        });

        // handle get filters
        var filters = {}, hash, hashes;
        hashes = decodeURIComponent(window.location.search.substr(1));
        if (hashes.length) {
            hashes = hashes.split('&');
            for (var i in hashes) {
                if (hashes.hasOwnProperty(i)) {
                    hash = hashes[i].split('=');
                    if (typeof hash[1] != 'undefined') {
                        filters[hash[0]] = hash[1];
                    }
                }
            }
            // console.log(filters);
            if (filters.length !== 0) {
                if (typeof (filters.komnatnye) != 'undefined') {
                    var rooms = filters['komnatnye'].split(',');
                    $.each(rooms, function (i, v) {
                        var input = $form.find('[name="rooms"]').filter('[value="' + v + '"]');
                        if (input) {
                            input.prop('checked', true);
                        }
                    });
                    // $form.find('[name="rooms"]').filter('[value="' + filters.komnatnye + '"]').prop('checked', true);
                }
                if (typeof (filters['appchessresidential|area']) != 'undefined') {
                    var area = filters['appchessresidential|area'].split(',');
                    sliderArea.noUiSlider.set(area);
                }
                if (typeof (filters['appchessresidential|price']) != 'undefined') {
                    var price = filters['appchessresidential|price'].split(',');
                    sliderPrice.noUiSlider.set(price);
                }
                $form.find('[name="rooms"]').trigger('change');
            }
        }

    },

    setChessTotal: function (total) {
        var endings = ['квартира', 'квартиры', 'квартир'];
        $('.js-chess-filter__total').text(total + ' ' + app.getNumEnding(total, endings));
    },

    /**
     * Функция возвращает окончание для множественного числа слова на основании числа и массива окончаний
     * param  iNumber Integer Число на основе которого нужно сформировать окончание
     * param  aEndings Array Массив слов или окончаний для чисел (1, 4, 5),
     *         например ['яблоко', 'яблока', 'яблок']
     * return String
     * 
     * https://habrahabr.ru/post/105428/
     */
    getNumEnding: function (iNumber, aEndings) {
        var sEnding, i;
        iNumber = iNumber % 100;
        if (iNumber >= 11 && iNumber <= 19) {
            sEnding = aEndings[2];
        } else {
            i = iNumber % 10;
            switch (i)
            {
                case (1):
                    sEnding = aEndings[0];
                    break;
                case (2):
                case (3):
                case (4):
                    sEnding = aEndings[1];
                    break;
                default:
                    sEnding = aEndings[2];
            }
        }
        return sEnding;
    },

}

jQuery(function () {
    "use strict";

    $(document).ready(function () {
        initMainSlider();
        initSmallSliders();
        initReviewsSlider();
        initAgentsPresentation();
        setAgentsPresentation();
        initMenu();
        initMask();
        initPopup();
        initSelect();
        initValidate();
        initRealtyFilters();
        initRealty();
//        initPassword();
        initEasyPassword();
        initGallery();
        initHypothec();
        initDatepicker();
        initScrollbar();
        initScroll();
        initAbout();
        initFileinput();
        initAlphabet();
        initAntispam();
    });

    $(window).on('resize', function () {
        initSmallSliders();
//        initMenu();
    });

    function initMainSlider() {
        var time = appConfig.sliderAutoplaySpeed / 1000;
        $('.js-slider-main').each(function(){
            var $bar = $(this).find('.js-slider-main__bar'),
                    $slick = $(this).find('.js-slider-main__slider'),
                    isPause = false,
                    tick,
                    percentTime;

            if ($slick.length === 0)
                return;

            $slick.slick({
                dots: true,
                arrows: false,
                infinite: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                fade: true,
                adaptiveHeight: true,
                speed: appConfig.sliderFadeSpeed
    //            autoplaySpeed: appConfig.sliderAutoplaySpeed,
            });
            $slick.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                if (currentSlide < nextSlide) {
                    $(slick.$slides[currentSlide]).addClass('_fade _left');
                    $(slick.$slides[nextSlide]).addClass('_fade _right');
                } else {
                    $(slick.$slides[currentSlide]).addClass('_fade _right');
                    $(slick.$slides[nextSlide]).addClass('_fade _left');
                }
                clearTimeout(tick);
                $bar.animate({
                    width: 0 + '%'
                }, 100);
            });
            $slick.on('afterChange', function (event, slick, currentSlide) {
                $(slick.$slides[currentSlide]).removeClass('_fade _left _right');
                startProgressbar();
            });

            $slick.on({
                mouseenter: function () {
                    isPause = true;
                },
                mouseleave: function () {
                    isPause = false;
                }
            })

            function startProgressbar() {
//                return false;
                resetProgressbar();
                percentTime = 0;
    //            isPause = false;
                tick = setInterval(interval, 10);
            }

            function interval() {
                if (isPause === false) {
                    percentTime += 1 / (time + 0.1);
                    $bar.css({
                        width: percentTime + "%"
                    });
                    if (percentTime >= 100) {
                        $slick.slick('slickNext');
                    }
                }
            }
            function resetProgressbar() {
                $bar.css({
                    width: 0 + '%'
                });
                clearTimeout(tick);
            }

            startProgressbar();
        });



    }

    function initSmallSliders() {
        if ($(window).outerWidth() < appConfig.breakpoint.md) {
            $('.js-slider-small:not(.slick-initialized)').slick({
                dots: true,
                arrows: false,
                infinite: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                centerMode: true,
                centerPadding: '15px',
                focusOnSelect: true,
            });
        } else {
            $('.js-slider-small.slick-initialized').slick('unslick');
        }
        if ($(window).outerWidth() < appConfig.breakpoint.md) {
            $('.js-agents-slider .agents-slider__item').off('click');
            $('.js-agents-slider:not(.slick-initialized)').slick({
                dots: false,
                arrows: false,
                infinite: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                centerMode: true,
                centerPadding: '25%',
//                centerPadding: '80px',
                focusOnSelect: true,
            });
            $('.js-agents-slider').on('afterChange', function (event, slick, currentSlide) {
//                console.log(slick);
                $(this).find('._active').removeClass('_active');
                $(slick.$slides[currentSlide]).addClass('_active');
                setAgentsPresentation();
            });
        } else {
            $('.js-agents-slider.slick-initialized').slick('unslick');
            initAgentsPresentation();
        }
    }

    function initAgentsPresentation() {
        if ($(window).outerWidth() >= appConfig.breakpoint.md) {
            $('.js-agents-slider .agents-slider__item').on('click', function () {
                $(this).parent().find('._active').removeClass('_active');
                $(this).addClass('_active');
                setAgentsPresentation();
            });
        }
    }

    function setAgentsPresentation() {
        if ($('.js-agents-slider').length) {
            var $agent = $('.js-agents-slider ._active .js-agents-slider__short');
            var $full = $('.js-agents-slider__full');
            $full.find('.js-agents-slider__full__img').attr('src', $agent.data('agent-img'));
            $full.find('.js-agents-slider__full__name').text($agent.data('agent-name'));
            var phone = $agent.data('agent-phone');
            $full.find('.js-agents-slider__full__phone a').text(phone).attr('href', 'tel:' + phone.replace(/[-\s()]/g, ''));
            var mail = $agent.data('agent-mail');
            $full.find('.js-agents-slider__full__mail a').text(mail).attr('href', 'mailto:' + mail);
            var url = $agent.data('agent-url');
            $full.find('.js-agents-slider__full__url a').attr('href', url);
            $('.js-agents-slider__url').attr('href', url);
        }
    }

    function initMenu() {
        $('.js-menu-toggler').on('click', function (e) {
            e.preventDefault();
            var href = $(this).attr('href');
            $('.js-menu-toggler[href="' + href + '"]').toggleClass('_active');
            $(href).toggleClass('_active');
            $('.js-menu._active').length == 0 ? $('.js-menu-overlay').hide() : $('.js-menu-overlay').show();
        });
        $('.js-menu-overlay').on('click', function (e) {
            $('.js-menu-toggler, .js-menu').removeClass('_active');
            $(this).hide()
        });
        $('.js-menu-second-toggler').on('click', function (e) {
            e.preventDefault();
            $(this).toggleClass('_active');
            $('.js-menu-second').toggleClass('_active');
        });
    }

    function initMask() {
        $('.js-mask__tel').inputmask({
            mask: '+9 (999) 999-99-99'
        });
        Inputmask.extendAliases({
            'numeric': {
                autoUnmask: true,
                showMaskOnHover: false,
                radixPoint: ",",
                groupSeparator: " ",
                digits: 0,
                allowMinus: false,
                autoGroup: true,
                rightAlign: false,
                unmaskAsNumber: true
            }
        });
        $('.js-mask__numeric').inputmask("numeric");
        $('.js-mask__currency').inputmask("numeric", {
            suffix: ' руб.'
        });
        $('.js-mask__square').inputmask("numeric", {
            suffix: ' м²'
        });
        $('.js-mask__square_filter').inputmask("numeric", {
            suffix: ' м²',
            unmaskAsNumber: false
        });
        $('.js-mask__currency_filter').inputmask("numeric", {
            suffix: ' руб.',
            unmaskAsNumber: false
        });
        $('.js-mask__age').inputmask("numeric", {
            suffix: ' лет'
        });
        $('.js-mask__percent').inputmask("numeric", {
            suffix: '%'
        });
        $('.js-mask__currency, .js-mask__square, .js-mask__percent').on('blur', function () {
            // need for remove suffix
            // https://github.com/RobinHerbots/Inputmask/issues/1551
            var v = $(this).val();
            if (v == 0 || v == '') {
                $(this).val('');
            }
        });
    }

    function initPopup() {
        var options = {
            baseClass: '_popup',
            autoFocus: false,
            btnTpl: {
                smallBtn: '<span data-fancybox-close class="fancybox-close-small"><span class="link">Закрыть</span></span>',
            },
            touch: false,
        };
        $('.js-popup').on('click', function () {
            $.fancybox.close();
            var $target = $('#' + $(this).attr('href').substr(1));
            var data = $(this).data();
            if ($target.length && data) {
                for (var k in data) {
                    var $input = $target.find('[name="' + k + '"]');
                    if ($input.length) {
                        $input.val(data[k]);
                    }
                }
            }
        }).fancybox(options);
        if (window.location.hash) {
            var $cnt = $(window.location.hash);
            if ($cnt.length && $cnt.hasClass('popup-cnt')) {
                $.fancybox.open($cnt, options);
            }
        }
    }

    function initSelect() {
        // select2
        $.fn.select2.defaults.set("theme", "custom");
        $.fn.select2.defaults.set("minimumResultsForSearch", Infinity);
        $('.js-select2').select2();
        $(window).on('resize', function () {
            $('.js-select2').select2();
        });
//        $('.js-select2').select2('open');
        $(".js-agent-search").select2({
            theme: 'agents',
            width: '100%',
            language: {
                inputTooShort: function (a) {
                    return "Пожалуйста, введите " + (a.minimum - a.input.length) + " или больше символов"
                },
            },
            ajax: {
                url: "https://api.myjson.com/bins/okyvi",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        q: params.term, // search term
                        action: 'agent_search'
                    };
                },
                processResults: function (data) {
//                    console.log(data);
                    var results = $.map(data, function (value, key) {
                        return {
                            id: key,
                            text: value.pagetitle,
                            agent: value
                        };
                    });
//                    console.log(results);
                    return {
                        results: results,
                    };
                },
                cache: true
            },
            templateResult: formatResult,
            templateSelection: formatSelection,
            escapeMarkup: function (markup) {
                return markup;
            }, // let our custom formatter work
            minimumInputLength: 3,
            maximumSelectionLength: 1,
        });
        function formatResult(item) {
            if (item.loading) {
                return 'поиск…';
            }
            return '<div class="select2-result-agent"><strong>' +
                    item.agent.pagetitle + '</strong><br>' + item.agent.value + '</div>';
        }
        function formatSelection(item) {
            return item.agent.pagetitle;
        }
        $('.js-agent-search').on('select2:select', function (e) {
            var data = e.params.data;
//            console.log(data);
            window.location = data.agent.uri
        });

    }

    function initValidate() {
        $.validator.addMethod("phone", function (value, element) {
            return this.optional(element) || /^\+\d\s\(\d{3}\)\s\d{3}-\d{2}-\d{2}$/.test(value);
        }, "Please specify a valid mobile number");
        var options = {
            errorPlacement: function (error, element) {},
            rules: {
                phone: "phone"
            }
        };
        $('.js-validate').each(function () {
            $(this).validate(options);
        });
    }

    function initRealtyFilters() {
        $('.js-filters-realty-type').on('click', function () {
            $('.js-filters-realty-title').text($(this).data('filters-title'));
        });
    }

    function initPassword() {
        if ($('.js-password').length === 0) {
            return;
        }
        // https://github.com/dropbox/zxcvbn
        $.ajax({
            url: "./js/libs/zxcvbn.js",
            dataType: "script",
            cache: true
        })
                .done(function (script, textStatus) {
                    init();
                })
                .fail(function (jqxhr, settings, exception) {
                    console.log('Error loading zxcvbn');
                });

        function init() {
            $('.js-password').on('keyup', function () {
                if (typeof (zxcvbn) === 'undefined') {
                    return;
                }
                var val = $(this).val().trim(),
                        res = zxcvbn(val),
                        cnt = $(this).siblings('.input-help');
                cnt.removeClass('_0 _1 _2 _3 _4');
                if (val.length) {
                    cnt.addClass('_' + res.score);
                }
//                console.log(res.score);
            });
            $('.js-password').keyup();
        }
    }

    /**
     * Плохой: 8 знаков, остальных проверок нет
     Средний: 10 знаков, мин одна буква, мин одна одна цифра
     Хороший: 12 знаков, плюс проверка на спецзнак и заглавную
     */
    function initEasyPassword() {
        var specials = /[!@#$%^&~]/;
        $('.js-password').on('keyup', function () {
            var val = $(this).val().trim(),
                    cnt = $(this).siblings('.input-help'),
                    score = 0;
            cnt.removeClass('_0 _1 _2 _3');
            if (val.length) {
                if (val.length >= appConfig.minPasswordLength) {
                    score = 1;
                    if (val.length >= 10 && val.search(/\d/) !== -1 && val.search(/\D/) !== -1) {
                        score = 2;
                        if (val.length >= 12 && val.search(/[A-Z]/) !== -1 && val.search(specials) !== -1) {
                            score = 3;
                        }
                    }
                }
                cnt.addClass('_' + score);
            }
        });
        $('.js-password').keyup();
    }

    function initReviewsSlider() {
        var $slider = $('.js-slider-reviews');
        $slider.slick({
            dots: true,
            arrows: false,
            infinite: true,
            slidesToShow: 3,
            focusOnSelect: true,
            adaptiveHeight: true,
            dotsClass: 'slick-dots _big',
            responsive: [
                {
                    breakpoint: appConfig.breakpoint.lg,
                    settings: {
                        slidesToShow: 1
                    }
                }
            ]
        });
        var $big = $('.reviews__list._big .reviews__list__item');
        var current = 0;
        if ($big.length && $slider.length) {
            setBig();
            $slider
                    .on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                        if (currentSlide != nextSlide) {
                            clearBig();
                        }
                        current = currentSlide;
                    })
                    .on('afterChange', function (event, slick, currentSlide) {
                        if (currentSlide != current) {
                            setBig();
                        }
                    });
        }
        function clearBig() {
            $big.fadeOut().empty();
        }
        function setBig() {
            $('.js-slider-reviews .slick-current .reviews__list__item__inner').clone().appendTo($big);
            $big.fadeIn();
            $big.parent().css('height', $big.outerHeight(true));
        }
    }

    function initRealty() {
        init();
        $(document).on('pdopage_load', function (e, config, response) {
            init();
        });
        $(document).on('mse2_load', function (e, data) {
            init();
        });
        function init() {
            $('.js-realty-list-slider[data-init="false"]').each(function () {
                var $togglers = $(this).find('.js-realty-list-slider__img-wrapper');
                var $counter = $(this).find('.js-realty-list-slider__counter');
                $togglers.each(function (i) {
                    $(this).on('mouseover', function () {
                        $togglers.removeClass('_active');
                        $(this).addClass('_active');
                        $counter.text(i + 1);
                    });
                });
                $(this).data('init', 'true');
            });
        }
    }

    function initGallery() {
        $('.js-gallery-nav').slick({
            dots: false,
            arrows: true,
            infinite: false,
            slidesToShow: 6,
            slidesToScroll: 1,
            focusOnSelect: true,
            asNavFor: '.js-gallery__slider',
            responsive: [
                {
                    breakpoint: appConfig.breakpoint.md,
                    settings: {
                        slidesToShow: 3
                    }
                }
            ],
        });
        $('.js-gallery').each(function (i, el) {
            var $slider = $(el).find('.js-gallery__slider');
            var $current = $(el).find('.js-gallery__current');
            $slider.slick({
                dots: false,
                arrows: true,
                infinite: true,
                swipeToSlide: true,
                asNavFor: '.js-gallery-nav',
                responsive: [
                    {
                        breakpoint: appConfig.breakpoint.md,
                        settings: {
                            arrows: false
                        }
                    }
                ],
            });
            $slider.on('afterChange', function (event, slick, currentSlide) {
                $current.text(++currentSlide);
            });
            var $links = $slider.find('.slide:not(.slick-cloned)');
            $(el).find('.js-gallery__total').text($links.length);
            $links.on('click', function () {
                $.fancybox.open($links, {
                    loop: true
                }, $links.index(this));

                return false;
            });
        });
    }

    /**
     * Функция возвращает окончание для множественного числа слова на основании числа и массива окончаний
     * param  iNumber Integer Число на основе которого нужно сформировать окончание
     * param  aEndings Array Массив слов или окончаний для чисел (1, 4, 5),
     *         например ['яблоко', 'яблока', 'яблок']
     * return String
     * 
     * https://habrahabr.ru/post/105428/
     */
    function getNumEnding(iNumber, aEndings) {
        var sEnding, i;
        iNumber = iNumber % 100;
        if (iNumber >= 11 && iNumber <= 19) {
            sEnding = aEndings[2];
        } else {
            i = iNumber % 10;
            switch (i)
            {
                case (1):
                    sEnding = aEndings[0];
                    break;
                case (2):
                case (3):
                case (4):
                    sEnding = aEndings[1];
                    break;
                default:
                    sEnding = aEndings[2];
            }
        }
        return sEnding;
    }

    function initHypothec() {
        var style = [];
        $('.js-hypothec').each(function () {
            var $cost = $(this).find('.js-hypothec__cost'),
                    cost = $cost.val(),
                    $paymentPercent = $(this).find('.js-hypothec__payment-percent'),
                    $paymentSum = $(this).find('.js-hypothec__payment-sum'),
                    $paymentSumPicker = $(this).find('.js-picker__target')[0],
                    $age = $(this).find('.js-hypothec__age'),
                    $credit = $(this).find('.js-hypothec__credit'),
                    $slider = $(this).find('.js-hypothec__slider'),
                    $items = $(this).find('.js-hypothec__item'),
                    $scroll = $(this).find('.js-hypothec__scroll'),
                    $total = $(this).find('.js-hypothec__show-target');
            var rate = [];
            $items.each(function () {
                rate.push(parseFloat($(this).find('.js-hypothec__rate').text().replace(",", ".")) || 0);
            });
//            console.log(rate);
            var rateME = [];
            $items.each(function () {
                rateME.push(parseFloat($(this).find('.js-hypothec__rateME').text().replace(",", ".")) || 0);
            });
//            console.log(rateME);
            var credit = 0;
            var age = $age.val();
            var percent;
            $cost.inputmask("numeric", {
                suffix: ' руб.',
                oncomplete: recalcPayments
            });
            $cost.on("change", recalcPayments);
            function recalcPayments() {
                cost = $(this).val();
                $paymentSum.prop('max', cost);
                $paymentSumPicker.noUiSlider.updateOptions({
                    range: {
                        'min': 0,
                        'max': cost
                    }
                });
                $paymentSumPicker.noUiSlider.set(cost / 2);
                $paymentSum.trigger('change');
            }
            ;
            $paymentSum.on('change', function () {
                percent = $(this).val() * 100 / cost;
                if (percent > 100) {
                    percent = 100;
                    $(this).val(cost);
                }
                credit = calcCredit(cost, percent);
                $paymentPercent.val(percent).trigger('change');
                $credit.val(credit).trigger('change');
                $items.each(function (i, el) {
                    $(el).find('.js-hypothec__first').text(formatPrice($paymentSum.val()));
                    $(el).find('.js-hypothec__permonth').text(formatPrice(calcPerMonth(credit, rate[i], age)));
                    $(el).find('.js-hypothec__permonthME').text(formatPrice(calcPerMonth(credit, rateME[i], age)));
                    $(el).find('.js-hypothec__economy').text(formatPrice(calcPerMonth(credit, rate[i], age) * 12 * age - calcPerMonth(credit, rateME[i], age) * 12 * age));
                });
            });
            $paymentSum.inputmask("numeric", {
                suffix: ' руб.',
                oncomplete: function () {
                    $(this).parents('.js-picker').find('.js-picker__target')[0].noUiSlider.set($(this).val());
                }
            });
            $paymentSum.trigger('change');
            $age.on('change', function () {
                age = $age.val();
                $items.each(function (i, el) {
                    $(el).find('.js-hypothec__permonth').text(formatPrice(calcPerMonth(credit, rate[i], age)));
                    $(el).find('.js-hypothec__permonthME').text(formatPrice(calcPerMonth(credit, rateME[i], age)));
                    $(el).find('.js-hypothec__economy').text(formatPrice(calcPerMonth(credit, rate[i], age) * 12 * age - calcPerMonth(credit, rateME[i], age) * 12 * age));
                });
            });
            $scroll.find('.hypothec__list__item').each(function (i) {
                $(this).find('.hypothec__list__item__inner').on('click', function (e) {
                    e.preventDefault();
                    $slider.slick('slickGoTo', i);
                });
            });
            // filters, каждый селект фильтрует отдельно
            $(this).find('.js-hypothec__filter').each(function () {
                var fName = $(this).data('hypothec-filter'),
                        className = 'filter-' + fName;
                style.push('.' + className + '{display:none !important}');
                // псевдоселекты
                var $checkboxes = $(this).find('input[type=checkbox]');
                $checkboxes.on('change', function () {
                    var $checked = $checkboxes.filter(':checked');
                    if ($checked.length) {
                        $items.removeClass(className);
                        var f = [];
                        $checked.each(function () {
                            f.push(':not([data-filter-' + $(this).val() + '])');
                        });
                        $items.filter('.js-hypothec__item' + f.join('')).addClass(className);
                    } else {
                        $items.removeClass(className);
                    }
                    setTotal($total, $items);
                });
            });
            // инпуты
            $paymentPercent.on('change', function () {
                var val = parseInt($(this).val()), className = 'filter-first';
                $items.filter('[data-filter-first]').each(function () {
                    if (parseInt($(this).data('filter-first')) > val) {
                        $(this).addClass(className);
                    } else {
                        $(this).removeClass(className);
                    }
                });
            }).trigger('change');
            $credit.on('change', function () {
                var val = parseInt($(this).val()), className = 'filter-min';
                $items.filter('[data-filter-min]').each(function () {
                    if (parseInt($(this).data('filter-min')) > val) {
                        $(this).addClass(className);
                    } else {
                        $(this).removeClass(className);
                    }
                });
                setTotal($total, $items);
            }).trigger('change');
            style.push('.filter-minyear{display:none !important}');
            style.push('.filter-maxyear{display:none !important}');
            $age.on('change', function () {
                var val = parseInt($(this).val());
                $items.filter('[data-filter-minyear]').each(function () {
                    if (parseInt($(this).data('filter-minyear')) > val) {
                        $(this).addClass('filter-minyear');
                    } else {
                        $(this).removeClass('filter-minyear');
                    }
                });
                $items.filter('[data-filter-maxyear]').each(function () {
                    if (parseInt($(this).data('filter-maxyear')) < val) {
                        $(this).addClass('filter-maxyear');
                    } else {
                        $(this).removeClass('filter-maxyear');
                    }
                });
                setTotal($total, $items);
            }).trigger('change');
        });
        if (style.length) {
            var uniqueStyle = [];
            $.each(style, function (i, el) {
                if ($.inArray(el, uniqueStyle) === -1) {
                    uniqueStyle.push(el);
                }
            });
            $('<style>' + uniqueStyle.join('') + '</style>').appendTo('head')
        }

        function calcPayment(cost, percent) {
            return Math.ceil(cost * percent / 100);
        }
        function calcCredit(cost, percent) {
            return cost - Math.ceil(cost * percent / 100);
        }
        function calcPerMonth(credit, rate, age) {
            return Math.ceil(credit * ((rate / 1200.0) / (1.0 - Math.pow(1.0 + rate / 1200.0, -(age * 12)))));
        }
        function formatPrice(price) {
            return price.toString().replace(/./g, function (c, i, a) {
                return i && c !== "." && !((a.length - i) % 3) ? ' ' + c : c;
            });
        }
        function setTotal($target, $items) {
            var total = $items.length - $items.filter('[class*="filter"]').length;
            var a = getNumEnding(total, ['Найдена', 'Найдено', 'Найдено']);
            var b = getNumEnding(total, ['ипотечная программа', 'ипотечные программы', 'ипотечных программ']);
            $target.text([a, total, b].join(' '));
        }

        $('.js-hypothec__slider').slick({
            dots: true,
            arrows: false,
            infinite: true,
            slidesToShow: 1,
            slidesToScroll: 1,
            centerMode: true,
            centerPadding: '15px',
            focusOnSelect: true,
            mobileFirst: true,
            responsive: [
                {
                    breakpoint: appConfig.breakpoint.md - 1,
                    settings: {
                        dots: false,
                        fade: true,
                        draggable: false,
                        centerPadding: '0px'
                    }
                }
            ]
        });
        $('.js-hypothec__show-btn').on('click', function (e) {
            e.preventDefault();
            var $t = $(this).parents('.js-hypothec').find('.js-hypothec__show-target');
            if ($t.length) {
                var offset = $t.offset().top - 40;
                if ($('.header__main').css('position') === 'fixed') {
                    offset -= $('.header__main').outerHeight(true);
                }
                $('html, body').animate({scrollTop: offset}, 300);
            }
        });
    }

    function initDatepicker() {
        var datepickerVisible = false;
        var commonOptions = {
            position: 'top left',
            onShow: function (inst, animationCompleted) {
                if (animationCompleted) {
                    datepickerVisible = true;
                }
            },
            onHide: function (inst, animationCompleted) {
                if (animationCompleted) {
                    datepickerVisible = false;
                }
            },
            onSelect: function (formattedDate, date, inst) {
                inst.$el.trigger('change');
            }
        };
        $('.js-datetimepicker').datepicker(Object.assign({
            minDate: new Date(),
            timepicker: true,
            dateTimeSeparator: ', ',
        }, commonOptions));
        $('.js-datepicker-range').each(function (el) {
            var min = new Date($(this).data('min')) || null,
                    max = new Date($(this).data('max')) || new Date();
            $(this).datepicker(Object.assign({
                minDate: min,
                maxDate: max,
                range: true,
                multipleDatesSeparator: ' - ',
            }, commonOptions));
            var datepicker = $(this).data('datepicker');
            datepicker.selectDate([min, max]);
        });
        $('.js-datetimepicker, .js-datepicker-range').on('click', function () {
            if (datepickerVisible) {
                var datepicker = $('.js-datetimepicker, .js-datepicker-range').data('datepicker');
                datepicker.hide();
            }
        });
    }

    function initScrollbar() {
        $('.js-scrollbar').scrollbar();
        var w = $(window).outerWidth();
        if (w < appConfig.breakpoint.md) {
            $('.js-scrollbar-sm').scrollbar();
            $('.js-scrollbar-sm-md').scrollbar();
        }
        if (w < appConfig.breakpoint.lg) {
            $('.js-scrollbar-sm-md').scrollbar();
        }
        if (w >= appConfig.breakpoint.md && w < appConfig.breakpoint.lg) {
            $('.js-scrollbar-md').scrollbar();
        }
        if (w >= appConfig.breakpoint.md) {
            $('.js-scrollbar-md-lg').scrollbar();
        }
        if (w >= appConfig.breakpoint.lg) {
            $('.js-scrollbar-lg').scrollbar();
        }
        $(window).on('resize', function () {
            if ($(window).outerWidth() < appConfig.breakpoint.md) {
                $('.js-scrollbar-sm').scrollbar();
            } else {
                $('.js-scrollbar-sm').scrollbar('destroy');
            }
            if ($(window).outerWidth() >= appConfig.breakpoint.md
                    && $(window).outerWidth() < appConfig.breakpoint.lg) {
                $('.js-scrollbar-md').scrollbar();
            } else {
                $('.js-scrollbar-md').scrollbar('destroy');
            }
            if (w < appConfig.breakpoint.lg) {
                $('.js-scrollbar-sm-md').scrollbar();
            } else {
                $('.js-scrollbar-sm-md').scrollbar('destroy');
            }
            if ($(window).outerWidth() >= appConfig.breakpoint.md) {
                $('.js-scrollbar-md-lg').scrollbar();
            } else {
                $('.js-scrollbar-md-lg').scrollbar('destroy');
            }
            if ($(window).outerWidth() >= appConfig.breakpoint.lg) {
                $('.js-scrollbar-lg').scrollbar();
            } else {
                $('.js-scrollbar-lg').scrollbar('destroy');
            }
        });
//        $('.js-scrollbar-hot').scrollbar();
    }

    /**
     * Прокрутка по ссылке до элемента
     */
    function initScroll() {
        $('.js-scroll').on('click', function (e) {
            e.preventDefault();
            var $target = $($(this).attr('href'));
            if ($target.length) {
                var offset = $target.offset().top - 40;
                if ($('.header__main').css('position') === 'fixed') {
                    offset -= $('.header__main').outerHeight(true);
                }
                if ($('.header').css('position') === 'fixed') {
                    offset -= $('.header').outerHeight();
                }
                $('html,body').animate({scrollTop: offset}, 300);
            }
        });
    }
    function initAbout() {
        $('.js-about-hystory__year-slider').slick({
            dots: false,
            arrows: false,
            infinite: true,
            slidesToShow: 5,
            slidesToScroll: 1,
            centerMode: true,
            vertical: true,
            centerPadding: '50px',
            asNavFor: '.js-about-hystory__content-slider',
            focusOnSelect: true,
            mobileFirst: true,
            responsive: [
                {
                    breakpoint: appConfig.breakpoint.md - 1,
                    settings: {
                        centerPadding: '70px'
                    }
                }
            ]
        });
        $('.js-about-hystory__year-slider').on('beforeChange', function (event, slick, currentSlide, nextSlide) {
//                console.log(slick);
            $(this).find('._sibling').removeClass('_sibling');
            $(slick.$slides[nextSlide]).next().addClass('_sibling');
            $(slick.$slides[nextSlide]).prev().addClass('_sibling');
        });
        $('.js-about-hystory__content-slider').slick({
            dots: false,
            arrows: false,
            infinite: true,
            slidesToShow: 1,
            slidesToScroll: 1,
            fade: true,
            asNavFor: '.js-about-hystory__year-slider',
            adaptiveHeight: true,
            draggable: false
        });
    }

    function initFileinput() {
        $('.js-fileinput__cnt').each(function () {
            $(this).data('default', $(this).text());
        });
        $('.js-fileinput').on('change', function (e) {
            if (this.files) {
                var fileName = $(this).val().split('\\').pop();
                $(this).parent().find('.js-fileinput__cnt').text(fileName);
            }
        });
    }

    function initAntispam() {
        setTimeout(function () {
            $('input[name="email3"],input[name="info"],input[name="text"]').attr('value', '').val('');
        }, 5000);
    }

    function initAlphabet() {
        $('.js-alphabet input').on('change', function () {
            $('.js-alphabet li').removeClass('_active');
            if ($(this).prop('checked')) {
                $(this).parents('li').addClass('_active');
            }
        });
        $('.js-alphabet a').on('click', function (e) {
            e.preventDefault();
            $('.js-alphabet li').removeClass('_active');
            $(this).parents('li').addClass('_active');
            if (typeof mSearch2 !== 'undefined') {
                mSearch2.reset();
            }
        });
    }

});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsialF1ZXJ5KGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB9KTtcclxuICAgIFxyXG59KTsiXSwiZmlsZSI6ImNvbW1vbi5qcyJ9
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgYXBwLmluaXRpYWxpemUoKTtcclxufSk7XHJcblxyXG52YXIgYXBwID0ge1xyXG4gICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxyXG5cclxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCcuanMtaGlkZS1lbXB0eScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoISQodGhpcykuZmluZCgnLmpzLWhpZGUtZW1wdHlfX2NudCA+IConKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmluaXRMb2dvKCk7XHJcbiAgICAgICAgdGhpcy5pbml0UHNldWRvU2VsZWN0KCk7XHJcbiAgICAgICAgdGhpcy5pbml0UHNldWRvU2VsZWN0U2VhcmNoKCk7XHJcbiAgICAgICAgdGhpcy5pbml0VGFicygpO1xyXG4gICAgICAgIHRoaXMuaW5pdFJhbmdlKCk7XHJcbiAgICAgICAgdGhpcy5pbml0Q2hlc3MoKTtcclxuICAgICAgICB0aGlzLmluaXRDaGVzc0ZpbHRlcigpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0TG9nbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0aW1lb3V0ID0gYXBwQ29uZmlnLmxvZ29VcGRhdGVUaW1lb3V0IHx8IDMwMDAsXHJcbiAgICAgICAgICAgICAgICAkbG9nbyA9ICQoJy5qcy1sb2dvJyksIG5ld1NyYyA9ICRsb2dvLmRhdGEoJ25ld3NyYycpLFxyXG4gICAgICAgICAgICAgICAgJG5ld0xvZ28gPSAkKCc8aW1nPicpO1xyXG4gICAgICAgICRuZXdMb2dvLmF0dHIoJ3NyYycsIG5ld1NyYyk7XHJcbiAgICAgICAgJG5ld0xvZ28ub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJGxvZ28ucGFyZW50KCkuY3NzKCd3aWR0aCcsICRsb2dvLm91dGVyV2lkdGgoKSk7XHJcbiAgICAgICAgICAgICAgICAkbG9nby5mYWRlT3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbG9nby5hdHRyKCdzcmMnLCAkbmV3TG9nby5hdHRyKCdzcmMnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGxvZ28uZmFkZUluKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZ28ucGFyZW50KCkuY3NzKCd3aWR0aCcsICdhdXRvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRQc2V1ZG9TZWxlY3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBjdXN0b20gc2VsZWN0XHJcbiAgICAgICAgJCgnLmpzLXNlbGVjdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLXNlbGVjdF9fdG9nZ2xlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnLmpzLXNlbGVjdCcpLnJlbW92ZUNsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICQodGhpcykucGFyZW50cygnLmpzLXNlbGVjdCcpLmFkZENsYXNzKCdfYWN0aXZlJykudG9nZ2xlQ2xhc3MoJ19vcGVuZWQnKTtcclxuICAgICAgICAgICAgJCgnLmpzLXNlbGVjdCcpLm5vdCgnLl9hY3RpdmUnKS5yZW1vdmVDbGFzcygnX29wZW5lZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQod2luZG93KS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zZWxlY3QnKS5yZW1vdmVDbGFzcygnX29wZW5lZCBfYWN0aXZlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRQc2V1ZG9TZWxlY3RTZWFyY2g6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBjdXN0b20gc2VsZWN0IHNlYXJjaFxyXG4gICAgICAgICQoJy5qcy1zZWxlY3Qtc2VhcmNoJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyICRpdGVtcyA9ICQoZWxlbWVudCkuZmluZCgnLmpzLXNlbGVjdC1zZWFyY2hfX2l0ZW0nKTtcclxuICAgICAgICAgICAgJChlbGVtZW50KS5maW5kKCcuanMtc2VsZWN0LXNlYXJjaF9faW5wdXQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbigna2V5dXAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9ICQodGhpcykudmFsKCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW1zLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnc2VsZWN0LXNlYXJjaCcpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgIT0gLTEgPyAkKHRoaXMpLnNob3coKSA6ICQodGhpcykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaXRlbXMuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCBmb3IgbUZpbHRlcjJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0VGFiczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJy5qcy10YWJzJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW0pIHtcclxuICAgICAgICAgICAgdmFyIHRhYnNTZWxlY3RvciA9IHR5cGVvZiAkKGVsZW0pLmRhdGEoJ3RhYnMnKSA9PT0gJ3VuZGVmaW5lZCcgPyAnLmpzLXRhYnNfX2xpc3QgPiBsaScgOiAkKGVsZW0pLmRhdGEoJ3RhYnMnKTtcclxuICAgICAgICAgICAgdmFyICRzZWxlY3QgPSAkKGVsZW0pLmZpbmQoJy5qcy10YWJzX19zZWxlY3QnKSwgd2l0aFNlbGVjdCA9ICRzZWxlY3QubGVuZ3RoO1xyXG4gICAgICAgICAgICAkKGVsZW0pLmVhc3l0YWJzKHtcclxuICAgICAgICAgICAgICAgIC8vINC00LvRjyDQstC70L7QttC10L3QvdGL0YUg0YLQsNCx0L7QsiDQuNGB0L/QvtC70YzQt9GD0LXQvCBkYXRhXHJcbiAgICAgICAgICAgICAgICB0YWJzOiB0YWJzU2VsZWN0b3IsXHJcbiAgICAgICAgICAgICAgICBwYW5lbENvbnRleHQ6ICQoZWxlbSkuaGFzQ2xhc3MoJ2pzLXRhYnNfZGlzY29ubmVjdGVkJykgPyAkKCcuanMtdGFic19fY29udGVudCcpIDogJChlbGVtKSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUhhc2g6IGZhbHNlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHdpdGhTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICQoZWxlbSkuZmluZCh0YWJzU2VsZWN0b3IpLmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSAkKHRoaXMpLmRhdGEoJ3NlbGVjdCcpIHx8ICQodGhpcykudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzZWxlY3QuYXBwZW5kKCc8b3B0aW9uIHZhbHVlPVwiJyArIHZhbHVlICsgJ1wiPicgKyB0ZXh0ICsgJzwvb3B0aW9uPicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2VsZWN0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtKS5lYXN5dGFicygnc2VsZWN0JywgJCh0aGlzKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKGVsZW0pLmZpbmQodGFic1NlbGVjdG9yKS5maW5kKCdhOm5vdCguZGlzYWJsZWQpJykuZmlyc3QoKS5jbGljaygpO1xyXG4gICAgICAgICAgICAkKGVsZW0pLmJpbmQoJ2Vhc3l0YWJzOmFmdGVyJywgZnVuY3Rpb24gKGV2ZW50LCAkY2xpY2tlZCwgJHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2VsZWN0LnZhbCgkY2xpY2tlZC5hdHRyKCdocmVmJykpLmNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHRhcmdldC5maW5kKCcuc2xpY2staW5pdGlhbGl6ZWQnKS5zbGljaygnc2V0UG9zaXRpb24nKTtcclxuICAgICAgICAgICAgICAgICR0YXJnZXQuZmluZCgnLmpzLXNlbGVjdDInKS5zZWxlY3QyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbml0UmFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCcuanMtcmFuZ2UnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbSkge1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVyID0gJChlbGVtKS5maW5kKCcuanMtcmFuZ2VfX3RhcmdldCcpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dHMgPSAkKGVsZW0pLmZpbmQoJ2lucHV0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRpbnB1dHMuZmlyc3QoKVswXSxcclxuICAgICAgICAgICAgICAgICAgICB0byA9ICRpbnB1dHMubGFzdCgpWzBdO1xyXG4gICAgICAgICAgICBpZiAoc2xpZGVyICYmIGZyb20gJiYgdG8pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtaW4gPSBwYXJzZUludChmcm9tLnZhbHVlKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBwYXJzZUludCh0by52YWx1ZSkgfHwgMDtcclxuICAgICAgICAgICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4XHJcbiAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtaW4nOiBtaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXgnOiBtYXhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBzbmFwVmFsdWVzID0gW2Zyb20sIHRvXTtcclxuICAgICAgICAgICAgICAgIHNsaWRlci5ub1VpU2xpZGVyLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAodmFsdWVzLCBoYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbmFwVmFsdWVzW2hhbmRsZV0udmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlc1toYW5kbGVdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZnJvbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm5vVWlTbGlkZXIuc2V0KFt0aGlzLnZhbHVlLCBudWxsXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXIubm9VaVNsaWRlci5zZXQoW251bGwsIHRoaXMudmFsdWVdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoZWxlbSkuaGFzQ2xhc3MoJ2pzLWNoZXNzLXJhbmdlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXIubm9VaVNsaWRlci5vbignZW5kJywgZnVuY3Rpb24gKHZhbHVlcywgaGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ1tuYW1lPVwicHJpY2VfbWF4XCJdJykudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnLmpzLXBpY2tlcicpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBzbGlkZXIgPSAkKGVsZW0pLmZpbmQoJy5qcy1waWNrZXJfX3RhcmdldCcpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gJChlbGVtKS5maW5kKCcuanMtcGlja2VyX19pbnB1dCcpWzBdO1xyXG4gICAgICAgICAgICBpZiAoc2xpZGVyICYmIGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluID0gcGFyc2VJbnQoaW5wdXQuZ2V0QXR0cmlidXRlKCdtaW4nKSkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gcGFyc2VJbnQoaW5wdXQuZ2V0QXR0cmlidXRlKCdtYXgnKSkgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcGFyc2VJbnQoaW5wdXQudmFsdWUpIHx8IG1pbjtcclxuICAgICAgICAgICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlciwge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB2YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdDogW3RydWUsIGZhbHNlXSxcclxuLy8gICAgICAgICAgICAgICAgICAgIGZvcm1hdDoge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluJzogbWluLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWF4JzogbWF4XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXIubm9VaVNsaWRlci5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gc2xpZGVyLm5vVWlTbGlkZXIuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtKS5maW5kKCcuanMtcGlja2VyX19pbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrID0gaW5wdXQuaW5wdXRtYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrICYmIGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnanMtbWFza19fYWdlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IGFwcC5nZXROdW1FbmRpbmcocGFyc2VJbnQoc2xpZGVyLm5vVWlTbGlkZXIuZ2V0KCkpLCBbJ8Kg0LPQvtC0JywgJ8Kg0LPQvtC00LAnLCAnwqDQu9C10YInXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sub3B0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeDogc3VmZml4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlci5ub1VpU2xpZGVyLnNldCh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRDaGVzczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICgkKHdpbmRvdykub3V0ZXJXaWR0aCgpID49IGFwcENvbmZpZy5icmVha3BvaW50LmxnKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1jaGVzcy10b29sdGlwX19jb250ZW50JykucGFyZW50KCkuaG92ZXIoYXBwLnNob3dDaGVzc1Rvb2x0aXAsIGFwcC5oaWRlQ2hlc3NUb29sdGlwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAkKCcuanMtY2hlc3MtaW5mb19fdGl0bGUnKSxcclxuICAgICAgICAgICAgYXJlYTogJCgnLmpzLWNoZXNzLWluZm9fX2FyZWEnKSxcclxuICAgICAgICAgICAgcHJpY2U6ICQoJy5qcy1jaGVzcy1pbmZvX19wcmljZScpLFxyXG4gICAgICAgICAgICBwcmljZVBlclNxdWFyZTogJCgnLmpzLWNoZXNzLWluZm9fX3ByaWNlUGVyU3F1YXJlJyksXHJcbiAgICAgICAgICAgIGZsb29yOiAkKCcuanMtY2hlc3MtaW5mb19fZmxvb3InKSxcclxuICAgICAgICAgICAgZmxvb3JzVG90YWw6ICQoJy5qcy1jaGVzcy1pbmZvX19mbG9vcnNUb3RhbCcpLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAkaHlwb3RoZWMgPSAkKCcuanMtY2hlc3MtaW5mb19faHlwb3RoZWMnKSxcclxuICAgICAgICAgICAgICAgICRoeXBvdGhlY1dyYXBwZXIgPSAkKCcuanMtY2hlc3MtaW5mb19faHlwb3RoZWMtd3JhcHBlcicpLFxyXG4gICAgICAgICAgICAgICAgJGltZ0ZsYXQgPSAkKCcuanMtY2hlc3MtaW5mb19faW1nRmxhdCcpLFxyXG4gICAgICAgICAgICAgICAgJGltZ0Zsb29yID0gJCgnLmpzLWNoZXNzLWluZm9fX2ltZ0Zsb29yJyksXHJcbiAgICAgICAgICAgICAgICAkdGFicyA9ICQoJy5qcy1jaGVzcy1pbmZvX190YWJzJyksXHJcbiAgICAgICAgICAgICAgICAkdGFiRmxvb3IgPSAkKCcuanMtY2hlc3MtaW5mb19fdGFiRmxvb3InKSxcclxuICAgICAgICAgICAgICAgICR0YWJGbGF0ID0gJCgnLmpzLWNoZXNzLWluZm9fX3RhYkZsYXQnKSxcclxuICAgICAgICAgICAgICAgICRmb3JtID0gJCgnLmpzLWNoZXNzLWluZm9fX2Zvcm0nKSxcclxuICAgICAgICAgICAgICAgIGluaXQgPSBmYWxzZTtcclxuICAgICAgICAkKCcuanMtY2hlc3MtaW5mb19faXRlbS5fYWN0aXZlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAoJHRoaXMuaGFzQ2xhc3MoJ19zZWxlY3RlZCcpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAkKCcuanMtY2hlc3MtaW5mb19faXRlbScpLnJlbW92ZUNsYXNzKCdfc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgJHRoaXMuYWRkQ2xhc3MoJ19zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluICR0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICR0YXJnZXRba2V5XS50ZXh0KGRhdGFba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGZvcm0udmFsKGRhdGEuZm9ybSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmh5cG90aGVjKSB7XHJcbiAgICAgICAgICAgICAgICAkaHlwb3RoZWMudGV4dChkYXRhLmh5cG90aGVjKTtcclxuICAgICAgICAgICAgICAgICRoeXBvdGhlY1dyYXBwZXIuc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGh5cG90aGVjV3JhcHBlci5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCQoJy5qcy1oeXBvdGhlY19fY29zdCcpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1oeXBvdGhlY19fY29zdCcpLnZhbChkYXRhLmZpbHRlclByaWNlKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1oeXBvdGhlY19fcGF5bWVudC1zdW0nKS52YWwoZGF0YS5maWx0ZXJQcmljZSAvIDIpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmltZ0ZsYXQpIHtcclxuICAgICAgICAgICAgICAgICRpbWdGbGF0LmF0dHIoJ2hyZWYnLCBkYXRhLmltZ0ZsYXQpO1xyXG4gICAgICAgICAgICAgICAgJGltZ0ZsYXQuZmluZCgnaW1nJykuYXR0cignc3JjJywgZGF0YS5pbWdGbGF0KTtcclxuICAgICAgICAgICAgICAgICRpbWdGbGF0LnNob3coKTtcclxuICAgICAgICAgICAgICAgICR0YWJGbGF0LnNob3coKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRpbWdGbGF0LmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICR0YWJGbGF0LmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5pbWdGbG9vcikge1xyXG4gICAgICAgICAgICAgICAgJGltZ0Zsb29yLmF0dHIoJ2hyZWYnLCBkYXRhLmltZ0Zsb29yKTtcclxuICAgICAgICAgICAgICAgICRpbWdGbG9vci5maW5kKCdpbWcnKS5hdHRyKCdzcmMnLCBkYXRhLmltZ0Zsb29yKTtcclxuICAgICAgICAgICAgICAgICRpbWdGbG9vci5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkdGFiRmxvb3Iuc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGltZ0Zsb29yLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICR0YWJGbG9vci5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCR0YWJzLmZpbmQoJ2xpOnZpc2libGUnKS5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgJHRhYnMuZmluZCgnbGk6dmlzaWJsZScpLmZpcnN0KCkuZmluZCgnYScpLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluaXQpIHtcclxuICAgICAgICAgICAgICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJHRhcmdldC50aXRsZS5vZmZzZXQoKS50b3AgLSAxMDBcclxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuanMtY2hlc3MtaW5mb19faXRlbS5fYWN0aXZlJykuZmlyc3QoKS5jbGljaygpO1xyXG4gICAgICAgIGluaXQgPSB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAkY2hlc3NUb29sdGlwOiBudWxsLFxyXG4gICAgJGNoZXNzVG9vbHRpcFRpbWVvdXQ6IG51bGwsXHJcblxyXG4gICAgc2hvd0NoZXNzVG9vbHRpcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkc2VsZiA9ICQodGhpcyk7XHJcbiAgICAgICAgYXBwLiRjaGVzc1Rvb2x0aXBUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkc2VsZi5vZmZzZXQoKTtcclxuICAgICAgICAgICAgYXBwLiRjaGVzc1Rvb2x0aXAgPSAkc2VsZi5maW5kKCcuanMtY2hlc3MtdG9vbHRpcF9fY29udGVudCcpLmNsb25lKCk7XHJcbiAgICAgICAgICAgIGFwcC4kY2hlc3NUb29sdGlwLmNzcyh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3AgKyAyOCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0ICsgMTAsXHJcbiAgICAgICAgICAgIH0pLmFwcGVuZFRvKCQoJ2JvZHknKSkuYWRkQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICB9LCAzMDApO1xyXG4gICAgfSxcclxuXHJcbiAgICBoaWRlQ2hlc3NUb29sdGlwOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGFwcC4kY2hlc3NUb29sdGlwVGltZW91dCk7XHJcbiAgICAgICAgYXBwLiRjaGVzc1Rvb2x0aXAucmVtb3ZlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRDaGVzc0ZpbHRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIGNoZXNzIGxpbmsgaW4gZmlsdGVyIHJlc3VsdFxyXG4gICAgICAgIGZ1bmN0aW9uIGluaXRMaW5rKCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChtU2VhcmNoMikgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1jaGVzc19fbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSAkLnBhcmFtKG1TZWFyY2gyLmdldEZpbHRlcnMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uID0gJCh0aGlzKS5hdHRyKCdocmVmJykgKyAnPycgKyBxdWVyeTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbigkKHRoaXMpLmF0dHIoJ2hyZWYnKSArICc/JyArIHF1ZXJ5LCAnX2JsYW5rJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdExpbmsoKTtcclxuICAgICAgICAkKGRvY3VtZW50KS5vbignbXNlMl9sb2FkJywgZnVuY3Rpb24gKGUsIGRhdGEpIHtcclxuICAgICAgICAgICAgaW5pdExpbmsoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyICRmb3JtID0gJCgnLmpzLWNoZXNzLWZpbHRlcicpLFxyXG4gICAgICAgICAgICAgICAgJGl0ZW1zID0gJCgnLmpzLWNoZXNzLWZpbHRlcl9faXRlbScpLFxyXG4gICAgICAgICAgICAgICAgYXJlYU1pbiA9IG51bGwsIGFyZWFNYXggPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgcHJpY2VNaW4gPSBudWxsLCBwcmljZU1heCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXJQcmljZSA9ICRmb3JtLmZpbmQoJ1tuYW1lPVwicHJpY2VfbWluXCJdJykucGFyZW50cygnLmpzLXJhbmdlJykuZmluZCgnLmpzLXJhbmdlX190YXJnZXQnKVswXSxcclxuICAgICAgICAgICAgICAgIHNsaWRlckFyZWEgPSAkZm9ybS5maW5kKCdbbmFtZT1cImFyZWFfbWluXCJdJykucGFyZW50cygnLmpzLXJhbmdlJykuZmluZCgnLmpzLXJhbmdlX190YXJnZXQnKVswXSxcclxuICAgICAgICAgICAgICAgIHRvdGFsID0gJGl0ZW1zLmxlbmd0aCAtICRpdGVtcy5maWx0ZXIoJy5fc29sZCcpLmxlbmd0aDtcclxuICAgICAgICBpZiAoJGZvcm0ubGVuZ3RoID09PSAwIHx8ICRpdGVtcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLnNldENoZXNzVG90YWwodG90YWwpO1xyXG4gICAgICAgICRpdGVtcy5maWx0ZXIoJ1tkYXRhLWZpbHRlci1hcmVhXScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJlYSA9IHBhcnNlRmxvYXQoJCh0aGlzKS5kYXRhKCdmaWx0ZXItYXJlYScpKTtcclxuICAgICAgICAgICAgaWYgKCFhcmVhTWluIHx8IGFyZWEgPCBhcmVhTWluKSB7XHJcbiAgICAgICAgICAgICAgICBhcmVhTWluID0gTWF0aC5mbG9vcihhcmVhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWFyZWFNYXggfHwgYXJlYSA+IGFyZWFNYXgpIHtcclxuICAgICAgICAgICAgICAgIGFyZWFNYXggPSBNYXRoLmNlaWwoYXJlYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkaXRlbXMuZmlsdGVyKCdbZGF0YS1maWx0ZXItcHJpY2VdJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmljZSA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgnZmlsdGVyLXByaWNlJykpO1xyXG4gICAgICAgICAgICBpZiAoIXByaWNlTWluIHx8IHByaWNlIDwgcHJpY2VNaW4pIHtcclxuICAgICAgICAgICAgICAgIHByaWNlTWluID0gcHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFwcmljZU1heCB8fCBwcmljZSA+IHByaWNlTWF4KSB7XHJcbiAgICAgICAgICAgICAgICBwcmljZU1heCA9IHByaWNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJGZvcm0uZmluZCgnW25hbWU9XCJhcmVhX21pblwiXScpLmF0dHIoJ3ZhbHVlJywgYXJlYU1pbikuYXR0cignbWluJywgYXJlYU1pbikuYXR0cignbWF4JywgYXJlYU1heCk7XHJcbiAgICAgICAgJGZvcm0uZmluZCgnW25hbWU9XCJhcmVhX21heFwiXScpLmF0dHIoJ3ZhbHVlJywgYXJlYU1heCkuYXR0cignbWluJywgYXJlYU1pbikuYXR0cignbWF4JywgYXJlYU1heCk7XHJcbiAgICAgICAgJGZvcm0uZmluZCgnW25hbWU9XCJwcmljZV9taW5cIl0nKS5hdHRyKCd2YWx1ZScsIHByaWNlTWluKS5hdHRyKCdtaW4nLCBwcmljZU1pbikuYXR0cignbWF4JywgcHJpY2VNYXgpO1xyXG4gICAgICAgICRmb3JtLmZpbmQoJ1tuYW1lPVwicHJpY2VfbWF4XCJdJykuYXR0cigndmFsdWUnLCBwcmljZU1heCkuYXR0cignbWluJywgcHJpY2VNaW4pLmF0dHIoJ21heCcsIHByaWNlTWF4KTtcclxuICAgICAgICAkZm9ybS5maW5kKCdbbmFtZT1cInJvb21zXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgkaXRlbXMuZmlsdGVyKCdbZGF0YS1maWx0ZXItcm9vbXM9XCInICsgJCh0aGlzKS52YWwoKSArICdcIl0nKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBzbGlkZXJQcmljZS5ub1VpU2xpZGVyLnVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgICAgICAgICBzdGFydDogW1xyXG4gICAgICAgICAgICAgICAgcHJpY2VNaW4sXHJcbiAgICAgICAgICAgICAgICBwcmljZU1heFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgJ21pbic6IHByaWNlTWluLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IHByaWNlTWF4XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0cnVlIC8vIEJvb2xlYW4gJ2ZpcmVTZXRFdmVudCdcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgc2xpZGVyQXJlYS5ub1VpU2xpZGVyLnVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgICAgICAgICBzdGFydDogW1xyXG4gICAgICAgICAgICAgICAgYXJlYU1pbixcclxuICAgICAgICAgICAgICAgIGFyZWFNYXhcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgICdtaW4nOiBhcmVhTWluLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IGFyZWFNYXhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRydWUgLy8gQm9vbGVhbiAnZmlyZVNldEV2ZW50J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgJGZvcm0uZmluZCgnaW5wdXQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZm9ybURhdGEgPSAkZm9ybS5zZXJpYWxpemVBcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZWE6IFthcmVhTWluLCBhcmVhTWF4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2U6IFtwcmljZU1pbiwgcHJpY2VNYXhdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb29tczogW11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcclxuICAgICAgICAgICAgJC5lYWNoKGZvcm1EYXRhLCBmdW5jdGlvbiAobiwgdikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHYubmFtZSA9PSAnYXJlYV9taW4nICYmIHYudmFsdWUgIT0gYXJlYU1pbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMuYXJlYVswXSA9IHBhcnNlSW50KHYudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHYubmFtZSA9PSAnYXJlYV9tYXgnICYmIHYudmFsdWUgIT0gYXJlYU1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMuYXJlYVsxXSA9IHBhcnNlSW50KHYudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHYubmFtZSA9PSAncHJpY2VfbWluJyAmJiB2LnZhbHVlICE9IHByaWNlTWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wcmljZVswXSA9IHBhcnNlSW50KHYudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHYubmFtZSA9PSAncHJpY2VfbWF4JyAmJiB2LnZhbHVlICE9IHByaWNlTWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wcmljZVsxXSA9IHBhcnNlSW50KHYudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHYubmFtZSA9PSAncm9vbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5yb29tcy5wdXNoKHYudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGZpbHRlcnMuYXJlYVswXSA9PSBhcmVhTWluICYmIGZpbHRlcnMuYXJlYVsxXSA9PSBhcmVhTWF4KVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlcnMuYXJlYTtcclxuICAgICAgICAgICAgaWYgKGZpbHRlcnMucHJpY2VbMF0gPT0gcHJpY2VNaW4gJiYgZmlsdGVycy5wcmljZVsxXSA9PSBwcmljZU1heClcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWx0ZXJzLnByaWNlO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVycy5yb29tcy5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWx0ZXJzLnJvb21zO1xyXG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbHRlcnMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGZpbHRlcnMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgJGl0ZW1zLmFkZENsYXNzKCdfZmlsdGVyZWQnKTtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSB0cnVlLCAkX2l0ZW0gPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWx0ZXJzLCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FyZWEnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKCRfaXRlbS5kYXRhKCdmaWx0ZXItYXJlYScpKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoJF9pdGVtLmRhdGEoJ2ZpbHRlci1hcmVhJykpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPCB2WzBdIHx8IGFyZWEgPiB2WzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcmljZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoJF9pdGVtLmRhdGEoJ2ZpbHRlci1wcmljZScpKSAhPT0gJ3VuZGVmaW5lZCcgJiYgJF9pdGVtLmRhdGEoJ2ZpbHRlci1wcmljZScpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJpY2UgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoJF9pdGVtLmRhdGEoJ2ZpbHRlci1wcmljZScpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmljZSA8IHZbMF0gfHwgcHJpY2UgPiB2WzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb29tcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoJF9pdGVtLmRhdGEoJ2ZpbHRlci1yb29tcycpKSA9PT0gJ3VuZGVmaW5lZCcgfHwgdi5pbmRleE9mKCRfaXRlbS5kYXRhKCdmaWx0ZXItcm9vbXMnKS50b1N0cmluZygpKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdfZmlsdGVyZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFwcC5zZXRDaGVzc1RvdGFsKCRpdGVtcy5sZW5ndGggLSAkaXRlbXMuZmlsdGVyKCcuX2ZpbHRlcmVkJykubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5yZW1vdmVDbGFzcygnX2ZpbHRlcmVkJyk7XHJcbiAgICAgICAgICAgICAgICBhcHAuc2V0Q2hlc3NUb3RhbCh0b3RhbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGhhbmRsZSBnZXQgZmlsdGVyc1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0ge30sIGhhc2gsIGhhc2hlcztcclxuICAgICAgICBoYXNoZXMgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkpO1xyXG4gICAgICAgIGlmIChoYXNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGhhc2hlcyA9IGhhc2hlcy5zcGxpdCgnJicpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIGhhc2hlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc2hlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2ggPSBoYXNoZXNbaV0uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhc2hbMV0gIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyc1toYXNoWzBdXSA9IGhhc2hbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZpbHRlcnMpO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVycy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGZpbHRlcnMua29tbmF0bnllKSAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByb29tcyA9IGZpbHRlcnNbJ2tvbW5hdG55ZSddLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJvb21zLCBmdW5jdGlvbiAoaSwgdikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkZm9ybS5maW5kKCdbbmFtZT1cInJvb21zXCJdJykuZmlsdGVyKCdbdmFsdWU9XCInICsgdiArICdcIl0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAkZm9ybS5maW5kKCdbbmFtZT1cInJvb21zXCJdJykuZmlsdGVyKCdbdmFsdWU9XCInICsgZmlsdGVycy5rb21uYXRueWUgKyAnXCJdJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZmlsdGVyc1snYXBwY2hlc3NyZXNpZGVudGlhbHxhcmVhJ10pICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBmaWx0ZXJzWydhcHBjaGVzc3Jlc2lkZW50aWFsfGFyZWEnXS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlckFyZWEubm9VaVNsaWRlci5zZXQoYXJlYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChmaWx0ZXJzWydhcHBjaGVzc3Jlc2lkZW50aWFsfHByaWNlJ10pICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlID0gZmlsdGVyc1snYXBwY2hlc3NyZXNpZGVudGlhbHxwcmljZSddLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyUHJpY2Uubm9VaVNsaWRlci5zZXQocHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnW25hbWU9XCJyb29tc1wiXScpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sXHJcblxyXG4gICAgc2V0Q2hlc3NUb3RhbDogZnVuY3Rpb24gKHRvdGFsKSB7XHJcbiAgICAgICAgdmFyIGVuZGluZ3MgPSBbJ9C60LLQsNGA0YLQuNGA0LAnLCAn0LrQstCw0YDRgtC40YDRiycsICfQutCy0LDRgNGC0LjRgCddO1xyXG4gICAgICAgICQoJy5qcy1jaGVzcy1maWx0ZXJfX3RvdGFsJykudGV4dCh0b3RhbCArICcgJyArIGFwcC5nZXROdW1FbmRpbmcodG90YWwsIGVuZGluZ3MpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQvtC60L7QvdGH0LDQvdC40LUg0LTQu9GPINC80L3QvtC20LXRgdGC0LLQtdC90L3QvtCz0L4g0YfQuNGB0LvQsCDRgdC70L7QstCwINC90LAg0L7RgdC90L7QstCw0L3QuNC4INGH0LjRgdC70LAg0Lgg0LzQsNGB0YHQuNCy0LAg0L7QutC+0L3Rh9Cw0L3QuNC5XHJcbiAgICAgKiBwYXJhbSAgaU51bWJlciBJbnRlZ2VyINCn0LjRgdC70L4g0L3QsCDQvtGB0L3QvtCy0LUg0LrQvtGC0L7RgNC+0LPQviDQvdGD0LbQvdC+INGB0YTQvtGA0LzQuNGA0L7QstCw0YLRjCDQvtC60L7QvdGH0LDQvdC40LVcclxuICAgICAqIHBhcmFtICBhRW5kaW5ncyBBcnJheSDQnNCw0YHRgdC40LIg0YHQu9C+0LIg0LjQu9C4INC+0LrQvtC90YfQsNC90LjQuSDQtNC70Y8g0YfQuNGB0LXQuyAoMSwgNCwgNSksXHJcbiAgICAgKiAgICAgICAgINC90LDQv9GA0LjQvNC10YAgWyfRj9Cx0LvQvtC60L4nLCAn0Y/QsdC70L7QutCwJywgJ9GP0LHQu9C+0LonXVxyXG4gICAgICogcmV0dXJuIFN0cmluZ1xyXG4gICAgICogXHJcbiAgICAgKiBodHRwczovL2hhYnJhaGFici5ydS9wb3N0LzEwNTQyOC9cclxuICAgICAqL1xyXG4gICAgZ2V0TnVtRW5kaW5nOiBmdW5jdGlvbiAoaU51bWJlciwgYUVuZGluZ3MpIHtcclxuICAgICAgICB2YXIgc0VuZGluZywgaTtcclxuICAgICAgICBpTnVtYmVyID0gaU51bWJlciAlIDEwMDtcclxuICAgICAgICBpZiAoaU51bWJlciA+PSAxMSAmJiBpTnVtYmVyIDw9IDE5KSB7XHJcbiAgICAgICAgICAgIHNFbmRpbmcgPSBhRW5kaW5nc1syXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpID0gaU51bWJlciAlIDEwO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgKDEpOlxyXG4gICAgICAgICAgICAgICAgICAgIHNFbmRpbmcgPSBhRW5kaW5nc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDIpOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAoMyk6XHJcbiAgICAgICAgICAgICAgICBjYXNlICg0KTpcclxuICAgICAgICAgICAgICAgICAgICBzRW5kaW5nID0gYUVuZGluZ3NbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHNFbmRpbmcgPSBhRW5kaW5nc1syXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc0VuZGluZztcclxuICAgIH0sXHJcblxyXG59XHJcblxyXG5qUXVlcnkoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGluaXRNYWluU2xpZGVyKCk7XHJcbiAgICAgICAgaW5pdFNtYWxsU2xpZGVycygpO1xyXG4gICAgICAgIGluaXRSZXZpZXdzU2xpZGVyKCk7XHJcbiAgICAgICAgaW5pdEFnZW50c1ByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgIHNldEFnZW50c1ByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgIGluaXRNZW51KCk7XHJcbiAgICAgICAgaW5pdE1hc2soKTtcclxuICAgICAgICBpbml0UG9wdXAoKTtcclxuICAgICAgICBpbml0U2VsZWN0KCk7XHJcbiAgICAgICAgaW5pdFZhbGlkYXRlKCk7XHJcbiAgICAgICAgaW5pdFJlYWx0eUZpbHRlcnMoKTtcclxuICAgICAgICBpbml0UmVhbHR5KCk7XHJcbi8vICAgICAgICBpbml0UGFzc3dvcmQoKTtcclxuICAgICAgICBpbml0RWFzeVBhc3N3b3JkKCk7XHJcbiAgICAgICAgaW5pdEdhbGxlcnkoKTtcclxuICAgICAgICBpbml0SHlwb3RoZWMoKTtcclxuICAgICAgICBpbml0RGF0ZXBpY2tlcigpO1xyXG4gICAgICAgIGluaXRTY3JvbGxiYXIoKTtcclxuICAgICAgICBpbml0U2Nyb2xsKCk7XHJcbiAgICAgICAgaW5pdEFib3V0KCk7XHJcbiAgICAgICAgaW5pdEZpbGVpbnB1dCgpO1xyXG4gICAgICAgIGluaXRBbHBoYWJldCgpO1xyXG4gICAgICAgIGluaXRBbnRpc3BhbSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW5pdFNtYWxsU2xpZGVycygpO1xyXG4vLyAgICAgICAgaW5pdE1lbnUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRNYWluU2xpZGVyKCkge1xyXG4gICAgICAgIHZhciB0aW1lID0gYXBwQ29uZmlnLnNsaWRlckF1dG9wbGF5U3BlZWQgLyAxMDAwO1xyXG4gICAgICAgICQoJy5qcy1zbGlkZXItbWFpbicpLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyICRiYXIgPSAkKHRoaXMpLmZpbmQoJy5qcy1zbGlkZXItbWFpbl9fYmFyJyksXHJcbiAgICAgICAgICAgICAgICAgICAgJHNsaWNrID0gJCh0aGlzKS5maW5kKCcuanMtc2xpZGVyLW1haW5fX3NsaWRlcicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzUGF1c2UgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0aWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRUaW1lO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRzbGljay5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAkc2xpY2suc2xpY2soe1xyXG4gICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgZmFkZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IGFwcENvbmZpZy5zbGlkZXJGYWRlU3BlZWRcclxuICAgIC8vICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogYXBwQ29uZmlnLnNsaWRlckF1dG9wbGF5U3BlZWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkc2xpY2sub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNsaWRlIDwgbmV4dFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChzbGljay4kc2xpZGVzW2N1cnJlbnRTbGlkZV0pLmFkZENsYXNzKCdfZmFkZSBfbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoc2xpY2suJHNsaWRlc1tuZXh0U2xpZGVdKS5hZGRDbGFzcygnX2ZhZGUgX3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoc2xpY2suJHNsaWRlc1tjdXJyZW50U2xpZGVdKS5hZGRDbGFzcygnX2ZhZGUgX3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChzbGljay4kc2xpZGVzW25leHRTbGlkZV0pLmFkZENsYXNzKCdfZmFkZSBfbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpY2spO1xyXG4gICAgICAgICAgICAgICAgJGJhci5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCArICclJ1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRzbGljay5vbignYWZ0ZXJDaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQsIHNsaWNrLCBjdXJyZW50U2xpZGUpIHtcclxuICAgICAgICAgICAgICAgICQoc2xpY2suJHNsaWRlc1tjdXJyZW50U2xpZGVdKS5yZW1vdmVDbGFzcygnX2ZhZGUgX2xlZnQgX3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICBzdGFydFByb2dyZXNzYmFyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJHNsaWNrLm9uKHtcclxuICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1BhdXNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNQYXVzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnRQcm9ncmVzc2JhcigpIHtcclxuLy8gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRQcm9ncmVzc2JhcigpO1xyXG4gICAgICAgICAgICAgICAgcGVyY2VudFRpbWUgPSAwO1xyXG4gICAgLy8gICAgICAgICAgICBpc1BhdXNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aWNrID0gc2V0SW50ZXJ2YWwoaW50ZXJ2YWwsIDEwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW50ZXJ2YWwoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNQYXVzZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50VGltZSArPSAxIC8gKHRpbWUgKyAwLjEpO1xyXG4gICAgICAgICAgICAgICAgICAgICRiYXIuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHBlcmNlbnRUaW1lICsgXCIlXCJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudFRpbWUgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzbGljay5zbGljaygnc2xpY2tOZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0UHJvZ3Jlc3NiYXIoKSB7XHJcbiAgICAgICAgICAgICAgICAkYmFyLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAgKyAnJSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGFydFByb2dyZXNzYmFyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFNtYWxsU2xpZGVycygpIHtcclxuICAgICAgICBpZiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA8IGFwcENvbmZpZy5icmVha3BvaW50Lm1kKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zbGlkZXItc21hbGw6bm90KC5zbGljay1pbml0aWFsaXplZCknKS5zbGljayh7XHJcbiAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzE1cHgnLFxyXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmpzLXNsaWRlci1zbWFsbC5zbGljay1pbml0aWFsaXplZCcpLnNsaWNrKCd1bnNsaWNrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkKHdpbmRvdykub3V0ZXJXaWR0aCgpIDwgYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQpIHtcclxuICAgICAgICAgICAgJCgnLmpzLWFnZW50cy1zbGlkZXIgLmFnZW50cy1zbGlkZXJfX2l0ZW0nKS5vZmYoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICQoJy5qcy1hZ2VudHMtc2xpZGVyOm5vdCguc2xpY2staW5pdGlhbGl6ZWQpJykuc2xpY2soe1xyXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnMjUlJyxcclxuLy8gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzgwcHgnLFxyXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJy5qcy1hZ2VudHMtc2xpZGVyJykub24oJ2FmdGVyQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50LCBzbGljaywgY3VycmVudFNsaWRlKSB7XHJcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNsaWNrKTtcclxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLl9hY3RpdmUnKS5yZW1vdmVDbGFzcygnX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgJChzbGljay4kc2xpZGVzW2N1cnJlbnRTbGlkZV0pLmFkZENsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBzZXRBZ2VudHNQcmVzZW50YXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmpzLWFnZW50cy1zbGlkZXIuc2xpY2staW5pdGlhbGl6ZWQnKS5zbGljaygndW5zbGljaycpO1xyXG4gICAgICAgICAgICBpbml0QWdlbnRzUHJlc2VudGF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRBZ2VudHNQcmVzZW50YXRpb24oKSB7XHJcbiAgICAgICAgaWYgKCQod2luZG93KS5vdXRlcldpZHRoKCkgPj0gYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQpIHtcclxuICAgICAgICAgICAgJCgnLmpzLWFnZW50cy1zbGlkZXIgLmFnZW50cy1zbGlkZXJfX2l0ZW0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJy5fYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIHNldEFnZW50c1ByZXNlbnRhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0QWdlbnRzUHJlc2VudGF0aW9uKCkge1xyXG4gICAgICAgIGlmICgkKCcuanMtYWdlbnRzLXNsaWRlcicpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgJGFnZW50ID0gJCgnLmpzLWFnZW50cy1zbGlkZXIgLl9hY3RpdmUgLmpzLWFnZW50cy1zbGlkZXJfX3Nob3J0Jyk7XHJcbiAgICAgICAgICAgIHZhciAkZnVsbCA9ICQoJy5qcy1hZ2VudHMtc2xpZGVyX19mdWxsJyk7XHJcbiAgICAgICAgICAgICRmdWxsLmZpbmQoJy5qcy1hZ2VudHMtc2xpZGVyX19mdWxsX19pbWcnKS5hdHRyKCdzcmMnLCAkYWdlbnQuZGF0YSgnYWdlbnQtaW1nJykpO1xyXG4gICAgICAgICAgICAkZnVsbC5maW5kKCcuanMtYWdlbnRzLXNsaWRlcl9fZnVsbF9fbmFtZScpLnRleHQoJGFnZW50LmRhdGEoJ2FnZW50LW5hbWUnKSk7XHJcbiAgICAgICAgICAgIHZhciBwaG9uZSA9ICRhZ2VudC5kYXRhKCdhZ2VudC1waG9uZScpO1xyXG4gICAgICAgICAgICAkZnVsbC5maW5kKCcuanMtYWdlbnRzLXNsaWRlcl9fZnVsbF9fcGhvbmUgYScpLnRleHQocGhvbmUpLmF0dHIoJ2hyZWYnLCAndGVsOicgKyBwaG9uZS5yZXBsYWNlKC9bLVxccygpXS9nLCAnJykpO1xyXG4gICAgICAgICAgICB2YXIgbWFpbCA9ICRhZ2VudC5kYXRhKCdhZ2VudC1tYWlsJyk7XHJcbiAgICAgICAgICAgICRmdWxsLmZpbmQoJy5qcy1hZ2VudHMtc2xpZGVyX19mdWxsX19tYWlsIGEnKS50ZXh0KG1haWwpLmF0dHIoJ2hyZWYnLCAnbWFpbHRvOicgKyBtYWlsKTtcclxuICAgICAgICAgICAgdmFyIHVybCA9ICRhZ2VudC5kYXRhKCdhZ2VudC11cmwnKTtcclxuICAgICAgICAgICAgJGZ1bGwuZmluZCgnLmpzLWFnZW50cy1zbGlkZXJfX2Z1bGxfX3VybCBhJykuYXR0cignaHJlZicsIHVybCk7XHJcbiAgICAgICAgICAgICQoJy5qcy1hZ2VudHMtc2xpZGVyX191cmwnKS5hdHRyKCdocmVmJywgdXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdE1lbnUoKSB7XHJcbiAgICAgICAgJCgnLmpzLW1lbnUtdG9nZ2xlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGhyZWYgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgJCgnLmpzLW1lbnUtdG9nZ2xlcltocmVmPVwiJyArIGhyZWYgKyAnXCJdJykudG9nZ2xlQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICAgICAgJChocmVmKS50b2dnbGVDbGFzcygnX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAkKCcuanMtbWVudS5fYWN0aXZlJykubGVuZ3RoID09IDAgPyAkKCcuanMtbWVudS1vdmVybGF5JykuaGlkZSgpIDogJCgnLmpzLW1lbnUtb3ZlcmxheScpLnNob3coKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuanMtbWVudS1vdmVybGF5Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgJCgnLmpzLW1lbnUtdG9nZ2xlciwgLmpzLW1lbnUnKS5yZW1vdmVDbGFzcygnX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLmhpZGUoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tZW51LXNlY29uZC10b2dnbGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICQoJy5qcy1tZW51LXNlY29uZCcpLnRvZ2dsZUNsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdE1hc2soKSB7XHJcbiAgICAgICAgJCgnLmpzLW1hc2tfX3RlbCcpLmlucHV0bWFzayh7XHJcbiAgICAgICAgICAgIG1hc2s6ICcrOSAoOTk5KSA5OTktOTktOTknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgICAgICAnbnVtZXJpYyc6IHtcclxuICAgICAgICAgICAgICAgIGF1dG9Vbm1hc2s6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzaG93TWFza09uSG92ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmFkaXhQb2ludDogXCIsXCIsXHJcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCIgXCIsXHJcbiAgICAgICAgICAgICAgICBkaWdpdHM6IDAsXHJcbiAgICAgICAgICAgICAgICBhbGxvd01pbnVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGF1dG9Hcm91cDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJpZ2h0QWxpZ246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tYXNrX19udW1lcmljJykuaW5wdXRtYXNrKFwibnVtZXJpY1wiKTtcclxuICAgICAgICAkKCcuanMtbWFza19fY3VycmVuY3knKS5pbnB1dG1hc2soXCJudW1lcmljXCIsIHtcclxuICAgICAgICAgICAgc3VmZml4OiAnwqDRgNGD0LEuJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tYXNrX19zcXVhcmUnKS5pbnB1dG1hc2soXCJudW1lcmljXCIsIHtcclxuICAgICAgICAgICAgc3VmZml4OiAnwqDQvMKyJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tYXNrX19zcXVhcmVfZmlsdGVyJykuaW5wdXRtYXNrKFwibnVtZXJpY1wiLCB7XHJcbiAgICAgICAgICAgIHN1ZmZpeDogJ8Kg0LzCsicsXHJcbiAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tYXNrX19jdXJyZW5jeV9maWx0ZXInKS5pbnB1dG1hc2soXCJudW1lcmljXCIsIHtcclxuICAgICAgICAgICAgc3VmZml4OiAnwqDRgNGD0LEuJyxcclxuICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLW1hc2tfX2FnZScpLmlucHV0bWFzayhcIm51bWVyaWNcIiwge1xyXG4gICAgICAgICAgICBzdWZmaXg6ICfCoNC70LXRgidcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuanMtbWFza19fcGVyY2VudCcpLmlucHV0bWFzayhcIm51bWVyaWNcIiwge1xyXG4gICAgICAgICAgICBzdWZmaXg6ICclJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1tYXNrX19jdXJyZW5jeSwgLmpzLW1hc2tfX3NxdWFyZSwgLmpzLW1hc2tfX3BlcmNlbnQnKS5vbignYmx1cicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gbmVlZCBmb3IgcmVtb3ZlIHN1ZmZpeFxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFzay9pc3N1ZXMvMTU1MVxyXG4gICAgICAgICAgICB2YXIgdiA9ICQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgIGlmICh2ID09IDAgfHwgdiA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS52YWwoJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFBvcHVwKCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdfcG9wdXAnLFxyXG4gICAgICAgICAgICBhdXRvRm9jdXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBidG5UcGw6IHtcclxuICAgICAgICAgICAgICAgIHNtYWxsQnRuOiAnPHNwYW4gZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWNsb3NlLXNtYWxsXCI+PHNwYW4gY2xhc3M9XCJsaW5rXCI+0JfQsNC60YDRi9GC0Yw8L3NwYW4+PC9zcGFuPicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvdWNoOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgICQoJy5qcy1wb3B1cCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJC5mYW5jeWJveC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoJyMnICsgJCh0aGlzKS5hdHRyKCdocmVmJykuc3Vic3RyKDEpKTtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoKTtcclxuICAgICAgICAgICAgaWYgKCR0YXJnZXQubGVuZ3RoICYmIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkdGFyZ2V0LmZpbmQoJ1tuYW1lPVwiJyArIGsgKyAnXCJdJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChkYXRhW2tdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5mYW5jeWJveChvcHRpb25zKTtcclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcclxuICAgICAgICAgICAgdmFyICRjbnQgPSAkKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcclxuICAgICAgICAgICAgaWYgKCRjbnQubGVuZ3RoICYmICRjbnQuaGFzQ2xhc3MoJ3BvcHVwLWNudCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94Lm9wZW4oJGNudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFNlbGVjdCgpIHtcclxuICAgICAgICAvLyBzZWxlY3QyXHJcbiAgICAgICAgJC5mbi5zZWxlY3QyLmRlZmF1bHRzLnNldChcInRoZW1lXCIsIFwiY3VzdG9tXCIpO1xyXG4gICAgICAgICQuZm4uc2VsZWN0Mi5kZWZhdWx0cy5zZXQoXCJtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaFwiLCBJbmZpbml0eSk7XHJcbiAgICAgICAgJCgnLmpzLXNlbGVjdDInKS5zZWxlY3QyKCk7XHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zZWxlY3QyJykuc2VsZWN0MigpO1xyXG4gICAgICAgIH0pO1xyXG4vLyAgICAgICAgJCgnLmpzLXNlbGVjdDInKS5zZWxlY3QyKCdvcGVuJyk7XHJcbiAgICAgICAgJChcIi5qcy1hZ2VudC1zZWFyY2hcIikuc2VsZWN0Mih7XHJcbiAgICAgICAgICAgIHRoZW1lOiAnYWdlbnRzJyxcclxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0VG9vU2hvcnQ6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1IFwiICsgKGEubWluaW11bSAtIGEuaW5wdXQubGVuZ3RoKSArIFwiINC40LvQuCDQsdC+0LvRjNGI0LUg0YHQuNC80LLQvtC70L7QslwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhamF4OiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hcGkubXlqc29uLmNvbS9iaW5zL29reXZpXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgZGVsYXk6IDI1MCxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxOiBwYXJhbXMudGVybSwgLy8gc2VhcmNoIHRlcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnYWdlbnRfc2VhcmNoJ1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdHM6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9ICQubWFwKGRhdGEsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDoga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdmFsdWUucGFnZXRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbnQ6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FjaGU6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZvcm1hdFJlc3VsdCxcclxuICAgICAgICAgICAgdGVtcGxhdGVTZWxlY3Rpb246IGZvcm1hdFNlbGVjdGlvbixcclxuICAgICAgICAgICAgZXNjYXBlTWFya3VwOiBmdW5jdGlvbiAobWFya3VwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya3VwO1xyXG4gICAgICAgICAgICB9LCAvLyBsZXQgb3VyIGN1c3RvbSBmb3JtYXR0ZXIgd29ya1xyXG4gICAgICAgICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDMsXHJcbiAgICAgICAgICAgIG1heGltdW1TZWxlY3Rpb25MZW5ndGg6IDEsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybWF0UmVzdWx0KGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ubG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICfQv9C+0LjRgdC64oCmJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdC1hZ2VudFwiPjxzdHJvbmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZ2VudC5wYWdldGl0bGUgKyAnPC9zdHJvbmc+PGJyPicgKyBpdGVtLmFnZW50LnZhbHVlICsgJzwvZGl2Pic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm1hdFNlbGVjdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmFnZW50LnBhZ2V0aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnLmpzLWFnZW50LXNlYXJjaCcpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gZS5wYXJhbXMuZGF0YTtcclxuLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gZGF0YS5hZ2VudC51cmlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFZhbGlkYXRlKCkge1xyXG4gICAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcInBob25lXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25hbChlbGVtZW50KSB8fCAvXlxcK1xcZFxcc1xcKFxcZHszfVxcKVxcc1xcZHszfS1cXGR7Mn0tXFxkezJ9JC8udGVzdCh2YWx1ZSk7XHJcbiAgICAgICAgfSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIG1vYmlsZSBudW1iZXJcIik7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGVycm9yUGxhY2VtZW50OiBmdW5jdGlvbiAoZXJyb3IsIGVsZW1lbnQpIHt9LFxyXG4gICAgICAgICAgICBydWxlczoge1xyXG4gICAgICAgICAgICAgICAgcGhvbmU6IFwicGhvbmVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkKCcuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS52YWxpZGF0ZShvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0UmVhbHR5RmlsdGVycygpIHtcclxuICAgICAgICAkKCcuanMtZmlsdGVycy1yZWFsdHktdHlwZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnLmpzLWZpbHRlcnMtcmVhbHR5LXRpdGxlJykudGV4dCgkKHRoaXMpLmRhdGEoJ2ZpbHRlcnMtdGl0bGUnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFBhc3N3b3JkKCkge1xyXG4gICAgICAgIGlmICgkKCcuanMtcGFzc3dvcmQnKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZHJvcGJveC96eGN2Ym5cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFwiLi9qcy9saWJzL3p4Y3Zibi5qc1wiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJzY3JpcHRcIixcclxuICAgICAgICAgICAgY2FjaGU6IHRydWVcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHNjcmlwdCwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoanF4aHIsIHNldHRpbmdzLCBleGNlcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgbG9hZGluZyB6eGN2Ym4nKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICAkKCcuanMtcGFzc3dvcmQnKS5vbigna2V5dXAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh6eGN2Ym4pID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSAkKHRoaXMpLnZhbCgpLnRyaW0oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0genhjdmJuKHZhbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNudCA9ICQodGhpcykuc2libGluZ3MoJy5pbnB1dC1oZWxwJyk7XHJcbiAgICAgICAgICAgICAgICBjbnQucmVtb3ZlQ2xhc3MoJ18wIF8xIF8yIF8zIF80Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNudC5hZGRDbGFzcygnXycgKyByZXMuc2NvcmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMuc2NvcmUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCgnLmpzLXBhc3N3b3JkJykua2V5dXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C70L7RhdC+0Lk6IDgg0LfQvdCw0LrQvtCyLCDQvtGB0YLQsNC70YzQvdGL0YUg0L/RgNC+0LLQtdGA0L7QuiDQvdC10YJcclxuICAgICDQodGA0LXQtNC90LjQuTogMTAg0LfQvdCw0LrQvtCyLCDQvNC40L0g0L7QtNC90LAg0LHRg9C60LLQsCwg0LzQuNC9INC+0LTQvdCwINC+0LTQvdCwINGG0LjRhNGA0LBcclxuICAgICDQpdC+0YDQvtGI0LjQuTogMTIg0LfQvdCw0LrQvtCyLCDQv9C70Y7RgSDQv9GA0L7QstC10YDQutCwINC90LAg0YHQv9C10YbQt9C90LDQuiDQuCDQt9Cw0LPQu9Cw0LLQvdGD0Y5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5pdEVhc3lQYXNzd29yZCgpIHtcclxuICAgICAgICB2YXIgc3BlY2lhbHMgPSAvWyFAIyQlXiZ+XS87XHJcbiAgICAgICAgJCgnLmpzLXBhc3N3b3JkJykub24oJ2tleXVwJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gJCh0aGlzKS52YWwoKS50cmltKCksXHJcbiAgICAgICAgICAgICAgICAgICAgY250ID0gJCh0aGlzKS5zaWJsaW5ncygnLmlucHV0LWhlbHAnKSxcclxuICAgICAgICAgICAgICAgICAgICBzY29yZSA9IDA7XHJcbiAgICAgICAgICAgIGNudC5yZW1vdmVDbGFzcygnXzAgXzEgXzIgXzMnKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwubGVuZ3RoID49IGFwcENvbmZpZy5taW5QYXNzd29yZExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsLmxlbmd0aCA+PSAxMCAmJiB2YWwuc2VhcmNoKC9cXGQvKSAhPT0gLTEgJiYgdmFsLnNlYXJjaCgvXFxELykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5sZW5ndGggPj0gMTIgJiYgdmFsLnNlYXJjaCgvW0EtWl0vKSAhPT0gLTEgJiYgdmFsLnNlYXJjaChzcGVjaWFscykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZSA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbnQuYWRkQ2xhc3MoJ18nICsgc2NvcmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLXBhc3N3b3JkJykua2V5dXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0UmV2aWV3c1NsaWRlcigpIHtcclxuICAgICAgICB2YXIgJHNsaWRlciA9ICQoJy5qcy1zbGlkZXItcmV2aWV3cycpO1xyXG4gICAgICAgICRzbGlkZXIuc2xpY2soe1xyXG4gICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICBmb2N1c09uU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcclxuICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cyBfYmlnJyxcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IGFwcENvbmZpZy5icmVha3BvaW50LmxnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciAkYmlnID0gJCgnLnJldmlld3NfX2xpc3QuX2JpZyAucmV2aWV3c19fbGlzdF9faXRlbScpO1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gMDtcclxuICAgICAgICBpZiAoJGJpZy5sZW5ndGggJiYgJHNsaWRlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgc2V0QmlnKCk7XHJcbiAgICAgICAgICAgICRzbGlkZXJcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2xpZGUgIT0gbmV4dFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckJpZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50U2xpZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2FmdGVyQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50LCBzbGljaywgY3VycmVudFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2xpZGUgIT0gY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QmlnKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2xlYXJCaWcoKSB7XHJcbiAgICAgICAgICAgICRiaWcuZmFkZU91dCgpLmVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEJpZygpIHtcclxuICAgICAgICAgICAgJCgnLmpzLXNsaWRlci1yZXZpZXdzIC5zbGljay1jdXJyZW50IC5yZXZpZXdzX19saXN0X19pdGVtX19pbm5lcicpLmNsb25lKCkuYXBwZW5kVG8oJGJpZyk7XHJcbiAgICAgICAgICAgICRiaWcuZmFkZUluKCk7XHJcbiAgICAgICAgICAgICRiaWcucGFyZW50KCkuY3NzKCdoZWlnaHQnLCAkYmlnLm91dGVySGVpZ2h0KHRydWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdFJlYWx0eSgpIHtcclxuICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3Bkb3BhZ2VfbG9hZCcsIGZ1bmN0aW9uIChlLCBjb25maWcsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKGRvY3VtZW50KS5vbignbXNlMl9sb2FkJywgZnVuY3Rpb24gKGUsIGRhdGEpIHtcclxuICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1yZWFsdHktbGlzdC1zbGlkZXJbZGF0YS1pbml0PVwiZmFsc2VcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkdG9nZ2xlcnMgPSAkKHRoaXMpLmZpbmQoJy5qcy1yZWFsdHktbGlzdC1zbGlkZXJfX2ltZy13cmFwcGVyJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGNvdW50ZXIgPSAkKHRoaXMpLmZpbmQoJy5qcy1yZWFsdHktbGlzdC1zbGlkZXJfX2NvdW50ZXInKTtcclxuICAgICAgICAgICAgICAgICR0b2dnbGVycy5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdG9nZ2xlcnMucmVtb3ZlQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY291bnRlci50ZXh0KGkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdpbml0JywgJ3RydWUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRHYWxsZXJ5KCkge1xyXG4gICAgICAgICQoJy5qcy1nYWxsZXJ5LW5hdicpLnNsaWNrKHtcclxuICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgIGFycm93czogdHJ1ZSxcclxuICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDYsXHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICBmb2N1c09uU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBhc05hdkZvcjogJy5qcy1nYWxsZXJ5X19zbGlkZXInLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1nYWxsZXJ5JykuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuICAgICAgICAgICAgdmFyICRzbGlkZXIgPSAkKGVsKS5maW5kKCcuanMtZ2FsbGVyeV9fc2xpZGVyJyk7XHJcbiAgICAgICAgICAgIHZhciAkY3VycmVudCA9ICQoZWwpLmZpbmQoJy5qcy1nYWxsZXJ5X19jdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICRzbGlkZXIuc2xpY2soe1xyXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiAnLmpzLWdhbGxlcnktbmF2JyxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IGFwcENvbmZpZy5icmVha3BvaW50Lm1kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRzbGlkZXIub24oJ2FmdGVyQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50LCBzbGljaywgY3VycmVudFNsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudC50ZXh0KCsrY3VycmVudFNsaWRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciAkbGlua3MgPSAkc2xpZGVyLmZpbmQoJy5zbGlkZTpub3QoLnNsaWNrLWNsb25lZCknKTtcclxuICAgICAgICAgICAgJChlbCkuZmluZCgnLmpzLWdhbGxlcnlfX3RvdGFsJykudGV4dCgkbGlua3MubGVuZ3RoKTtcclxuICAgICAgICAgICAgJGxpbmtzLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3gub3BlbigkbGlua3MsIHtcclxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LCAkbGlua3MuaW5kZXgodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQpNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQvtC60L7QvdGH0LDQvdC40LUg0LTQu9GPINC80L3QvtC20LXRgdGC0LLQtdC90L3QvtCz0L4g0YfQuNGB0LvQsCDRgdC70L7QstCwINC90LAg0L7RgdC90L7QstCw0L3QuNC4INGH0LjRgdC70LAg0Lgg0LzQsNGB0YHQuNCy0LAg0L7QutC+0L3Rh9Cw0L3QuNC5XHJcbiAgICAgKiBwYXJhbSAgaU51bWJlciBJbnRlZ2VyINCn0LjRgdC70L4g0L3QsCDQvtGB0L3QvtCy0LUg0LrQvtGC0L7RgNC+0LPQviDQvdGD0LbQvdC+INGB0YTQvtGA0LzQuNGA0L7QstCw0YLRjCDQvtC60L7QvdGH0LDQvdC40LVcclxuICAgICAqIHBhcmFtICBhRW5kaW5ncyBBcnJheSDQnNCw0YHRgdC40LIg0YHQu9C+0LIg0LjQu9C4INC+0LrQvtC90YfQsNC90LjQuSDQtNC70Y8g0YfQuNGB0LXQuyAoMSwgNCwgNSksXHJcbiAgICAgKiAgICAgICAgINC90LDQv9GA0LjQvNC10YAgWyfRj9Cx0LvQvtC60L4nLCAn0Y/QsdC70L7QutCwJywgJ9GP0LHQu9C+0LonXVxyXG4gICAgICogcmV0dXJuIFN0cmluZ1xyXG4gICAgICogXHJcbiAgICAgKiBodHRwczovL2hhYnJhaGFici5ydS9wb3N0LzEwNTQyOC9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0TnVtRW5kaW5nKGlOdW1iZXIsIGFFbmRpbmdzKSB7XHJcbiAgICAgICAgdmFyIHNFbmRpbmcsIGk7XHJcbiAgICAgICAgaU51bWJlciA9IGlOdW1iZXIgJSAxMDA7XHJcbiAgICAgICAgaWYgKGlOdW1iZXIgPj0gMTEgJiYgaU51bWJlciA8PSAxOSkge1xyXG4gICAgICAgICAgICBzRW5kaW5nID0gYUVuZGluZ3NbMl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaSA9IGlOdW1iZXIgJSAxMDtcclxuICAgICAgICAgICAgc3dpdGNoIChpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICgxKTpcclxuICAgICAgICAgICAgICAgICAgICBzRW5kaW5nID0gYUVuZGluZ3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICgyKTpcclxuICAgICAgICAgICAgICAgIGNhc2UgKDMpOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAoNCk6XHJcbiAgICAgICAgICAgICAgICAgICAgc0VuZGluZyA9IGFFbmRpbmdzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBzRW5kaW5nID0gYUVuZGluZ3NbMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNFbmRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdEh5cG90aGVjKCkge1xyXG4gICAgICAgIHZhciBzdHlsZSA9IFtdO1xyXG4gICAgICAgICQoJy5qcy1oeXBvdGhlYycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJGNvc3QgPSAkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fY29zdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvc3QgPSAkY29zdC52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAkcGF5bWVudFBlcmNlbnQgPSAkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fcGF5bWVudC1wZXJjZW50JyksXHJcbiAgICAgICAgICAgICAgICAgICAgJHBheW1lbnRTdW0gPSAkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fcGF5bWVudC1zdW0nKSxcclxuICAgICAgICAgICAgICAgICAgICAkcGF5bWVudFN1bVBpY2tlciA9ICQodGhpcykuZmluZCgnLmpzLXBpY2tlcl9fdGFyZ2V0JylbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgJGFnZSA9ICQodGhpcykuZmluZCgnLmpzLWh5cG90aGVjX19hZ2UnKSxcclxuICAgICAgICAgICAgICAgICAgICAkY3JlZGl0ID0gJCh0aGlzKS5maW5kKCcuanMtaHlwb3RoZWNfX2NyZWRpdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICRzbGlkZXIgPSAkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fc2xpZGVyJyksXHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW1zID0gJCh0aGlzKS5maW5kKCcuanMtaHlwb3RoZWNfX2l0ZW0nKSxcclxuICAgICAgICAgICAgICAgICAgICAkc2Nyb2xsID0gJCh0aGlzKS5maW5kKCcuanMtaHlwb3RoZWNfX3Njcm9sbCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICR0b3RhbCA9ICQodGhpcykuZmluZCgnLmpzLWh5cG90aGVjX19zaG93LXRhcmdldCcpO1xyXG4gICAgICAgICAgICB2YXIgcmF0ZSA9IFtdO1xyXG4gICAgICAgICAgICAkaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByYXRlLnB1c2gocGFyc2VGbG9hdCgkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fcmF0ZScpLnRleHQoKS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpIHx8IDApO1xyXG4gICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhyYXRlKTtcclxuICAgICAgICAgICAgdmFyIHJhdGVNRSA9IFtdO1xyXG4gICAgICAgICAgICAkaXRlbXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByYXRlTUUucHVzaChwYXJzZUZsb2F0KCQodGhpcykuZmluZCgnLmpzLWh5cG90aGVjX19yYXRlTUUnKS50ZXh0KCkucmVwbGFjZShcIixcIiwgXCIuXCIpKSB8fCAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgY29uc29sZS5sb2cocmF0ZU1FKTtcclxuICAgICAgICAgICAgdmFyIGNyZWRpdCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBhZ2UgPSAkYWdlLnZhbCgpO1xyXG4gICAgICAgICAgICB2YXIgcGVyY2VudDtcclxuICAgICAgICAgICAgJGNvc3QuaW5wdXRtYXNrKFwibnVtZXJpY1wiLCB7XHJcbiAgICAgICAgICAgICAgICBzdWZmaXg6ICfCoNGA0YPQsS4nLFxyXG4gICAgICAgICAgICAgICAgb25jb21wbGV0ZTogcmVjYWxjUGF5bWVudHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRjb3N0Lm9uKFwiY2hhbmdlXCIsIHJlY2FsY1BheW1lbnRzKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVjYWxjUGF5bWVudHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb3N0ID0gJCh0aGlzKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICRwYXltZW50U3VtLnByb3AoJ21heCcsIGNvc3QpO1xyXG4gICAgICAgICAgICAgICAgJHBheW1lbnRTdW1QaWNrZXIubm9VaVNsaWRlci51cGRhdGVPcHRpb25zKHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluJzogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ21heCc6IGNvc3RcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICRwYXltZW50U3VtUGlja2VyLm5vVWlTbGlkZXIuc2V0KGNvc3QgLyAyKTtcclxuICAgICAgICAgICAgICAgICRwYXltZW50U3VtLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgJHBheW1lbnRTdW0ub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAkKHRoaXMpLnZhbCgpICogMTAwIC8gY29zdDtcclxuICAgICAgICAgICAgICAgIGlmIChwZXJjZW50ID4gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnZhbChjb3N0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNyZWRpdCA9IGNhbGNDcmVkaXQoY29zdCwgcGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAkcGF5bWVudFBlcmNlbnQudmFsKHBlcmNlbnQpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgJGNyZWRpdC52YWwoY3JlZGl0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWwpLmZpbmQoJy5qcy1oeXBvdGhlY19fZmlyc3QnKS50ZXh0KGZvcm1hdFByaWNlKCRwYXltZW50U3VtLnZhbCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlbCkuZmluZCgnLmpzLWh5cG90aGVjX19wZXJtb250aCcpLnRleHQoZm9ybWF0UHJpY2UoY2FsY1Blck1vbnRoKGNyZWRpdCwgcmF0ZVtpXSwgYWdlKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWwpLmZpbmQoJy5qcy1oeXBvdGhlY19fcGVybW9udGhNRScpLnRleHQoZm9ybWF0UHJpY2UoY2FsY1Blck1vbnRoKGNyZWRpdCwgcmF0ZU1FW2ldLCBhZ2UpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlbCkuZmluZCgnLmpzLWh5cG90aGVjX19lY29ub215JykudGV4dChmb3JtYXRQcmljZShjYWxjUGVyTW9udGgoY3JlZGl0LCByYXRlW2ldLCBhZ2UpICogMTIgKiBhZ2UgLSBjYWxjUGVyTW9udGgoY3JlZGl0LCByYXRlTUVbaV0sIGFnZSkgKiAxMiAqIGFnZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkcGF5bWVudFN1bS5pbnB1dG1hc2soXCJudW1lcmljXCIsIHtcclxuICAgICAgICAgICAgICAgIHN1ZmZpeDogJ8Kg0YDRg9CxLicsXHJcbiAgICAgICAgICAgICAgICBvbmNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCcuanMtcGlja2VyJykuZmluZCgnLmpzLXBpY2tlcl9fdGFyZ2V0JylbMF0ubm9VaVNsaWRlci5zZXQoJCh0aGlzKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkcGF5bWVudFN1bS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgJGFnZS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWdlID0gJGFnZS52YWwoKTtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWwpLmZpbmQoJy5qcy1oeXBvdGhlY19fcGVybW9udGgnKS50ZXh0KGZvcm1hdFByaWNlKGNhbGNQZXJNb250aChjcmVkaXQsIHJhdGVbaV0sIGFnZSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAkKGVsKS5maW5kKCcuanMtaHlwb3RoZWNfX3Blcm1vbnRoTUUnKS50ZXh0KGZvcm1hdFByaWNlKGNhbGNQZXJNb250aChjcmVkaXQsIHJhdGVNRVtpXSwgYWdlKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoZWwpLmZpbmQoJy5qcy1oeXBvdGhlY19fZWNvbm9teScpLnRleHQoZm9ybWF0UHJpY2UoY2FsY1Blck1vbnRoKGNyZWRpdCwgcmF0ZVtpXSwgYWdlKSAqIDEyICogYWdlIC0gY2FsY1Blck1vbnRoKGNyZWRpdCwgcmF0ZU1FW2ldLCBhZ2UpICogMTIgKiBhZ2UpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJHNjcm9sbC5maW5kKCcuaHlwb3RoZWNfX2xpc3RfX2l0ZW0nKS5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5oeXBvdGhlY19fbGlzdF9faXRlbV9faW5uZXInKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0dvVG8nLCBpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gZmlsdGVycywg0LrQsNC20LTRi9C5INGB0LXQu9C10LrRgiDRhNC40LvRjNGC0YDRg9C10YIg0L7RgtC00LXQu9GM0L3QvlxyXG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5qcy1oeXBvdGhlY19fZmlsdGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZk5hbWUgPSAkKHRoaXMpLmRhdGEoJ2h5cG90aGVjLWZpbHRlcicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSAnZmlsdGVyLScgKyBmTmFtZTtcclxuICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goJy4nICsgY2xhc3NOYW1lICsgJ3tkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0nKTtcclxuICAgICAgICAgICAgICAgIC8vINC/0YHQtdCy0LTQvtGB0LXQu9C10LrRgtGLXHJcbiAgICAgICAgICAgICAgICB2YXIgJGNoZWNrYm94ZXMgPSAkKHRoaXMpLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJyk7XHJcbiAgICAgICAgICAgICAgICAkY2hlY2tib3hlcy5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkY2hlY2tlZCA9ICRjaGVja2JveGVzLmZpbHRlcignOmNoZWNrZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJGNoZWNrZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY2hlY2tlZC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYucHVzaCgnOm5vdChbZGF0YS1maWx0ZXItJyArICQodGhpcykudmFsKCkgKyAnXSknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtcy5maWx0ZXIoJy5qcy1oeXBvdGhlY19faXRlbScgKyBmLmpvaW4oJycpKS5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzZXRUb3RhbCgkdG90YWwsICRpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vINC40L3Qv9GD0YLRi1xyXG4gICAgICAgICAgICAkcGF5bWVudFBlcmNlbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpKSwgY2xhc3NOYW1lID0gJ2ZpbHRlci1maXJzdCc7XHJcbiAgICAgICAgICAgICAgICAkaXRlbXMuZmlsdGVyKCdbZGF0YS1maWx0ZXItZmlyc3RdJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KCQodGhpcykuZGF0YSgnZmlsdGVyLWZpcnN0JykpID4gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAkY3JlZGl0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcGFyc2VJbnQoJCh0aGlzKS52YWwoKSksIGNsYXNzTmFtZSA9ICdmaWx0ZXItbWluJztcclxuICAgICAgICAgICAgICAgICRpdGVtcy5maWx0ZXIoJ1tkYXRhLWZpbHRlci1taW5dJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KCQodGhpcykuZGF0YSgnZmlsdGVyLW1pbicpKSA+IHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2V0VG90YWwoJHRvdGFsLCAkaXRlbXMpO1xyXG4gICAgICAgICAgICB9KS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgc3R5bGUucHVzaCgnLmZpbHRlci1taW55ZWFye2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fScpO1xyXG4gICAgICAgICAgICBzdHlsZS5wdXNoKCcuZmlsdGVyLW1heHllYXJ7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9Jyk7XHJcbiAgICAgICAgICAgICRhZ2Uub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5maWx0ZXIoJ1tkYXRhLWZpbHRlci1taW55ZWFyXScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCgkKHRoaXMpLmRhdGEoJ2ZpbHRlci1taW55ZWFyJykpID4gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2ZpbHRlci1taW55ZWFyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZmlsdGVyLW1pbnllYXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICRpdGVtcy5maWx0ZXIoJ1tkYXRhLWZpbHRlci1tYXh5ZWFyXScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCgkKHRoaXMpLmRhdGEoJ2ZpbHRlci1tYXh5ZWFyJykpIDwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2ZpbHRlci1tYXh5ZWFyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZmlsdGVyLW1heHllYXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNldFRvdGFsKCR0b3RhbCwgJGl0ZW1zKTtcclxuICAgICAgICAgICAgfSkudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHN0eWxlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgdW5pcXVlU3R5bGUgPSBbXTtcclxuICAgICAgICAgICAgJC5lYWNoKHN0eWxlLCBmdW5jdGlvbiAoaSwgZWwpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZWwsIHVuaXF1ZVN0eWxlKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB1bmlxdWVTdHlsZS5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoJzxzdHlsZT4nICsgdW5pcXVlU3R5bGUuam9pbignJykgKyAnPC9zdHlsZT4nKS5hcHBlbmRUbygnaGVhZCcpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjYWxjUGF5bWVudChjb3N0LCBwZXJjZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwoY29zdCAqIHBlcmNlbnQgLyAxMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjYWxjQ3JlZGl0KGNvc3QsIHBlcmNlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvc3QgLSBNYXRoLmNlaWwoY29zdCAqIHBlcmNlbnQgLyAxMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjYWxjUGVyTW9udGgoY3JlZGl0LCByYXRlLCBhZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChjcmVkaXQgKiAoKHJhdGUgLyAxMjAwLjApIC8gKDEuMCAtIE1hdGgucG93KDEuMCArIHJhdGUgLyAxMjAwLjAsIC0oYWdlICogMTIpKSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZm9ybWF0UHJpY2UocHJpY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByaWNlLnRvU3RyaW5nKCkucmVwbGFjZSgvLi9nLCBmdW5jdGlvbiAoYywgaSwgYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgYyAhPT0gXCIuXCIgJiYgISgoYS5sZW5ndGggLSBpKSAlIDMpID8gJyAnICsgYyA6IGM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzZXRUb3RhbCgkdGFyZ2V0LCAkaXRlbXMpIHtcclxuICAgICAgICAgICAgdmFyIHRvdGFsID0gJGl0ZW1zLmxlbmd0aCAtICRpdGVtcy5maWx0ZXIoJ1tjbGFzcyo9XCJmaWx0ZXJcIl0nKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBhID0gZ2V0TnVtRW5kaW5nKHRvdGFsLCBbJ9Cd0LDQudC00LXQvdCwJywgJ9Cd0LDQudC00LXQvdC+JywgJ9Cd0LDQudC00LXQvdC+J10pO1xyXG4gICAgICAgICAgICB2YXIgYiA9IGdldE51bUVuZGluZyh0b3RhbCwgWyfQuNC/0L7RgtC10YfQvdCw0Y8g0L/RgNC+0LPRgNCw0LzQvNCwJywgJ9C40L/QvtGC0LXRh9C90YvQtSDQv9GA0L7Qs9GA0LDQvNC80YsnLCAn0LjQv9C+0YLQtdGH0L3Ri9GFINC/0YDQvtCz0YDQsNC80LwnXSk7XHJcbiAgICAgICAgICAgICR0YXJnZXQudGV4dChbYSwgdG90YWwsIGJdLmpvaW4oJyAnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcuanMtaHlwb3RoZWNfX3NsaWRlcicpLnNsaWNrKHtcclxuICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgIGNlbnRlck1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICcxNXB4JyxcclxuICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiBhcHBDb25maWcuYnJlYWtwb2ludC5tZCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICcwcHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLWh5cG90aGVjX19zaG93LWJ0bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyICR0ID0gJCh0aGlzKS5wYXJlbnRzKCcuanMtaHlwb3RoZWMnKS5maW5kKCcuanMtaHlwb3RoZWNfX3Nob3ctdGFyZ2V0Jyk7XHJcbiAgICAgICAgICAgIGlmICgkdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAkdC5vZmZzZXQoKS50b3AgLSA0MDtcclxuICAgICAgICAgICAgICAgIGlmICgkKCcuaGVhZGVyX19tYWluJykuY3NzKCdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IC09ICQoJy5oZWFkZXJfX21haW4nKS5vdXRlckhlaWdodCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6IG9mZnNldH0sIDMwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0RGF0ZXBpY2tlcigpIHtcclxuICAgICAgICB2YXIgZGF0ZXBpY2tlclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB2YXIgY29tbW9uT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3AgbGVmdCcsXHJcbiAgICAgICAgICAgIG9uU2hvdzogZnVuY3Rpb24gKGluc3QsIGFuaW1hdGlvbkNvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVwaWNrZXJWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25IaWRlOiBmdW5jdGlvbiAoaW5zdCwgYW5pbWF0aW9uQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZXBpY2tlclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIChmb3JtYXR0ZWREYXRlLCBkYXRlLCBpbnN0KSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0LiRlbC50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJCgnLmpzLWRhdGV0aW1lcGlja2VyJykuZGF0ZXBpY2tlcihPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgbWluRGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgdGltZXBpY2tlcjogdHJ1ZSxcclxuICAgICAgICAgICAgZGF0ZVRpbWVTZXBhcmF0b3I6ICcsICcsXHJcbiAgICAgICAgfSwgY29tbW9uT3B0aW9ucykpO1xyXG4gICAgICAgICQoJy5qcy1kYXRlcGlja2VyLXJhbmdlJykuZWFjaChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgdmFyIG1pbiA9IG5ldyBEYXRlKCQodGhpcykuZGF0YSgnbWluJykpIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gbmV3IERhdGUoJCh0aGlzKS5kYXRhKCdtYXgnKSkgfHwgbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5kYXRlcGlja2VyKE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgbWluRGF0ZTogbWluLFxyXG4gICAgICAgICAgICAgICAgbWF4RGF0ZTogbWF4LFxyXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsZURhdGVzU2VwYXJhdG9yOiAnIC0gJyxcclxuICAgICAgICAgICAgfSwgY29tbW9uT3B0aW9ucykpO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZXBpY2tlciA9ICQodGhpcykuZGF0YSgnZGF0ZXBpY2tlcicpO1xyXG4gICAgICAgICAgICBkYXRlcGlja2VyLnNlbGVjdERhdGUoW21pbiwgbWF4XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLWRhdGV0aW1lcGlja2VyLCAuanMtZGF0ZXBpY2tlci1yYW5nZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGVwaWNrZXJWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZXBpY2tlciA9ICQoJy5qcy1kYXRldGltZXBpY2tlciwgLmpzLWRhdGVwaWNrZXItcmFuZ2UnKS5kYXRhKCdkYXRlcGlja2VyJyk7XHJcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRTY3JvbGxiYXIoKSB7XHJcbiAgICAgICAgJCgnLmpzLXNjcm9sbGJhcicpLnNjcm9sbGJhcigpO1xyXG4gICAgICAgIHZhciB3ID0gJCh3aW5kb3cpLm91dGVyV2lkdGgoKTtcclxuICAgICAgICBpZiAodyA8IGFwcENvbmZpZy5icmVha3BvaW50Lm1kKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItc20nKS5zY3JvbGxiYXIoKTtcclxuICAgICAgICAgICAgJCgnLmpzLXNjcm9sbGJhci1zbS1tZCcpLnNjcm9sbGJhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodyA8IGFwcENvbmZpZy5icmVha3BvaW50LmxnKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItc20tbWQnKS5zY3JvbGxiYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHcgPj0gYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQgJiYgdyA8IGFwcENvbmZpZy5icmVha3BvaW50LmxnKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItbWQnKS5zY3JvbGxiYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHcgPj0gYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQpIHtcclxuICAgICAgICAgICAgJCgnLmpzLXNjcm9sbGJhci1tZC1sZycpLnNjcm9sbGJhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodyA+PSBhcHBDb25maWcuYnJlYWtwb2ludC5sZykge1xyXG4gICAgICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLWxnJykuc2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA8IGFwcENvbmZpZy5icmVha3BvaW50Lm1kKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLXNtJykuc2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLXNtJykuc2Nyb2xsYmFyKCdkZXN0cm95Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCQod2luZG93KS5vdXRlcldpZHRoKCkgPj0gYXBwQ29uZmlnLmJyZWFrcG9pbnQubWRcclxuICAgICAgICAgICAgICAgICAgICAmJiAkKHdpbmRvdykub3V0ZXJXaWR0aCgpIDwgYXBwQ29uZmlnLmJyZWFrcG9pbnQubGcpIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItbWQnKS5zY3JvbGxiYXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItbWQnKS5zY3JvbGxiYXIoJ2Rlc3Ryb3knKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodyA8IGFwcENvbmZpZy5icmVha3BvaW50LmxnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLXNtLW1kJykuc2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLXNtLW1kJykuc2Nyb2xsYmFyKCdkZXN0cm95Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCQod2luZG93KS5vdXRlcldpZHRoKCkgPj0gYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQpIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItbWQtbGcnKS5zY3JvbGxiYXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1zY3JvbGxiYXItbWQtbGcnKS5zY3JvbGxiYXIoJ2Rlc3Ryb3knKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJCh3aW5kb3cpLm91dGVyV2lkdGgoKSA+PSBhcHBDb25maWcuYnJlYWtwb2ludC5sZykge1xyXG4gICAgICAgICAgICAgICAgJCgnLmpzLXNjcm9sbGJhci1sZycpLnNjcm9sbGJhcigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnLmpzLXNjcm9sbGJhci1sZycpLnNjcm9sbGJhcignZGVzdHJveScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbi8vICAgICAgICAkKCcuanMtc2Nyb2xsYmFyLWhvdCcpLnNjcm9sbGJhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0J/RgNC+0LrRgNGD0YLQutCwINC/0L4g0YHRgdGL0LvQutC1INC00L4g0Y3Qu9C10LzQtdC90YLQsFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpbml0U2Nyb2xsKCkge1xyXG4gICAgICAgICQoJy5qcy1zY3JvbGwnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJCgkKHRoaXMpLmF0dHIoJ2hyZWYnKSk7XHJcbiAgICAgICAgICAgIGlmICgkdGFyZ2V0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICR0YXJnZXQub2Zmc2V0KCkudG9wIC0gNDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmhlYWRlcl9fbWFpbicpLmNzcygncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCAtPSAkKCcuaGVhZGVyX19tYWluJykub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmhlYWRlcicpLmNzcygncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCAtPSAkKCcuaGVhZGVyJykub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoJ2h0bWwsYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDogb2Zmc2V0fSwgMzAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaW5pdEFib3V0KCkge1xyXG4gICAgICAgICQoJy5qcy1hYm91dC1oeXN0b3J5X195ZWFyLXNsaWRlcicpLnNsaWNrKHtcclxuICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDUsXHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICBjZW50ZXJNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcclxuICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxyXG4gICAgICAgICAgICBhc05hdkZvcjogJy5qcy1hYm91dC1oeXN0b3J5X19jb250ZW50LXNsaWRlcicsXHJcbiAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogYXBwQ29uZmlnLmJyZWFrcG9pbnQubWQgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc3MHB4J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5qcy1hYm91dC1oeXN0b3J5X195ZWFyLXNsaWRlcicpLm9uKCdiZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQsIHNsaWNrLCBjdXJyZW50U2xpZGUsIG5leHRTbGlkZSkge1xyXG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzbGljayk7XHJcbiAgICAgICAgICAgICQodGhpcykuZmluZCgnLl9zaWJsaW5nJykucmVtb3ZlQ2xhc3MoJ19zaWJsaW5nJyk7XHJcbiAgICAgICAgICAgICQoc2xpY2suJHNsaWRlc1tuZXh0U2xpZGVdKS5uZXh0KCkuYWRkQ2xhc3MoJ19zaWJsaW5nJyk7XHJcbiAgICAgICAgICAgICQoc2xpY2suJHNsaWRlc1tuZXh0U2xpZGVdKS5wcmV2KCkuYWRkQ2xhc3MoJ19zaWJsaW5nJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLWFib3V0LWh5c3RvcnlfX2NvbnRlbnQtc2xpZGVyJykuc2xpY2soe1xyXG4gICAgICAgICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgIGZhZGU6IHRydWUsXHJcbiAgICAgICAgICAgIGFzTmF2Rm9yOiAnLmpzLWFib3V0LWh5c3RvcnlfX3llYXItc2xpZGVyJyxcclxuICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsXHJcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0RmlsZWlucHV0KCkge1xyXG4gICAgICAgICQoJy5qcy1maWxlaW5wdXRfX2NudCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2RlZmF1bHQnLCAkKHRoaXMpLnRleHQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmpzLWZpbGVpbnB1dCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gJCh0aGlzKS52YWwoKS5zcGxpdCgnXFxcXCcpLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKCcuanMtZmlsZWlucHV0X19jbnQnKS50ZXh0KGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRBbnRpc3BhbSgpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cImVtYWlsM1wiXSxpbnB1dFtuYW1lPVwiaW5mb1wiXSxpbnB1dFtuYW1lPVwidGV4dFwiXScpLmF0dHIoJ3ZhbHVlJywgJycpLnZhbCgnJyk7XHJcbiAgICAgICAgfSwgNTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdEFscGhhYmV0KCkge1xyXG4gICAgICAgICQoJy5qcy1hbHBoYWJldCBpbnB1dCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1hbHBoYWJldCBsaScpLnJlbW92ZUNsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCdsaScpLmFkZENsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuanMtYWxwaGFiZXQgYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgJCgnLmpzLWFscGhhYmV0IGxpJykucmVtb3ZlQ2xhc3MoJ19hY3RpdmUnKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCdsaScpLmFkZENsYXNzKCdfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbVNlYXJjaDIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBtU2VhcmNoMi5yZXNldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pSWl3aWMyOTFjbU5sY3lJNld5SmpiMjF0YjI0dWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYWxGMVpYSjVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUZ3aWRYTmxJSE4wY21samRGd2lPMXh5WEc1Y2NseHVJQ0FnSUNRb1pHOWpkVzFsYm5RcExuSmxZV1I1S0daMWJtTjBhVzl1SUNncElIdGNjbHh1WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUZ4eVhHNTlLVHNpWFN3aVptbHNaU0k2SW1OdmJXMXZiaTVxY3lKOVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lJaXdpYzI5MWNtTmxjeUk2V3lKamIyMXRiMjR1YW5NaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKQ2hrYjJOMWJXVnVkQ2t1Y21WaFpIa29ablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnWVhCd0xtbHVhWFJwWVd4cGVtVW9LVHRjY2x4dWZTazdYSEpjYmx4eVhHNTJZWElnWVhCd0lEMGdlMXh5WEc0Z0lDQWdhVzVwZEdsaGJHbDZaV1E2SUdaaGJITmxMRnh5WEc1Y2NseHVJQ0FnSUdsdWFYUnBZV3hwZW1VNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10YUdsa1pTMWxiWEIwZVNjcExtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU1FvZEdocGN5a3VabWx1WkNnbkxtcHpMV2hwWkdVdFpXMXdkSGxmWDJOdWRDQStJQ29uS1M1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3lrdWNtVnRiM1psS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSUWMyVjFaRzlUWld4bFkzUW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSUWMyVjFaRzlUWld4bFkzUlRaV0Z5WTJnb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVhWFJVWVdKektDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwUTJobGMzTW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSRGFHVnpjMFpwYkhSbGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVwZEdsaGJHbDZaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCcGJtbDBVSE5sZFdSdlUyVnNaV04wT2lCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1kzVnpkRzl0SUhObGJHVmpkRnh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUW5LUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpaV3hsWTNSZlgzUnZaMmRzWlhJbktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUW5LUzV5WlcxdmRtVkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG5CaGNtVnVkSE1vSnk1cWN5MXpaV3hsWTNRbktTNWhaR1JEYkdGemN5Z25YMkZqZEdsMlpTY3BMblJ2WjJkc1pVTnNZWE56S0NkZmIzQmxibVZrSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUW5LUzV1YjNRb0p5NWZZV04wYVhabEp5a3VjbVZ0YjNabFEyeGhjM01vSjE5dmNHVnVaV1FuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBa0tIZHBibVJ2ZHlrdWIyNG9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMlZzWldOMEp5a3VjbVZ0YjNabFEyeGhjM01vSjE5dmNHVnVaV1FnWDJGamRHbDJaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCcGJtbDBVSE5sZFdSdlUyVnNaV04wVTJWaGNtTm9PaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnWTNWemRHOXRJSE5sYkdWamRDQnpaV0Z5WTJoY2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyVnNaV04wTFhObFlYSmphQ2NwTG1WaFkyZ29ablZ1WTNScGIyNGdLR2x1WkdWNExDQmxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUFrYVhSbGJYTWdQU0FrS0dWc1pXMWxiblFwTG1acGJtUW9KeTVxY3kxelpXeGxZM1F0YzJWaGNtTm9YMTlwZEdWdEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9aV3hsYldWdWRDa3VabWx1WkNnbkxtcHpMWE5sYkdWamRDMXpaV0Z5WTJoZlgybHVjSFYwSnlsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YjI0b0oydGxlWFZ3Snl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NYVmxjbmtnUFNBa0tIUm9hWE1wTG5aaGJDZ3BMblJ5YVcwb0tTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4eVhHNHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh4ZFdWeWVTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeGRXVnllUzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnBkR1Z0Y3k1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG1SaGRHRW9KM05sYkdWamRDMXpaV0Z5WTJnbktTNTBiMHh2ZDJWeVEyRnpaU2dwTG1sdVpHVjRUMllvY1hWbGNua3BJRDA5UFNBd0lEOGdKQ2gwYUdsektTNXphRzkzS0NrZ09pQWtLSFJvYVhNcExtaHBaR1VvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR2wwWlcxekxuTm9iM2NvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG05dUtDZGphR0Z1WjJVbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNWxaV1FnWm05eUlHMUdhV3gwWlhJeVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnYVc1cGRGUmhZbk02SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRkR0ZpY3ljcExtVmhZMmdvWm5WdVkzUnBiMjRnS0dsdVpHVjRMQ0JsYkdWdEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwWVdKelUyVnNaV04wYjNJZ1BTQjBlWEJsYjJZZ0pDaGxiR1Z0S1M1a1lYUmhLQ2QwWVdKekp5a2dQVDA5SUNkMWJtUmxabWx1WldRbklEOGdKeTVxY3kxMFlXSnpYMTlzYVhOMElENGdiR2tuSURvZ0pDaGxiR1Z0S1M1a1lYUmhLQ2QwWVdKekp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUFrYzJWc1pXTjBJRDBnSkNobGJHVnRLUzVtYVc1a0tDY3Vhbk10ZEdGaWMxOWZjMlZzWldOMEp5a3NJSGRwZEdoVFpXeGxZM1FnUFNBa2MyVnNaV04wTG14bGJtZDBhRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2hsYkdWdEtTNWxZWE41ZEdGaWN5aDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlEUXROQzcwWThnMExMUXU5QyswTGJRdGRDOTBMM1JpOUdGSU5HQzBMRFFzZEMrMExJZzBMalJnZEMvMEw3UXU5R00wTGZSZzlDMTBMd2daR0YwWVZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRmljem9nZEdGaWMxTmxiR1ZqZEc5eUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z1Wld4RGIyNTBaWGgwT2lBa0tHVnNaVzBwTG1oaGMwTnNZWE56S0NkcWN5MTBZV0p6WDJScGMyTnZibTVsWTNSbFpDY3BJRDhnSkNnbkxtcHpMWFJoWW5OZlgyTnZiblJsYm5RbktTQTZJQ1FvWld4bGJTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzYVhSb1UyVnNaV04wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSFJoWW5OVFpXeGxZM1J2Y2lrdVptbHVaQ2duWVNjcExtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlDUW9kR2hwY3lrdVlYUjBjaWduYUhKbFppY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoMElEMGdKQ2gwYUdsektTNWtZWFJoS0NkelpXeGxZM1FuS1NCOGZDQWtLSFJvYVhNcExuUmxlSFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYzJWc1pXTjBMbUZ3Y0dWdVpDZ25QRzl3ZEdsdmJpQjJZV3gxWlQxY0lpY3JkbUZzZFdVckoxd2lQaWNyZEdWNGRDc25QQzl2Y0hScGIyNCtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J6Wld4bFkzUXViMjRvSjJOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tHVnNaVzBwTG1WaGMzbDBZV0p6S0NkelpXeGxZM1FuTENBa0tIUm9hWE1wTG5aaGJDZ3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb1pXeGxiU2t1WW1sdVpDZ25aV0Z6ZVhSaFluTTZZV1owWlhJbkxDQm1kVzVqZEdsdmJpQW9aWFpsYm5Rc0lDUmpiR2xqYTJWa0xDQWtkR0Z5WjJWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2QybDBhRk5sYkdWamRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnpaV3hsWTNRdWRtRnNLQ1JqYkdsamEyVmtMbUYwZEhJb0oyaHlaV1luS1NrdVkyaGhibWRsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrZEdGeVoyVjBMbVpwYm1Rb0p5NXpiR2xqYXkxcGJtbDBhV0ZzYVhwbFpDY3BMbk5zYVdOcktDZHpaWFJRYjNOcGRHbHZiaWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUmhjbWRsZEM1bWFXNWtLQ2N1YW5NdGMyVnNaV04wTWljcExuTmxiR1ZqZERJb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJR2x1YVhSRGFHVnpjem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNna0tIZHBibVJ2ZHlrdWIzVjBaWEpYYVdSMGFDZ3BJRDQ5SUdGd2NFTnZibVpwWnk1aWNtVmhhM0J2YVc1MExteG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MWphR1Z6Y3kxMGIyOXNkR2x3WDE5amIyNTBaVzUwSnlrdWNHRnlaVzUwS0NrdWFHOTJaWElvWVhCd0xuTm9iM2REYUdWemMxUnZiMngwYVhBc0lHRndjQzVvYVdSbFEyaGxjM05VYjI5c2RHbHdLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUNSMFlYSm5aWFFnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhScGRHeGxPaUFrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmZEdsMGJHVW5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpsWVRvZ0pDZ25MbXB6TFdOb1pYTnpMV2x1Wm05ZlgyRnlaV0VuS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKcFkyVTZJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTl3Y21salpTY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbWxqWlZCbGNsTnhkV0Z5WlRvZ0pDZ25MbXB6TFdOb1pYTnpMV2x1Wm05ZlgzQnlhV05sVUdWeVUzRjFZWEpsSnlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdac2IyOXlPaUFrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmWm14dmIzSW5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabXh2YjNKelZHOTBZV3c2SUNRb0p5NXFjeTFqYUdWemN5MXBibVp2WDE5bWJHOXZjbk5VYjNSaGJDY3BMRnh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWthSGx3YjNSb1pXTWdQU0FrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmYUhsd2IzUm9aV01uS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUm9lWEJ2ZEdobFkxZHlZWEJ3WlhJZ1BTQWtLQ2N1YW5NdFkyaGxjM010YVc1bWIxOWZhSGx3YjNSb1pXTXRkM0poY0hCbGNpY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdsdFowWnNZWFFnUFNBa0tDY3Vhbk10WTJobGMzTXRhVzVtYjE5ZmFXMW5SbXhoZENjcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR2x0WjBac2IyOXlJRDBnSkNnbkxtcHpMV05vWlhOekxXbHVabTlmWDJsdFowWnNiMjl5Snlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtkR0ZpY3lBOUlDUW9KeTVxY3kxamFHVnpjeTFwYm1adlgxOTBZV0p6Snlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtkR0ZpUm14dmIzSWdQU0FrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmZEdGaVJteHZiM0luS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBZV0pHYkdGMElEMGdKQ2duTG1wekxXTm9aWE56TFdsdVptOWZYM1JoWWtac1lYUW5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSbWIzSnRJRDBnSkNnbkxtcHpMV05vWlhOekxXbHVabTlmWDJadmNtMG5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmYVhSbGJTNWZZV04wYVhabEp5a3ViMjRvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKSFJvYVhNZ1BTQWtLSFJvYVhNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KSFJvYVhNdWFHRnpRMnhoYzNNb0oxOXpaV3hsWTNSbFpDY3BLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFkyaGxjM010YVc1bWIxOWZhWFJsYlNjcExuSmxiVzkyWlVOc1lYTnpLQ2RmYzJWc1pXTjBaV1FuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkhSb2FYTXVZV1JrUTJ4aGMzTW9KMTl6Wld4bFkzUmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUNSMGFHbHpMbVJoZEdFb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUNSMFlYSm5aWFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBZWEpuWlhSYmEyVjVYUzUwWlhoMEtHUmhkR0ZiYTJWNVhTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pHWnZjbTB1ZG1Gc0tHUmhkR0V1Wm05eWJTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaExtaDVjRzkwYUdWaktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYUhsd2IzUm9aV011ZEdWNGRDaGtZWFJoTG1oNWNHOTBhR1ZqS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUm9lWEJ2ZEdobFkxZHlZWEJ3WlhJdWMyaHZkeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdoNWNHOTBhR1ZqVjNKaGNIQmxjaTVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWFXMW5SbXhoZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR2x0WjBac1lYUXVZWFIwY2lnbmFISmxaaWNzSUdSaGRHRXVhVzFuUm14aGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteGhkQzVtYVc1a0tDZHBiV2NuS1M1aGRIUnlLQ2R6Y21NbkxDQmtZWFJoTG1sdFowWnNZWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHbHRaMFpzWVhRdWMyaHZkeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUmhZa1pzWVhRdWMyaHZkeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdsdFowWnNZWFF1YUdsa1pTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhSaFlrWnNZWFF1YUdsa1pTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaExtbHRaMFpzYjI5eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteHZiM0l1WVhSMGNpZ25hSEpsWmljc0lHUmhkR0V1YVcxblJteHZiM0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHbHRaMFpzYjI5eUxtWnBibVFvSjJsdFp5Y3BMbUYwZEhJb0ozTnlZeWNzSUdSaGRHRXVhVzFuUm14dmIzSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdsdFowWnNiMjl5TG5Ob2IzY29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSMFlXSkdiRzl2Y2k1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteHZiM0l1YUdsa1pTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhSaFlrWnNiMjl5TG1ocFpHVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkhSaFluTXVabWx1WkNnbmJHazZkbWx6YVdKc1pTY3BMbXhsYm1kMGFDQTlQU0F4S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtkR0ZpY3k1bWFXNWtLQ2RzYVRwMmFYTnBZbXhsSnlrdVptbHljM1FvS1M1bWFXNWtLQ2RoSnlrdVkyeHBZMnNvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXNXBkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGNJbWgwYld3c0lHSnZaSGxjSWlrdVlXNXBiV0YwWlNoN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNWRzl3T2lBa2RHRnlaMlYwTG5ScGRHeGxMbTltWm5ObGRDZ3BMblJ2Y0NBdElERXdNRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z05UQXdLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTlwZEdWdExsOWhZM1JwZG1VbktTNW1hWEp6ZENncExtTnNhV05yS0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZENBOUlIUnlkV1U3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDUmphR1Z6YzFSdmIyeDBhWEE2SUc1MWJHd3NYSEpjYmlBZ0lDQWtZMmhsYzNOVWIyOXNkR2x3VkdsdFpXOTFkRG9nYm5Wc2JDeGNjbHh1WEhKY2JpQWdJQ0J6YUc5M1EyaGxjM05VYjI5c2RHbHdPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUNSelpXeG1JRDBnSkNoMGFHbHpLVHRjY2x4dUlDQWdJQ0FnSUNCaGNIQXVKR05vWlhOelZHOXZiSFJwY0ZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5bVpuTmxkQ0E5SUNSelpXeG1MbTltWm5ObGRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjSEF1SkdOb1pYTnpWRzl2YkhScGNDQTlJQ1J6Wld4bUxtWnBibVFvSnk1cWN5MWphR1Z6Y3kxMGIyOXNkR2x3WDE5amIyNTBaVzUwSnlrdVkyeHZibVVvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhCd0xpUmphR1Z6YzFSdmIyeDBhWEF1WTNOektIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0RvZ2IyWm1jMlYwTG5SdmNDQXJJREk0TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nYjJabWMyVjBMbXhsWm5RZ0t5QXhNQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2t1WVhCd1pXNWtWRzhvSkNnblltOWtlU2NwS1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJSDBzSURNd01DazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUdocFpHVkRhR1Z6YzFSdmIyeDBhWEE2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb1lYQndMaVJqYUdWemMxUnZiMngwYVhCVWFXMWxiM1YwS1R0Y2NseHVJQ0FnSUNBZ0lDQmhjSEF1SkdOb1pYTnpWRzl2YkhScGNDNXlaVzF2ZG1Vb0tUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnYVc1cGRFTm9aWE56Um1sc2RHVnlPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUNSbWIzSnRJRDBnSkNnbkxtcHpMV05vWlhOekxXWnBiSFJsY2ljcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR2wwWlcxeklEMGdKQ2duTG1wekxXTm9aWE56TFdacGJIUmxjbDlmYVhSbGJTY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbFlVMXBiaUE5SUc1MWJHd3NJR0Z5WldGTllYZ2dQU0J1ZFd4c0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpwWTJWTmFXNGdQU0J1ZFd4c0xDQndjbWxqWlUxaGVDQTlJRzUxYkd3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM1JoYkNBOUlDUnBkR1Z0Y3k1c1pXNW5kR2dnTFNBa2FYUmxiWE11Wm1sc2RHVnlLQ2N1WDNOdmJHUW5LUzVzWlc1bmRHZzdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDUm1iM0p0TG14bGJtZDBhQ0E5UFQwZ01DQjhmQ0FrYVhSbGJYTXViR1Z1WjNSb0lEMDlQU0F3S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJEYUdWemMxUnZkR0ZzS0hSdmRHRnNLVHRjY2x4dUlDQWdJQ0FnSUNBa2FYUmxiWE11Wm1sc2RHVnlLQ2RiWkdGMFlTMW1hV3gwWlhJdFlYSmxZVjBuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRnlaV0VnUFNCTllYUm9Mbkp2ZFc1a0tIQmhjbk5sUm14dllYUW9KQ2gwYUdsektTNWtZWFJoS0NkbWFXeDBaWEl0WVhKbFlTY3BLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlYSmxZVTFwYmlCOGZDQmhjbVZoSUR3Z1lYSmxZVTFwYmlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpsWVUxcGJpQTlJR0Z5WldFN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmhjbVZoVFdGNElIeDhJR0Z5WldFZ1BpQmhjbVZoVFdGNEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21WaFRXRjRJRDBnWVhKbFlUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDUnBkR1Z0Y3k1bWFXeDBaWElvSjF0a1lYUmhMV1pwYkhSbGNpMXdjbWxqWlYwbktTNWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YVdObElEMGdjR0Z5YzJWSmJuUW9KQ2gwYUdsektTNWtZWFJoS0NkbWFXeDBaWEl0Y0hKcFkyVW5LU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGNISnBZMlZOYVc0Z2ZId2djSEpwWTJVZ1BDQndjbWxqWlUxcGJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKcFkyVk5hVzRnUFNCd2NtbGpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhCeWFXTmxUV0Y0SUh4OElIQnlhV05sSUQ0Z2NISnBZMlZOWVhncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YVdObFRXRjRJRDBnY0hKcFkyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWtabTl5YlM1bWFXNWtLQ2RiYm1GdFpUMWNJbUZ5WldGZmJXbHVYQ0pkSnlrdVlYUjBjaWduZG1Gc2RXVW5MQ0JoY21WaFRXbHVLUzVoZEhSeUtDZHRhVzRuTENCaGNtVmhUV2x1S1M1aGRIUnlLQ2R0WVhnbkxDQmhjbVZoVFdGNEtUdGNjbHh1SUNBZ0lDQWdJQ0FrWm05eWJTNW1hVzVrS0NkYmJtRnRaVDFjSW1GeVpXRmZiV0Y0WENKZEp5a3VZWFIwY2lnbmRtRnNkV1VuTENCaGNtVmhUV0Y0S1M1aGRIUnlLQ2R0YVc0bkxDQmhjbVZoVFdsdUtTNWhkSFJ5S0NkdFlYZ25MQ0JoY21WaFRXRjRLVHRjY2x4dUlDQWdJQ0FnSUNBa1ptOXliUzVtYVc1a0tDZGJibUZ0WlQxY0luQnlhV05sWDIxcGJsd2lYU2NwTG1GMGRISW9KM1poYkhWbEp5d2djSEpwWTJWTmFXNHBMbUYwZEhJb0oyMXBiaWNzSUhCeWFXTmxUV2x1S1M1aGRIUnlLQ2R0WVhnbkxDQndjbWxqWlUxaGVDazdYSEpjYmlBZ0lDQWdJQ0FnSkdadmNtMHVabWx1WkNnblcyNWhiV1U5WENKd2NtbGpaVjl0WVhoY0lsMG5LUzVoZEhSeUtDZDJZV3gxWlNjc0lIQnlhV05sVFdGNEtTNWhkSFJ5S0NkdGFXNG5MQ0J3Y21salpVMXBiaWt1WVhSMGNpZ25iV0Y0Snl3Z2NISnBZMlZOWVhncE8xeHlYRzRnSUNBZ0lDQWdJQ1JtYjNKdExtWnBibVFvSjF0dVlXMWxQVndpY205dmJYTmNJbDBuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDUnBkR1Z0Y3k1bWFXeDBaWElvSjF0a1lYUmhMV1pwYkhSbGNpMXliMjl0Y3oxY0lpY2dLeUFrS0hSb2FYTXBMblpoYkNncElDc2dKMXdpWFNjcExteGxibWQwYUNBOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG5CaGNtVnVkQ2dwTG5KbGJXOTJaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDUm1iM0p0TG1acGJtUW9KMmx1Y0hWMEp5a3ViMjRvSjJOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1p2Y20xRVlYUmhJRDBnSkdadmNtMHVjMlZ5YVdGc2FYcGxRWEp5WVhrb0tTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEp6SUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbVZoT2lCYllYSmxZVTFwYml3Z1lYSmxZVTFoZUYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlhV05sT2lCYmNISnBZMlZOYVc0c0lIQnlhV05sVFdGNFhTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTl2YlhNNklGdGRYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhtYjNKdFJHRjBZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1F1WldGamFDaG1iM0p0UkdGMFlTd2dablZ1WTNScGIyNGdLRzRzSUhZcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMkxtNWhiV1VnUFQwZ0oyRnlaV0ZmYldsdUp5QW1KaUIyTG5aaGJIVmxJQ0U5SUdGeVpXRk5hVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSnpMbUZ5WldGYk1GMGdQU0J3WVhKelpVbHVkQ2gyTG5aaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyTG01aGJXVWdQVDBnSjJGeVpXRmZiV0Y0SnlBbUppQjJMblpoYkhWbElDRTlJR0Z5WldGTllYZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3gwWlhKekxtRnlaV0ZiTVYwZ1BTQndZWEp6WlVsdWRDaDJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJMbTVoYldVZ1BUMGdKM0J5YVdObFgyMXBiaWNnSmlZZ2RpNTJZV3gxWlNBaFBTQndjbWxqWlUxcGJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiSFJsY25NdWNISnBZMlZiTUYwZ1BTQndZWEp6WlVsdWRDaDJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJMbTVoYldVZ1BUMGdKM0J5YVdObFgyMWhlQ2NnSmlZZ2RpNTJZV3gxWlNBaFBTQndjbWxqWlUxaGVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiSFJsY25NdWNISnBZMlZiTVYwZ1BTQndZWEp6WlVsdWRDaDJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJMbTVoYldVZ1BUMGdKM0p2YjIxekp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiSFJsY25NdWNtOXZiWE11Y0hWemFDaDJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeDBaWEp6TG1GeVpXRmJNRjBnUFQwZ1lYSmxZVTFwYmlBbUppQm1hV3gwWlhKekxtRnlaV0ZiTVYwZ1BUMGdZWEpsWVUxaGVDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQm1hV3gwWlhKekxtRnlaV0U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeDBaWEp6TG5CeWFXTmxXekJkSUQwOUlIQnlhV05sVFdsdUlDWW1JR1pwYkhSbGNuTXVjSEpwWTJWYk1WMGdQVDBnY0hKcFkyVk5ZWGdwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWm1sc2RHVnljeTV3Y21salpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwYkhSbGNuTXVjbTl2YlhNdWJHVnVaM1JvSUQwOUlEQXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdabWxzZEdWeWN5NXliMjl0Y3p0Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aG1hV3gwWlhKektUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUFltcGxZM1F1YTJWNWN5aG1hV3gwWlhKektTNXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwZEdWdGN5NWhaR1JEYkdGemN5Z25YMlpwYkhSbGNtVmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE11WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJIUmxjbVZrSUQwZ2RISjFaU3dnSkY5cGRHVnRJRDBnSkNoMGFHbHpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtMbVZoWTJnb1ptbHNkR1Z5Y3l3Z1puVnVZM1JwYjI0Z0tHc3NJSFlwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNocktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RoY21WaEp6cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JQ2drWDJsMFpXMHVaR0YwWVNnblptbHNkR1Z5TFdGeVpXRW5LU2tnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoY21WaElEMGdUV0YwYUM1eWIzVnVaQ2h3WVhKelpVWnNiMkYwS0NSZmFYUmxiUzVrWVhSaEtDZG1hV3gwWlhJdFlYSmxZU2NwS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGNtVmhJRHdnZGxzd1hTQjhmQ0JoY21WaElENGdkbHN4WFNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5WldRZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY0hKcFkyVW5PbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnS0NSZmFYUmxiUzVrWVhSaEtDZG1hV3gwWlhJdGNISnBZMlVuS1NrZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtbGpaU0E5SUUxaGRHZ3VjbTkxYm1Rb2NHRnljMlZHYkc5aGRDZ2tYMmwwWlcwdVpHRjBZU2duWm1sc2RHVnlMWEJ5YVdObEp5a3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YVdObElEd2dkbHN3WFNCOGZDQndjbWxqWlNBK0lIWmJNVjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSmxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM0p2YjIxekp6cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JQ2drWDJsMFpXMHVaR0YwWVNnblptbHNkR1Z5TFhKdmIyMXpKeWtwSUQwOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMkxtbHVaR1Y0VDJZb0pGOXBkR1Z0TG1SaGRHRW9KMlpwYkhSbGNpMXliMjl0Y3ljcExuUnZVM1J5YVc1bktDa3BJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEpsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dacGJIUmxjbVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3lrdWNtVnRiM1psUTJ4aGMzTW9KMTltYVd4MFpYSmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEJ3TG5ObGRFTm9aWE56Vkc5MFlXd29KR2wwWlcxekxteGxibWQwYUNBdElDUnBkR1Z0Y3k1bWFXeDBaWElvSnk1ZlptbHNkR1Z5WldRbktTNXNaVzVuZEdncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHbDBaVzF6TG5KbGJXOTJaVU5zWVhOektDZGZabWxzZEdWeVpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGd2NDNXpaWFJEYUdWemMxUnZkR0ZzS0hSdmRHRnNLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ2MyVjBRMmhsYzNOVWIzUmhiRG9nWm5WdVkzUnBiMjRnS0hSdmRHRnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1WkdsdVozTWdQU0JiSjlDNjBMTFFzTkdBMFlMUXVOR0EwTEFuTENBbjBMclFzdEN3MFlEUmd0QzQwWURSaXljc0lDZlF1dEN5MExEUmdOR0MwTGpSZ0NkZE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MWphR1Z6Y3kxbWFXeDBaWEpmWDNSdmRHRnNKeWt1ZEdWNGRDaDBiM1JoYkNBcklDY2dKeUFySUdGd2NDNW5aWFJPZFcxRmJtUnBibWNvZEc5MFlXd3NJR1Z1WkdsdVozTXBLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaURRcE5HRDBMM1F1dEdHMExqUmp5RFFzdEMrMExmUXN0R0EwTERSaWRDdzBMWFJnaURRdnRDNjBMN1F2ZEdIMExEUXZkQzQwTFVnMExUUXU5R1BJTkM4MEwzUXZ0QzIwTFhSZ2RHQzBMTFF0ZEM5MEwzUXZ0Q3owTDRnMFlmUXVOR0IwTHZRc0NEUmdkQzcwTDdRc3RDd0lOQzkwTEFnMEw3UmdkQzkwTDdRc3RDdzBMM1F1TkM0SU5HSDBMalJnZEM3MExBZzBMZ2cwTHpRc05HQjBZSFF1TkN5MExBZzBMN1F1dEMrMEwzUmg5Q3cwTDNRdU5DNVhISmNiaUFnSUNBZ0tpQndZWEpoYlNBZ2FVNTFiV0psY2lCSmJuUmxaMlZ5SU5DbjBMalJnZEM3MEw0ZzBMM1FzQ0RRdnRHQjBMM1F2dEN5MExVZzBMclF2dEdDMEw3UmdOQyswTFBRdmlEUXZkR0QwTGJRdmRDK0lOR0IwWVRRdnRHQTBMelF1TkdBMEw3UXN0Q3cwWUxSakNEUXZ0QzYwTDdRdmRHSDBMRFF2ZEM0MExWY2NseHVJQ0FnSUNBcUlIQmhjbUZ0SUNCaFJXNWthVzVuY3lCQmNuSmhlU0RRbk5DdzBZSFJnZEM0MExJZzBZSFF1OUMrMExJZzBMalF1OUM0SU5DKzBMclF2dEM5MFlmUXNOQzkwTGpRdVNEUXROQzcwWThnMFlmUXVOR0IwTFhRdXlBb01Td2dOQ3dnTlNrc1hISmNiaUFnSUNBZ0tpQWdJQ0FnSUNBZ0lOQzkwTERRdjlHQTBMalF2TkMxMFlBZ1d5ZlJqOUN4MEx2UXZ0QzYwTDRuTENBbjBZL1FzZEM3MEw3UXV0Q3dKeXdnSjlHUDBMSFF1OUMrMExvblhWeHlYRzRnSUNBZ0lDb2djbVYwZFhKdUlGTjBjbWx1WjF4eVhHNGdJQ0FnSUNvZ1hISmNiaUFnSUNBZ0tpQm9kSFJ3Y3pvdkwyaGhZbkpoYUdGaWNpNXlkUzl3YjNOMEx6RXdOVFF5T0M5Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1oyVjBUblZ0Ulc1a2FXNW5PaUJtZFc1amRHbHZiaUFvYVU1MWJXSmxjaXdnWVVWdVpHbHVaM01wWEhKY2JpQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE5GYm1ScGJtY3NJR2s3WEhKY2JpQWdJQ0FnSUNBZ2FVNTFiV0psY2lBOUlHbE9kVzFpWlhJZ0pTQXhNREE3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2xPZFcxaVpYSWdQajBnTVRFZ0ppWWdhVTUxYldKbGNpQThQU0F4T1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelJXNWthVzVuSUQwZ1lVVnVaR2x1WjNOYk1sMDdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhU0E5SUdsT2RXMWlaWElnSlNBeE1EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNocEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNneEtUcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelJXNWthVzVuSUQwZ1lVVnVaR2x1WjNOYk1GMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2d5S1RwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnS0RNcE9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBb05DazZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MwVnVaR2x1WnlBOUlHRkZibVJwYm1keld6RmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ulc1a2FXNW5JRDBnWVVWdVpHbHVaM05iTWwwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5GYm1ScGJtYzdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVmVnh5WEc1Y2NseHVhbEYxWlhKNUtHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJRndpZFhObElITjBjbWxqZEZ3aU8xeHlYRzVjY2x4dUlDQWdJQ1FvWkc5amRXMWxiblFwTG5KbFlXUjVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwVFdGcGJsTnNhV1JsY2lncE8xeHlYRzRnSUNBZ0lDQWdJR2x1YVhSVGJXRnNiRk5zYVdSbGNuTW9LVHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBVbVYyYVdWM2MxTnNhV1JsY2lncE8xeHlYRzRnSUNBZ0lDQWdJR2x1YVhSQloyVnVkSE5RY21WelpXNTBZWFJwYjI0b0tUdGNjbHh1SUNBZ0lDQWdJQ0J6WlhSQloyVnVkSE5RY21WelpXNTBZWFJwYjI0b0tUdGNjbHh1SUNBZ0lDQWdJQ0JwYm1sMFRXVnVkU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJOWVhOcktDazdYSEpjYmlBZ0lDQWdJQ0FnYVc1cGRGQnZjSFZ3S0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZEZObGJHVmpkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJXWVd4cFpHRjBaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJTWldGc2RIbEdhV3gwWlhKektDazdYSEpjYmlBZ0lDQWdJQ0FnYVc1cGRGSmxZV3gwZVNncE8xeHlYRzRnSUNBZ0lDQWdJR2x1YVhSUVlYTnpkMjl5WkNncE8xeHlYRzRnSUNBZ0lDQWdJR2x1YVhSU1lXNW5aU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJIWVd4c1pYSjVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkRWg1Y0c5MGFHVmpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkRVJoZEdWd2FXTnJaWElvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwVTJOeWIyeHNZbUZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZEZOamNtOXNiQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJCWW05MWRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUdsdWFYUkdhV3hsYVc1d2RYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBRV3h3YUdGaVpYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBRVzUwYVhOd1lXMG9LVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDUW9kMmx1Wkc5M0tTNXZiaWduY21WemFYcGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2x1YVhSVGJXRnNiRk5zYVdSbGNuTW9LVHRjY2x4dUx5OGdJQ0FnSUNBZ0lHbHVhWFJOWlc1MUtDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBUV0ZwYmxOc2FXUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpTQTlJR0Z3Y0VOdmJtWnBaeTV6Ykdsa1pYSkJkWFJ2Y0d4aGVWTndaV1ZrSUM4Z01UQXdNRHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdKR0poY2lBOUlDUW9KeTVxY3kxdFlXbHVMWE5zYVdSbGNpMWlZWEluS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnpiR2xqYXlBOUlDUW9KeTVxY3kxemJHbGtaWEl0YldGcGJpY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOUVlYVnpaU0E5SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsamF5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsY21ObGJuUlVhVzFsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0pITnNhV05yTG14bGJtZDBhQ0E5UFQwZ01DbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FrYzJ4cFkyc3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSnZkM002SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVpwYm1sMFpUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUYUc5M09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRmtaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmxaV1E2SUdGd2NFTnZibVpwWnk1emJHbGtaWEpHWVdSbFUzQmxaV1JjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdmNHeGhlVk53WldWa09pQmhjSEJEYjI1bWFXY3VjMnhwWkdWeVFYVjBiM0JzWVhsVGNHVmxaQ3hjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrYzJ4cFkyc3ViMjRvSjJKbFptOXlaVU5vWVc1blpTY3NJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDd2djMnhwWTJzc0lHTjFjbkpsYm5SVGJHbGtaU3dnYm1WNGRGTnNhV1JsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFUyeHBaR1VnUENCdVpYaDBVMnhwWkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYzJ4cFkyc3VKSE5zYVdSbGMxdGpkWEp5Wlc1MFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyWmhaR1VnWDJ4bFpuUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2MyeHBZMnN1SkhOc2FXUmxjMXR1WlhoMFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyWmhaR1VnWDNKcFoyaDBKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hOc2FXTnJMaVJ6Ykdsa1pYTmJZM1Z5Y21WdWRGTnNhV1JsWFNrdVlXUmtRMnhoYzNNb0oxOW1ZV1JsSUY5eWFXZG9kQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaHpiR2xqYXk0a2MyeHBaR1Z6VzI1bGVIUlRiR2xrWlYwcExtRmtaRU5zWVhOektDZGZabUZrWlNCZmJHVm1kQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoMGFXTnJLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKR0poY2k1aGJtbHRZWFJsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBd0lDc2dKeVVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSURFd01DazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKSE5zYVdOckxtOXVLQ2RoWm5SbGNrTm9ZVzVuWlNjc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZEN3Z2MyeHBZMnNzSUdOMWNuSmxiblJUYkdsa1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLSE5zYVdOckxpUnpiR2xrWlhOYlkzVnljbVZ1ZEZOc2FXUmxYU2t1Y21WdGIzWmxRMnhoYzNNb0oxOW1ZV1JsSUY5c1pXWjBJRjl5YVdkb2RDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZCeWIyZHlaWE56WW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNSemJHbGpheTV2YmloN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxaVzUwWlhJNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselVHRjFjMlVnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6Wld4bFlYWmxPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMUJoZFhObElEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnpkR0Z5ZEZCeWIyZHlaWE56WW1GeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZEZCeWIyZHlaWE56WW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmxjbU5sYm5SVWFXMWxJRDBnTUR0Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNCcGMxQmhkWE5sSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJwWTJzZ1BTQnpaWFJKYm5SbGNuWmhiQ2hwYm5SbGNuWmhiQ3dnTVRBcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhVzUwWlhKMllXd29LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxQmhkWE5sSUQwOVBTQm1ZV3h6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR1Z5WTJWdWRGUnBiV1VnS3owZ01TQXZJQ2gwYVcxbElDc2dNQzR4S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUmlZWEl1WTNOektIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nY0dWeVkyVnVkRlJwYldVZ0t5QmNJaVZjSWx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHVnlZMlZ1ZEZScGJXVWdQajBnTVRBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pITnNhV05yTG5Oc2FXTnJLQ2R6YkdsamEwNWxlSFFuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhKbGMyVjBVSEp2WjNKbGMzTmlZWElvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaVlYSXVZM056S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBd0lDc2dKeVVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHbGpheWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemRHRnlkRkJ5YjJkeVpYTnpZbUZ5S0NrN1hISmNibHh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUlRiV0ZzYkZOc2FXUmxjbk1vS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NRb2QybHVaRzkzS1M1dmRYUmxjbGRwWkhSb0tDa2dQQ0JoY0hCRGIyNW1hV2N1WW5KbFlXdHdiMmx1ZEM1dFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyeHBaR1Z5TFhOdFlXeHNPbTV2ZENndWMyeHBZMnN0YVc1cGRHbGhiR2w2WldRcEp5a3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkwY3pvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNtOTNjem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMmh2ZHpvZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWdWRHVnlUVzlrWlRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdObGJuUmxjbEJoWkdScGJtYzZJQ2N4TlhCNEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2WTNWelQyNVRaV3hsWTNRNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6Ykdsa1pYSXRjMjFoYkd3dWMyeHBZMnN0YVc1cGRHbGhiR2w2WldRbktTNXpiR2xqYXlnbmRXNXpiR2xqYXljcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9KQ2gzYVc1a2IzY3BMbTkxZEdWeVYybGtkR2dvS1NBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeUlDNWhaMlZ1ZEhNdGMyeHBaR1Z5WDE5cGRHVnRKeWt1YjJabUtDZGpiR2xqYXljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10WVdkbGJuUnpMWE5zYVdSbGNqcHViM1FvTG5Oc2FXTnJMV2x1YVhScFlXeHBlbVZrS1NjcExuTnNhV05yS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZkSE02SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKeWIzZHpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Wm1sdWFYUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRhRzkzT2lBeExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRZM0p2Ykd3NklERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWlc1MFpYSk5iMlJsT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWdWRHVnlVR0ZrWkdsdVp6b2dKekkxSlNjc1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNsQmhaR1JwYm1jNklDYzRNSEI0Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZZM1Z6VDI1VFpXeGxZM1E2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjaWNwTG05dUtDZGhablJsY2tOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnYzJ4cFkyc3NJR04xY25KbGJuUlRiR2xrWlNrZ2UxeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloemJHbGpheWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG1acGJtUW9KeTVmWVdOMGFYWmxKeWt1Y21WdGIzWmxRMnhoYzNNb0oxOWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYzJ4cFkyc3VKSE5zYVdSbGMxdGpkWEp5Wlc1MFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUVdkbGJuUnpVSEpsYzJWdWRHRjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFoyVnVkSE10YzJ4cFpHVnlMbk5zYVdOckxXbHVhWFJwWVd4cGVtVmtKeWt1YzJ4cFkyc29KM1Z1YzJ4cFkyc25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVwZEVGblpXNTBjMUJ5WlhObGJuUmhkR2x2YmlncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBRV2RsYm5SelVISmxjMlZ1ZEdGMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2drS0hkcGJtUnZkeWt1YjNWMFpYSlhhV1IwYUNncElENDlJR0Z3Y0VOdmJtWnBaeTVpY21WaGEzQnZhVzUwTG0xa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFoyVnVkSE10YzJ4cFpHVnlJQzVoWjJWdWRITXRjMnhwWkdWeVgxOXBkR1Z0SnlrdWIyNG9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1d1lYSmxiblFvS1M1bWFXNWtLQ2N1WDJGamRHbDJaU2NwTG5KbGJXOTJaVU5zWVhOektDZGZZV04wYVhabEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbUZrWkVOc1lYTnpLQ2RmWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUkJaMlZ1ZEhOUWNtVnpaVzUwWVhScGIyNG9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSE5sZEVGblpXNTBjMUJ5WlhObGJuUmhkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0pDZ25MbXB6TFdGblpXNTBjeTF6Ykdsa1pYSW5LUzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUNSaFoyVnVkQ0E5SUNRb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeUlDNWZZV04wYVhabElDNXFjeTFoWjJWdWRITXRjMnhwWkdWeVgxOXphRzl5ZENjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKR1oxYkd3Z1BTQWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjbDlmWm5Wc2JDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtablZzYkM1bWFXNWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjbDlmWm5Wc2JGOWZhVzFuSnlrdVlYUjBjaWduYzNKakp5d2dKR0ZuWlc1MExtUmhkR0VvSjJGblpXNTBMV2x0WnljcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pHWjFiR3d1Wm1sdVpDZ25MbXB6TFdGblpXNTBjeTF6Ykdsa1pYSmZYMloxYkd4ZlgyNWhiV1VuS1M1MFpYaDBLQ1JoWjJWdWRDNWtZWFJoS0NkaFoyVnVkQzF1WVcxbEp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0dodmJtVWdQU0FrWVdkbGJuUXVaR0YwWVNnbllXZGxiblF0Y0dodmJtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKR1oxYkd3dVptbHVaQ2duTG1wekxXRm5aVzUwY3kxemJHbGtaWEpmWDJaMWJHeGZYM0JvYjI1bElHRW5LUzUwWlhoMEtIQm9iMjVsS1M1aGRIUnlLQ2RvY21WbUp5d2dKM1JsYkRvbklDc2djR2h2Ym1VdWNtVndiR0ZqWlNndld5MWNYSE1vS1Ywdlp5d2dKeWNwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWhhV3dnUFNBa1lXZGxiblF1WkdGMFlTZ25ZV2RsYm5RdGJXRnBiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrWm5Wc2JDNW1hVzVrS0NjdWFuTXRZV2RsYm5SekxYTnNhV1JsY2w5ZlpuVnNiRjlmYldGcGJDQmhKeWt1ZEdWNGRDaHRZV2xzS1M1aGRIUnlLQ2RvY21WbUp5d2dKMjFoYVd4MGJ6b25JQ3NnYldGcGJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIxY213Z1BTQWtZV2RsYm5RdVpHRjBZU2duWVdkbGJuUXRkWEpzSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSbWRXeHNMbVpwYm1Rb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeVgxOW1kV3hzWDE5MWNtd2dZU2NwTG1GMGRISW9KMmh5WldZbkxDQjFjbXdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRZV2RsYm5SekxYTnNhV1JsY2w5ZmRYSnNKeWt1WVhSMGNpZ25hSEpsWmljc0lIVnliQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YVhSTlpXNTFLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxdFpXNTFMWFJ2WjJkc1pYSW5LUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvY21WbUlEMGdKQ2gwYUdsektTNWhkSFJ5S0Nkb2NtVm1KeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXRaVzUxTFhSdloyZHNaWEpiYUhKbFpqMWNJaWNnS3lCb2NtVm1JQ3NnSjF3aVhTY3BMblJ2WjJkc1pVTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb2FISmxaaWt1ZEc5bloyeGxRMnhoYzNNb0oxOWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFcxbGJuVXVYMkZqZEdsMlpTY3BMbXhsYm1kMGFDQTlQU0F3SUQ4Z0pDZ25MbXB6TFcxbGJuVXRiM1psY214aGVTY3BMbWhwWkdVb0tTQTZJQ1FvSnk1cWN5MXRaVzUxTFc5MlpYSnNZWGtuS1M1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMVzFsYm5VdGIzWmxjbXhoZVNjcExtOXVLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF0Wlc1MUxYUnZaMmRzWlhJc0lDNXFjeTF0Wlc1MUp5a3VjbVZ0YjNabFEyeGhjM01vSjE5aFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpLUzVvYVdSbEtDbGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXVnVkUzF6WldOdmJtUXRkRzluWjJ4bGNpY3BMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1MGIyZG5iR1ZEYkdGemN5Z25YMkZqZEdsMlpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXVnVkUzF6WldOdmJtUW5LUzUwYjJkbmJHVkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHVhWFJOWVhOcktDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF0WVhOclgxOTBaV3duS1M1cGJuQjFkRzFoYzJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYTnJPaUFuS3prZ0tEazVPU2tnT1RrNUxUazVMVGs1SjF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUVsdWNIVjBiV0Z6YXk1bGVIUmxibVJCYkdsaGMyVnpLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKMjUxYldWeWFXTW5PaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRYUnZWVzV0WVhOck9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkMDFoYzJ0UGJraHZkbVZ5T2lCbVlXeHpaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKaFpHbDRVRzlwYm5RNklGd2lMRndpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozSnZkWEJUWlhCaGNtRjBiM0k2SUZ3aUlGd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsbmFYUnpPaUF3TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXeHNiM2ROYVc1MWN6b2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2UjNKdmRYQTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEVGc2FXZHVPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YldGemEwRnpUblZ0WW1WeU9pQjBjblZsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZmJuVnRaWEpwWXljcExtbHVjSFYwYldGemF5aGNJbTUxYldWeWFXTmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFcxaGMydGZYMk4xY25KbGJtTjVKeWt1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFabVpwZURvZ0o4S2cwWURSZzlDeExpZGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXRnphMTlmYzNGMVlYSmxKeWt1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFabVpwZURvZ0o4S2cwTHpDc2lkY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10YldGemExOWZjM0YxWVhKbFgyWnBiSFJsY2ljcExtbHVjSFYwYldGemF5aGNJbTUxYldWeWFXTmNJaXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFYZzZJQ2ZDb05DOHdySW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFibTFoYzJ0QmMwNTFiV0psY2pvZ1ptRnNjMlZjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZlkzVnljbVZ1WTNsZlptbHNkR1Z5SnlrdWFXNXdkWFJ0WVhOcktGd2liblZ0WlhKcFkxd2lMQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4xWm1acGVEb2dKOEtnMFlEUmc5Q3hMaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ1YldGemEwRnpUblZ0WW1WeU9pQm1ZV3h6WlZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF0WVhOclgxOWhaMlVuS1M1cGJuQjFkRzFoYzJzb1hDSnVkVzFsY21salhDSXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZtWm1sNE9pQW53cURRdTlDMTBZSW5YSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXMWhjMnRmWDNCbGNtTmxiblFuS1M1cGJuQjFkRzFoYzJzb1hDSnVkVzFsY21salhDSXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZtWm1sNE9pQW5KU2RjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZlkzVnljbVZ1WTNrc0lDNXFjeTF0WVhOclgxOXpjWFZoY21Vc0lDNXFjeTF0WVhOclgxOXdaWEpqWlc1MEp5a3ViMjRvSjJKc2RYSW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHNWxaV1FnWm05eUlISmxiVzkyWlNCemRXWm1hWGhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDFKdlltbHVTR1Z5WW05MGN5OUpibkIxZEcxaGMyc3ZhWE56ZFdWekx6RTFOVEZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhZZ1BTQWtLSFJvYVhNcExuWmhiQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpQTlQU0F3SUh4OElIWWdQVDBnSnljcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VkbUZzS0NjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHVhWFJRYjNCMWNDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlVOc1lYTnpPaUFuWDNCdmNIVndKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWFYwYjBadlkzVnpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1luUnVWSEJzT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiV0ZzYkVKMGJqb2dKenh6Y0dGdUlHUmhkR0V0Wm1GdVkzbGliM2d0WTJ4dmMyVWdZMnhoYzNNOVhDSm1ZVzVqZVdKdmVDMWpiRzl6WlMxemJXRnNiRndpUGp4emNHRnVJR05zWVhOelBWd2liR2x1YTF3aVB0Q1gwTERRdXRHQTBZdlJndEdNUEM5emNHRnVQand2YzNCaGJqNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxYQnZjSFZ3SnlrdWIyNG9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrTG1aaGJtTjVZbTk0TG1Oc2IzTmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTa3VabUZ1WTNsaWIzZ29iM0IwYVc5dWN5azdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b1lYTm9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lBa1kyNTBJRDBnSkNoM2FXNWtiM2N1Ykc5allYUnBiMjR1YUdGemFDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2drWTI1MExteGxibWQwYUNBbUppQWtZMjUwTG1oaGMwTnNZWE56S0Nkd2IzQjFjQzFqYm5RbktTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkM1bVlXNWplV0p2ZUM1dmNHVnVLQ1JqYm5Rc0lHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUlRaV3hsWTNRb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2MyVnNaV04wTWx4eVhHNGdJQ0FnSUNBZ0lDUXVabTR1YzJWc1pXTjBNaTVrWldaaGRXeDBjeTV6WlhRb1hDSjBhR1Z0WlZ3aUxDQmNJbU4xYzNSdmJWd2lLVHRjY2x4dUlDQWdJQ0FnSUNBa0xtWnVMbk5sYkdWamRESXVaR1ZtWVhWc2RITXVjMlYwS0Z3aWJXbHVhVzExYlZKbGMzVnNkSE5HYjNKVFpXRnlZMmhjSWl3Z1NXNW1hVzVwZEhrcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpaV3hsWTNReUp5a3VjMlZzWldOME1pZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNRb2QybHVaRzkzS1M1dmJpZ25jbVZ6YVhwbEp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMlZzWldOME1pY3BMbk5sYkdWamRESW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1THk4Z0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUXlKeWt1YzJWc1pXTjBNaWduYjNCbGJpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNRb1hDSXVhbk10WVdkbGJuUXRjMlZoY21Ob1hDSXBMbk5sYkdWamRESW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR1Z0WlRvZ0oyRm5aVzUwY3ljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUFuTVRBd0pTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhibWQxWVdkbE9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRGUnZiMU5vYjNKME9pQm1kVzVqZEdsdmJpQW9ZU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmNJdENmMEw3UXR0Q3cwTHZSZzlDNTBZSFJndEN3TENEUXN0Q3kwTFhRdE5DNDBZTFF0U0JjSWlBcklDaGhMbTFwYm1sdGRXMGdMU0JoTG1sdWNIVjBMbXhsYm1kMGFDa2dLeUJjSWlEUXVOQzcwTGdnMExIUXZ0QzcwWXpSaU5DMUlOR0IwTGpRdk5DeTBMN1F1OUMrMExKY0lseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZV3BoZURvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzT2lCY0ltaDBkSEJ6T2k4dllYQnBMbTE1YW5OdmJpNWpiMjB2WW1sdWN5OXZhM2wyYVZ3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZSNWNHVTZJQ2RxYzI5dUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdGNU9pQXlOVEFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJtZFc1amRHbHZiaUFvY0dGeVlXMXpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjVG9nY0dGeVlXMXpMblJsY20wc0lDOHZJSE5sWVhKamFDQjBaWEp0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGamRHbHZiam9nSjJGblpXNTBYM05sWVhKamFDZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIyTmxjM05TWlhOMWJIUnpPaUJtZFc1amRHbHZiaUFvWkdGMFlTa2dlMXh5WEc0dkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RITWdQU0FrTG0xaGNDaGtZWFJoTENCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUd0bGVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJR3RsZVN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklIWmhiSFZsTG5CaFoyVjBhWFJzWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZuWlc1ME9pQjJZV3gxWlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29jbVZ6ZFd4MGN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3pvZ2NtVnpkV3gwY3l4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oWTJobE9pQjBjblZsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxVbVZ6ZFd4ME9pQm1iM0p0WVhSU1pYTjFiSFFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxVMlZzWldOMGFXOXVPaUJtYjNKdFlYUlRaV3hsWTNScGIyNHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnpZMkZ3WlUxaGNtdDFjRG9nWm5WdVkzUnBiMjRnS0cxaGNtdDFjQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGNtdDFjRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTHk4Z2JHVjBJRzkxY2lCamRYTjBiMjBnWm05eWJXRjBkR1Z5SUhkdmNtdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXbHVhVzExYlVsdWNIVjBUR1Z1WjNSb09pQXpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWGhwYlhWdFUyVnNaV04wYVc5dVRHVnVaM1JvT2lBeExGeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWnZjbTFoZEZKbGMzVnNkQ2hwZEdWdEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwZEdWdExteHZZV1JwYm1jcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW4wTC9RdnRDNDBZSFF1dUtBcGljN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2M4WkdsMklHTnNZWE56UFZ3aWMyVnNaV04wTWkxeVpYTjFiSFF0WVdkbGJuUmNJajQ4YzNSeWIyNW5QaWNnSzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcwdVlXZGxiblF1Y0dGblpYUnBkR3hsSUNzZ0p6d3ZjM1J5YjI1blBqeGljajRuSUNzZ2FYUmxiUzVoWjJWdWRDNTJZV3gxWlNBcklDYzhMMlJwZGo0bk8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCbWIzSnRZWFJUWld4bFkzUnBiMjRvYVhSbGJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYUmxiUzVoWjJWdWRDNXdZV2RsZEdsMGJHVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFoyVnVkQzF6WldGeVkyZ25LUzV2YmlnbmMyVnNaV04wTWpwelpXeGxZM1FuTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR1V1Y0dGeVlXMXpMbVJoZEdFN1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29aR0YwWVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVzYjJOaGRHbHZiaUE5SUdSaGRHRXVZV2RsYm5RdWRYSnBYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdablZ1WTNScGIyNGdhVzVwZEZaaGJHbGtZWFJsS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ1F1ZG1Gc2FXUmhkRzl5TG1Ga1pFMWxkR2h2WkNoY0luQm9iMjVsWENJc0lHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z1pXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXZjSFJwYjI1aGJDaGxiR1Z0Wlc1MEtTQjhmQ0F2WGx4Y0sxeGNaRnhjYzF4Y0tGeGNaSHN6ZlZ4Y0tWeGNjMXhjWkhzemZTMWNYR1I3TW4wdFhGeGtleko5SkM4dWRHVnpkQ2gyWVd4MVpTazdYSEpjYmlBZ0lDQWdJQ0FnZlN3Z1hDSlFiR1ZoYzJVZ2MzQmxZMmxtZVNCaElIWmhiR2xrSUcxdlltbHNaU0J1ZFcxaVpYSmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVVHeGhZMlZ0Wlc1ME9pQm1kVzVqZEdsdmJpQW9aWEp5YjNJc0lHVnNaVzFsYm5RcElIdDlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkV3hsY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR2h2Ym1VNklGd2ljR2h2Ym1WY0lseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10ZG1Gc2FXUmhkR1VuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpLUzUyWVd4cFpHRjBaU2h2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFVtVmhiSFI1Um1sc2RHVnljeWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFptbHNkR1Z5Y3kxeVpXRnNkSGt0ZEhsd1pTY3BMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFdacGJIUmxjbk10Y21WaGJIUjVMWFJwZEd4bEp5a3VkR1Y0ZENna0tIUm9hWE1wTG1SaGRHRW9KMlpwYkhSbGNuTXRkR2wwYkdVbktTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdablZ1WTNScGIyNGdhVzVwZEZCaGMzTjNiM0prS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNna0tDY3Vhbk10Y0dGemMzZHZjbVFuS1M1c1pXNW5kR2dnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZaSEp2Y0dKdmVDOTZlR04yWW01Y2NseHVJQ0FnSUNBZ0lDQWtMbUZxWVhnb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJRndpTGk5cWN5OXNhV0p6TDNwNFkzWmliaTVxYzF3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhWSGx3WlRvZ1hDSnpZM0pwY0hSY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1U2SUhSeWRXVmNjbHh1SUNBZ0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtUnZibVVvWm5WdVkzUnBiMjRnS0hOamNtbHdkQ3dnZEdWNGRGTjBZWFIxY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVabUZwYkNobWRXNWpkR2x2YmlBb2FuRjRhSElzSUhObGRIUnBibWR6TENCbGVHTmxjSFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25SWEp5YjNJZ2JHOWhaR2x1WnlCNmVHTjJZbTRuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnBibWwwS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10Y0dGemMzZHZjbVFuS1M1dmJpZ25hMlY1ZFhBbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlDaDZlR04yWW00cElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd3Z1BTQWtLSFJvYVhNcExuWmhiQ2dwTG5SeWFXMG9LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeklEMGdlbmhqZG1KdUtIWmhiQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdWRDQTlJQ1FvZEdocGN5a3VjMmxpYkdsdVozTW9KeTVwYm5CMWRDMW9aV3h3SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiblF1Y21WdGIzWmxRMnhoYzNNb0oxOHdJRjh4SUY4eUlGOHpJRjgwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc0xteGxibWQwYUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdWRDNWhaR1JEYkdGemN5Z25YeWNnS3lCeVpYTXVjMk52Y21VcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0dkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aHlaWE11YzJOdmNtVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYQmhjM04zYjNKa0p5a3VhMlY1ZFhBb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNXBkRkpsZG1sbGQzTlRiR2xrWlhJb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlDUnpiR2xrWlhJZ1BTQWtLQ2N1YW5NdGMyeHBaR1Z5TFhKbGRtbGxkM01uS1R0Y2NseHVJQ0FnSUNBZ0lDQWtjMnhwWkdWeUxuTnNhV05yS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5MGN6b2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKeWIzZHpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNW1hVzVwZEdVNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMmh2ZHpvZ015eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOWpkWE5QYmxObGJHVmpkRG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lXUmhjSFJwZG1WSVpXbG5hSFE2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZkSE5EYkdGemN6b2dKM05zYVdOckxXUnZkSE1nWDJKcFp5Y3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM0J2Ym5OcGRtVTZJRnRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGEzQnZhVzUwT2lCaGNIQkRiMjVtYVdjdVluSmxZV3R3YjJsdWRDNXNaeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bmN6b2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5vYjNjNklERmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnSkdKcFp5QTlJQ1FvSnk1eVpYWnBaWGR6WDE5c2FYTjBMbDlpYVdjZ0xuSmxkbWxsZDNOZlgyeHBjM1JmWDJsMFpXMG5LVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZM1Z5Y21WdWRDQTlJREE3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ1JpYVdjdWJHVnVaM1JvSUNZbUlDUnpiR2xrWlhJdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRFSnBaeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrYzJ4cFpHVnlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtOXVLQ2RpWldadmNtVkRhR0Z1WjJVbkxDQm1kVzVqZEdsdmJpQW9aWFpsYm5Rc0lITnNhV05yTENCamRYSnlaVzUwVTJ4cFpHVXNJRzVsZUhSVGJHbGtaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5Y21WdWRGTnNhV1JsSUNFOUlHNWxlSFJUYkdsa1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpDYVdjb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBJRDBnWTNWeWNtVnVkRk5zYVdSbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG05dUtDZGhablJsY2tOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnYzJ4cFkyc3NJR04xY25KbGJuUlRiR2xrWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRk5zYVdSbElDRTlJR04xY25KbGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRUpwWnlncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHTnNaV0Z5UW1sbktDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtZbWxuTG1aaFpHVlBkWFFvS1M1bGJYQjBlU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6WlhSQ2FXY29LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpiR2xrWlhJdGNtVjJhV1YzY3lBdWMyeHBZMnN0WTNWeWNtVnVkQ0F1Y21WMmFXVjNjMTlmYkdsemRGOWZhWFJsYlY5ZmFXNXVaWEluS1M1amJHOXVaU2dwTG1Gd2NHVnVaRlJ2S0NSaWFXY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtZbWxuTG1aaFpHVkpiaWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrWW1sbkxuQmhjbVZ1ZENncExtTnpjeWduYUdWcFoyaDBKeXdnSkdKcFp5NXZkWFJsY2tobGFXZG9kQ2gwY25WbEtTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHVhWFJTWldGc2RIa29LU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDUW9aRzlqZFcxbGJuUXBMbTl1S0Nkd1pHOXdZV2RsWDJ4dllXUW5MQ0JtZFc1amRHbHZiaUFvWlN3Z1kyOXVabWxuTENCeVpYTndiMjV6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtbDBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNoa2IyTjFiV1Z1ZENrdWIyNG9KMjF6WlRKZmJHOWhaQ2NzSUdaMWJtTjBhVzl1SUNobExDQmtZWFJoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWFYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJwYm1sMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGNtVmhiSFI1TFd4cGMzUXRjMnhwWkdWeVcyUmhkR0V0YVc1cGREMWNJbVpoYkhObFhDSmRKeWt1WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKSFJ2WjJkc1pYSnpJRDBnSkNoMGFHbHpLUzVtYVc1a0tDY3Vhbk10Y21WaGJIUjVMV3hwYzNRdGMyeHBaR1Z5WDE5cGJXY3RkM0poY0hCbGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlDUmpiM1Z1ZEdWeUlEMGdKQ2gwYUdsektTNW1hVzVrS0NjdWFuTXRjbVZoYkhSNUxXeHBjM1F0YzJ4cFpHVnlYMTlqYjNWdWRHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2RHOW5aMnhsY25NdVpXRmphQ2htZFc1amRHbHZiaUFvYVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeWt1YjI0b0oyMXZkWE5sYjNabGNpY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUnZaMmRzWlhKekxuSmxiVzkyWlVOc1lYTnpLQ2RmWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeWt1WVdSa1EyeGhjM01vSjE5aFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHTnZkVzUwWlhJdWRHVjRkQ2hwSUNzZ01TazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3lrdVpHRjBZU2duYVc1cGRDY3NJQ2QwY25WbEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnBibWwwVW1GdVoyVW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFhKaGJtZGxKeWt1WldGamFDaG1kVzVqZEdsdmJpQW9hVzVrWlhnc0lHVnNaVzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITnNhV1JsY2lBOUlDUW9aV3hsYlNrdVptbHVaQ2duTG1wekxYSmhibWRsWDE5MFlYSm5aWFFuS1Zzd1hTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FXNXdkWFJ6SUQwZ0pDaGxiR1Z0S1M1bWFXNWtLQ2RwYm5CMWRDY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjBnUFNBa2FXNXdkWFJ6TG1acGNuTjBLQ2xiTUYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4Z1BTQWthVzV3ZFhSekxteGhjM1FvS1Zzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5zYVdSbGNpQW1KaUJtY205dElDWW1JSFJ2S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldsdUlEMGdjR0Z5YzJWSmJuUW9abkp2YlM1MllXeDFaU2tnZkh3Z01DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0SUQwZ2NHRnljMlZKYm5Rb2RHOHVkbUZzZFdVcElIeDhJREE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIxVnBVMnhwWkdWeUxtTnlaV0YwWlNoemJHbGtaWElzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWREb2dXMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVc0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVibVZqZERvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlZVzVuWlRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5iV2x1SnpvZ2JXbHVMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYldGNEp6b2diV0Y0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzI1aGNGWmhiSFZsY3lBOUlGdG1jbTl0TENCMGIxMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYSXVibTlWYVZOc2FXUmxjaTV2YmlnbmRYQmtZWFJsSnl3Z1puVnVZM1JwYjI0Z0tIWmhiSFZsY3l3Z2FHRnVaR3hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI1aGNGWmhiSFZsYzF0b1lXNWtiR1ZkTG5aaGJIVmxJRDBnVFdGMGFDNXliM1Z1WkNoMllXeDFaWE5iYUdGdVpHeGxYU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyaGhibWRsSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsY2k1dWIxVnBVMnhwWkdWeUxuTmxkQ2hiZEdocGN5NTJZV3gxWlN3Z2JuVnNiRjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z5TG01dlZXbFRiR2xrWlhJdWMyVjBLRnR1ZFd4c0xDQjBhR2x6TG5aaGJIVmxYU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNna0tHVnNaVzBwTG1oaGMwTnNZWE56S0NkcWN5MWphR1Z6Y3kxeVlXNW5aU2NwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnlMbTV2VldsVGJHbGtaWEl1YjI0b0oyVnVaQ2NzSUdaMWJtTjBhVzl1SUNoMllXeDFaWE1zSUdoaGJtUnNaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDZGJibUZ0WlQxY0luQnlhV05sWDIxaGVGd2lYU2NwTG5SeWFXZG5aWElvSjJOb1lXNW5aU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MXdhV05yWlhJbktTNWxZV05vS0daMWJtTjBhVzl1SUNocGJtUmxlQ3dnWld4bGJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJ4cFpHVnlJRDBnSkNobGJHVnRLUzVtYVc1a0tDY3Vhbk10Y0dsamEyVnlYMTkwWVhKblpYUW5LVnN3WFN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRDQTlJQ1FvWld4bGJTa3VabWx1WkNnbkxtcHpMWEJwWTJ0bGNsOWZhVzV3ZFhRbktWc3dYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOc2FXUmxjaUFtSmlCcGJuQjFkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzFwYmlBOUlIQmhjbk5sU1c1MEtHbHVjSFYwTG1kbGRFRjBkSEpwWW5WMFpTZ25iV2x1SnlrcElIeDhJREFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVDQTlJSEJoY25ObFNXNTBLR2x1Y0hWMExtZGxkRUYwZEhKcFluVjBaU2duYldGNEp5a3BJSHg4SURBc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiQ0E5SUhCaGNuTmxTVzUwS0dsdWNIVjBMblpoYkhWbEtTQjhmQ0J0YVc0N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMVZwVTJ4cFpHVnlMbU55WldGMFpTaHpiR2xrWlhJc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRG9nZG1Gc0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtNWxZM1E2SUZ0MGNuVmxMQ0JtWVd4elpWMHNYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhRNklIdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3WVhKelpVbHVkQ2gyWVd4MVpTazdYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0T2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbUZ1WjJVNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjFwYmljNklHMXBiaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjIxaGVDYzZJRzFoZUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWeUxtNXZWV2xUYkdsa1pYSXViMjRvSjNWd1pHRjBaU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzUyWVd4MVpTQTlJSE5zYVdSbGNpNXViMVZwVTJ4cFpHVnlMbWRsZENncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb1pXeGxiU2t1Wm1sdVpDZ25MbXB6TFhCcFkydGxjbDlmYVc1d2RYUW5LUzUwY21sbloyVnlLQ2RqYUdGdVoyVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldGemF5QTlJR2x1Y0hWMExtbHVjSFYwYldGemF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iV0Z6YXlBbUppQnBibkIxZEM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb0oycHpMVzFoYzJ0ZlgyRm5aU2NwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6ZFdabWFYZ2dQU0JuWlhST2RXMUZibVJwYm1jb2NHRnljMlZKYm5Rb2MyeHBaR1Z5TG01dlZXbFRiR2xrWlhJdVoyVjBLQ2twTENCYko4S2cwTFBRdnRDMEp5d2dKOEtnMExQUXZ0QzAwTEFuTENBbndxRFF1OUMxMFlJblhTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoYzJzdWIzQjBhVzl1S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWm1acGVEb2djM1ZtWm1sNFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjaTV1YjFWcFUyeHBaR1Z5TG5ObGRDaDBhR2x6TG5aaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNXBkRWRoYkd4bGNua29LU0I3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFdkaGJHeGxjbmt0Ym1GMkp5a3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2R6T2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVpwYm1sMFpUb2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJodmR6b2dOaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRZM0p2Ykd3NklERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZZM1Z6VDI1VFpXeGxZM1E2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnpUbUYyUm05eU9pQW5MbXB6TFdkaGJHeGxjbmxmWDNOc2FXUmxjaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTnBkbVU2SUZ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhM0J2YVc1ME9pQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzV0WkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJRE5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjBzWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMV2RoYkd4bGNua25LUzVsWVdOb0tHWjFibU4wYVc5dUlDaHBMQ0JsYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKSE5zYVdSbGNpQTlJQ1FvWld3cExtWnBibVFvSnk1cWN5MW5ZV3hzWlhKNVgxOXpiR2xrWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJQ1JqZFhKeVpXNTBJRDBnSkNobGJDa3VabWx1WkNnbkxtcHpMV2RoYkd4bGNubGZYMk4xY25KbGJuUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKSE5zYVdSbGNpNXpiR2xqYXloN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtiM1J6T2lCbVlXeHpaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNtOTNjem9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Wm1sdWFYUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwY0dWVWIxTnNhV1JsT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhOT1lYWkdiM0k2SUNjdWFuTXRaMkZzYkdWeWVTMXVZWFluTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJsMlpUb2dXMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0d2IybHVkRG9nWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJXUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDNNNklHWmhiSE5sWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pITnNhV1JsY2k1dmJpZ25ZV1owWlhKRGFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb1pYWmxiblFzSUhOc2FXTnJMQ0JqZFhKeVpXNTBVMnhwWkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JqZFhKeVpXNTBMblJsZUhRb0t5dGpkWEp5Wlc1MFUyeHBaR1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlDUnNhVzVyY3lBOUlDUnpiR2xrWlhJdVptbHVaQ2duTG5Oc2FXUmxPbTV2ZENndWMyeHBZMnN0WTJ4dmJtVmtLU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0dWc0tTNW1hVzVrS0NjdWFuTXRaMkZzYkdWeWVWOWZkRzkwWVd3bktTNTBaWGgwS0NSc2FXNXJjeTVzWlc1bmRHZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtiR2x1YTNNdWIyNG9KMk5zYVdOckp5d2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0xtWmhibU41WW05NExtOXdaVzRvSUNSc2FXNXJjeXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2YjNBNklIUnlkV1ZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lDUnNhVzVyY3k1cGJtUmxlQ2dnZEdocGN5QXBJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJTkNrMFlQUXZkQzYwWWJRdU5HUElOQ3kwTDdRdDlDeTBZRFFzTkdKMExEUXRkR0NJTkMrMExyUXZ0QzkwWWZRc05DOTBMalF0U0RRdE5DNzBZOGcwTHpRdmRDKzBMYlF0ZEdCMFlMUXN0QzEwTDNRdmRDKzBMUFF2aURSaDlDNDBZSFF1OUN3SU5HQjBMdlF2dEN5MExBZzBMM1FzQ0RRdnRHQjBMM1F2dEN5MExEUXZkQzQwTGdnMFlmUXVOR0IwTHZRc0NEUXVDRFF2TkN3MFlIUmdkQzQwTExRc0NEUXZ0QzYwTDdRdmRHSDBMRFF2ZEM0MExsY2NseHVJQ0FnSUNBcUlIQmhjbUZ0SUNCcFRuVnRZbVZ5SUVsdWRHVm5aWElnMEtmUXVOR0IwTHZRdmlEUXZkQ3dJTkMrMFlIUXZkQyswTExRdFNEUXV0QyswWUxRdnRHQTBMN1FzOUMrSU5DOTBZUFF0dEM5MEw0ZzBZSFJoTkMrMFlEUXZOQzQwWURRdnRDeTBMRFJndEdNSU5DKzBMclF2dEM5MFlmUXNOQzkwTGpRdFZ4eVhHNGdJQ0FnSUNvZ2NHRnlZVzBnSUdGRmJtUnBibWR6SUVGeWNtRjVJTkNjMExEUmdkR0IwTGpRc2lEUmdkQzcwTDdRc2lEUXVOQzcwTGdnMEw3UXV0QyswTDNSaDlDdzBMM1F1TkM1SU5DMDBMdlJqeURSaDlDNDBZSFF0ZEM3SUNneExDQTBMQ0ExS1N4Y2NseHVJQ0FnSUNBcUlDQWdJQ0FnSUNBZzBMM1FzTkMvMFlEUXVOQzgwTFhSZ0NCYko5R1AwTEhRdTlDKzBMclF2aWNzSUNmUmo5Q3gwTHZRdnRDNjBMQW5MQ0FuMFkvUXNkQzcwTDdRdWlkZFhISmNiaUFnSUNBZ0tpQnlaWFIxY200Z1UzUnlhVzVuWEhKY2JpQWdJQ0FnS2lCY2NseHVJQ0FnSUNBcUlHaDBkSEJ6T2k4dmFHRmljbUZvWVdKeUxuSjFMM0J2YzNRdk1UQTFOREk0TDF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCbWRXNWpkR2x2YmlCblpYUk9kVzFGYm1ScGJtY29hVTUxYldKbGNpd2dZVVZ1WkdsdVozTXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMFZ1WkdsdVp5d2dhVHRjY2x4dUlDQWdJQ0FnSUNCcFRuVnRZbVZ5SUQwZ2FVNTFiV0psY2lBbElERXdNRHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9hVTUxYldKbGNpQStQU0F4TVNBbUppQnBUblZ0WW1WeUlEdzlJREU1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhORmJtUnBibWNnUFNCaFJXNWthVzVuYzFzeVhUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBJRDBnYVU1MWJXSmxjaUFsSURFd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0drcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnS0RFcE9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhORmJtUnBibWNnUFNCaFJXNWthVzVuYzFzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdLRElwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FvTXlrNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNnMEtUcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelJXNWthVzVuSUQwZ1lVVnVaR2x1WjNOYk1WMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5GYm1ScGJtY2dQU0JoUlc1a2FXNW5jMXN5WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMFZ1WkdsdVp6dGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFNIbHdiM1JvWldNb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMV2g1Y0c5MGFHVmpKeWt1WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lBa1kyOXpkQ0E5SUNRb2RHaHBjeWt1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5amIzTjBKeWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl6ZENBOUlDUmpiM04wTG5aaGJDZ3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUndZWGx0Wlc1MFVHVnlZMlZ1ZENBOUlDUW9kR2hwY3lrdVptbHVaQ2duTG1wekxXaDVjRzkwYUdWalgxOXdZWGx0Wlc1MExYQmxjbU5sYm5RbktTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2NHRjViV1Z1ZEZOMWJTQTlJQ1FvZEdocGN5a3VabWx1WkNnbkxtcHpMV2g1Y0c5MGFHVmpYMTl3WVhsdFpXNTBMWE4xYlNjcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSd1lYbHRaVzUwVTNWdFVHbGphMlZ5SUQwZ0pDaDBhR2x6S1M1bWFXNWtLQ2N1YW5NdGNHbGphMlZ5WDE5MFlYSm5aWFFuS1Zzd1hTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa1lXZGxJRDBnSkNoMGFHbHpLUzVtYVc1a0tDY3Vhbk10YUhsd2IzUm9aV05mWDJGblpTY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUmpjbVZrYVhRZ1BTQWtLSFJvYVhNcExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZZM0psWkdsMEp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pITnNhV1JsY2lBOUlDUW9kR2hwY3lrdVptbHVaQ2duTG1wekxXaDVjRzkwYUdWalgxOXpiR2xrWlhJbktTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE1nUFNBa0tIUm9hWE1wTG1acGJtUW9KeTVxY3kxb2VYQnZkR2hsWTE5ZmFYUmxiU2NwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J6WTNKdmJHd2dQU0FrS0hSb2FYTXBMbVpwYm1Rb0p5NXFjeTFvZVhCdmRHaGxZMTlmYzJOeWIyeHNKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVlYUmxJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNScGRHVnRjeTVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKaGRHVXVjSFZ6YUNod1lYSnpaVVpzYjJGMEtDUW9kR2hwY3lrdVptbHVaQ2duTG1wekxXaDVjRzkwYUdWalgxOXlZWFJsSnlrdWRHVjRkQ2dwTG5KbGNHeGhZMlVvWENJc1hDSXNJRndpTGx3aUtTa2dmSHdnTUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LSEpoZEdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbUYwWlUxRklEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1JwZEdWdGN5NWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpoZEdWTlJTNXdkWE5vS0hCaGNuTmxSbXh2WVhRb0pDaDBhR2x6S1M1bWFXNWtLQ2N1YW5NdGFIbHdiM1JvWldOZlgzSmhkR1ZOUlNjcExuUmxlSFFvS1M1eVpYQnNZV05sS0Z3aUxGd2lMQ0JjSWk1Y0lpa3BJSHg4SURBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh5WVhSbFRVVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTNKbFpHbDBJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRm5aU0E5SUNSaFoyVXVkbUZzS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQndaWEpqWlc1ME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa1kyOXpkQzVwYm5CMWRHMWhjMnNvWENKdWRXMWxjbWxqWENJc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWm1acGVEb2dKOEtnMFlEUmc5Q3hMaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtTnZiWEJzWlhSbE9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl6ZENBOUlDUW9kR2hwY3lrdWRtRnNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSEJoZVcxbGJuUlRkVzB1Y0hKdmNDZ25iV0Y0Snl3Z1kyOXpkQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSEJoZVcxbGJuUlRkVzFRYVdOclpYSXVibTlWYVZOc2FXUmxjaTUxY0dSaGRHVlBjSFJwYjI1ektIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbUZ1WjJVNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkdGFXNG5PaUF3TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjFoZUNjNklHTnZjM1JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J3WVhsdFpXNTBVM1Z0TG5SeWFXZG5aWElvSjJOb1lXNW5aU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pIQmhlVzFsYm5SVGRXMHViMjRvSjJOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsY21ObGJuUWdQU0FrS0hSb2FYTXBMblpoYkNncElDb2dNVEF3SUM4Z1kyOXpkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdaWEpqWlc1MElENGdNVEF3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dWeVkyVnVkQ0E5SURFd01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG5aaGJDaGpiM04wS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR055WldScGRDQTlJR05oYkdORGNtVmthWFFvWTI5emRDd2djR1Z5WTJWdWRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrY0dGNWJXVnVkRkJsY21ObGJuUXVkbUZzS0hCbGNtTmxiblFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHTnlaV1JwZEM1MllXd29ZM0psWkdsMEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwZEdWdGN5NWxZV05vS0daMWJtTjBhVzl1SUNocExDQmxiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvWld3cExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZabWx5YzNRbktTNTBaWGgwS0dadmNtMWhkRkJ5YVdObEtDUndZWGx0Wlc1MFUzVnRMblpoYkNncEtTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGxiQ2t1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5d1pYSnRiMjUwYUNjcExuUmxlSFFvWm05eWJXRjBVSEpwWTJVb1kyRnNZMUJsY2sxdmJuUm9LR055WldScGRDd2djbUYwWlZ0cFhTd2dZV2RsS1NrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb1pXd3BMbVpwYm1Rb0p5NXFjeTFvZVhCdmRHaGxZMTlmY0dWeWJXOXVkR2hOUlNjcExuUmxlSFFvWm05eWJXRjBVSEpwWTJVb1kyRnNZMUJsY2sxdmJuUm9LR055WldScGRDd2djbUYwWlUxRlcybGRMQ0JoWjJVcEtTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGxiQ2t1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5bFkyOXViMjE1SnlrdWRHVjRkQ2htYjNKdFlYUlFjbWxqWlNoallXeGpVR1Z5VFc5dWRHZ29ZM0psWkdsMExDQnlZWFJsVzJsZExDQmhaMlVwSUNvZ01USWdLaUJoWjJVZ0xTQmpZV3hqVUdWeVRXOXVkR2dvWTNKbFpHbDBMQ0J5WVhSbFRVVmJhVjBzSUdGblpTa2dLaUF4TWlBcUlHRm5aU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtjR0Y1YldWdWRGTjFiUzVwYm5CMWRHMWhjMnNvWENKdWRXMWxjbWxqWENJc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWm1acGVEb2dKOEtnMFlEUmc5Q3hMaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtTnZiWEJzWlhSbE9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5SektDY3Vhbk10Y0dsamEyVnlKeWt1Wm1sdVpDZ25MbXB6TFhCcFkydGxjbDlmZEdGeVoyVjBKeWxiTUYwdWJtOVZhVk5zYVdSbGNpNXpaWFFvSkNoMGFHbHpLUzUyWVd3b0tTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrY0dGNWJXVnVkRk4xYlM1MGNtbG5aMlZ5S0NkamFHRnVaMlVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkdGblpTNXZiaWduWTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV2RsSUQwZ0pHRm5aUzUyWVd3b0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwZEdWdGN5NWxZV05vS0daMWJtTjBhVzl1SUNocExDQmxiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvWld3cExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZjR1Z5Ylc5dWRHZ25LUzUwWlhoMEtHWnZjbTFoZEZCeWFXTmxLR05oYkdOUVpYSk5iMjUwYUNoamNtVmthWFFzSUhKaGRHVmJhVjBzSUdGblpTa3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLR1ZzS1M1bWFXNWtLQ2N1YW5NdGFIbHdiM1JvWldOZlgzQmxjbTF2Ym5Sb1RVVW5LUzUwWlhoMEtHWnZjbTFoZEZCeWFXTmxLR05oYkdOUVpYSk5iMjUwYUNoamNtVmthWFFzSUhKaGRHVk5SVnRwWFN3Z1lXZGxLU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvWld3cExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZaV052Ym05dGVTY3BMblJsZUhRb1ptOXliV0YwVUhKcFkyVW9ZMkZzWTFCbGNrMXZiblJvS0dOeVpXUnBkQ3dnY21GMFpWdHBYU3dnWVdkbEtTQXFJREV5SUNvZ1lXZGxJQzBnWTJGc1kxQmxjazF2Ym5Sb0tHTnlaV1JwZEN3Z2NtRjBaVTFGVzJsZExDQmhaMlVwSUNvZ01USWdLaUJoWjJVcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkhOamNtOXNiQzVtYVc1a0tDY3VhSGx3YjNSb1pXTmZYMnhwYzNSZlgybDBaVzBuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2hwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLSFJvYVhNcExtWnBibVFvSjJFbktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYzJ4cFpHVnlMbk5zYVdOcktDZHpiR2xqYTBkdlZHOG5MQ0JwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWm1sc2RHVnljeXdnMExyUXNOQzIwTFRSaTlDNUlOR0IwTFhRdTlDMTBMclJnaURSaE5DNDBMdlJqTkdDMFlEUmc5QzEwWUlnMEw3Umd0QzAwTFhRdTlHTTBMM1F2bHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNSNWJHVWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpLUzVtYVc1a0tDY3Vhbk10YUhsd2IzUm9aV05mWDJacGJIUmxjaWNwTG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1pPWVcxbElEMGdKQ2gwYUdsektTNWtZWFJoS0Nkb2VYQnZkR2hsWXkxbWFXeDBaWEluS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbElEMGdKMlpwYkhSbGNpMG5JQ3NnWms1aGJXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pTNXdkWE5vS0NjdUp5QXJJR05zWVhOelRtRnRaU0FySUNkN1pHbHpjR3hoZVRwdWIyNWxJQ0ZwYlhCdmNuUmhiblI5SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnSkdOb1pXTnJZbTk0WlhNZ1BTQWtLSFJvYVhNcExtWnBibVFvSjJsdWNIVjBXM1I1Y0dVOVkyaGxZMnRpYjNoZEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrWTJobFkydGliM2hsY3k1dmJpZ25ZMmhoYm1kbEp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lBa1kyaGxZMnRsWkNBOUlDUmphR1ZqYTJKdmVHVnpMbVpwYkhSbGNpZ25PbU5vWldOclpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkdOb1pXTnJaV1F1YkdWdVozUm9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNScGRHVnRjeTV5WlcxdmRtVkRiR0Z6Y3loamJHRnpjMDVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWmlBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrWTJobFkydGxaQzVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWXVjSFZ6YUNnbk9tNXZkQ2hiWkdGMFlTMW1hV3gwWlhJdEp5QXJJQ1FvZEdocGN5a3VkbUZzS0NrZ0t5QW5YU2tuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwZEdWdGN5NW1hV3gwWlhJb0p5NXFjeTFvZVhCdmRHaGxZMTlmYVhSbGJTY2dLeUJtTG1wdmFXNG9KeWNwS1M1aFpHUkRiR0Z6Y3loamJHRnpjMDVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNScGRHVnRjeTV5WlcxdmRtVkRiR0Z6Y3loamJHRnpjMDVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duUEhOMGVXeGxQaWNnS3lCemRIbHNaUzVxYjJsdUtDY25LU0FySUNjOEwzTjBlV3hsUGljcExtRndjR1Z1WkZSdktDZG9aV0ZrSnlsY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCallXeGpVR0Y1YldWdWRDaGpiM04wTENCd1pYSmpaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtTmxhV3dvWTI5emRDQXFJSEJsY21ObGJuUWdMeUF4TURBcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCallXeGpRM0psWkdsMEtHTnZjM1FzSUhCbGNtTmxiblFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR052YzNRZ0xTQk5ZWFJvTG1ObGFXd29ZMjl6ZENBcUlIQmxjbU5sYm5RZ0x5QXhNREFwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJqWVd4alVHVnlUVzl1ZEdnb1kzSmxaR2wwTENCeVlYUmxMQ0JoWjJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZMlZwYkNoamNtVmthWFFnS2lBb0tISmhkR1VnTHlBeE1qQXdMakFwSUM4Z0tERXVNQ0F0SUUxaGRHZ3VjRzkzS0RFdU1DQXJJSEpoZEdVZ0x5QXhNakF3TGpBc0lDMG9ZV2RsSUNvZ01USXBLU2twS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWm05eWJXRjBVSEpwWTJVb2NISnBZMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5YVdObExuUnZVM1J5YVc1bktDa3VjbVZ3YkdGalpTZ3ZMaTluTENCbWRXNWpkR2x2YmlBb1l5d2dhU3dnWVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHa2dKaVlnWXlBaFBUMGdYQ0l1WENJZ0ppWWdJU2dvWVM1c1pXNW5kR2dnTFNCcEtTQWxJRE1wSUQ4Z0p5QW5JQ3NnWXlBNklHTTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGFIbHdiM1JvWldOZlgzTnNhV1JsY2ljcExuTnNhV05yS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5MGN6b2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKeWIzZHpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNW1hVzVwZEdVNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMmh2ZHpvZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VFkzSnZiR3c2SURFc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdObGJuUmxjazF2WkdVNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNsQmhaR1JwYm1jNklDY3hOWEI0Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05amRYTlBibE5sYkdWamREb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5aWFXeGxSbWx5YzNRNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTnBkbVU2SUZ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhM0J2YVc1ME9pQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzV0WkNBdElERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkwY3pvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaaFpHVTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnlZV2RuWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmxiblJsY2xCaFpHUnBibWM2SUNjd2NIZ25YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXaDVjRzkwYUdWalgxOXphRzkzTFdKMGJpY3BMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJQ1IwSUQwZ0pDaDBhR2x6S1M1d1lYSmxiblJ6S0NjdWFuTXRhSGx3YjNSb1pXTW5LUzVtYVc1a0tDY3Vhbk10YUhsd2IzUm9aV05mWDNOb2IzY3RkR0Z5WjJWMEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2drZEM1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0FrZEM1dlptWnpaWFFvS1M1MGIzQWdMU0EwTUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2drS0NjdWFHVmhaR1Z5WDE5dFlXbHVKeWt1WTNOektDZHdiM05wZEdsdmJpY3BJRDA5UFNBblptbDRaV1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBJQzA5SUNRb0p5NW9aV0ZrWlhKZlgyMWhhVzRuS1M1dmRYUmxja2hsYVdkb2RDaDBjblZsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSjJoMGJXd3NJR0p2WkhrbktTNWhibWx0WVhSbEtIdHpZM0p2Ykd4VWIzQTZJRzltWm5ObGRIMHNJRE13TUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBSR0YwWlhCcFkydGxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFpYQnBZMnRsY2xacGMybGliR1VnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZMjl0Ylc5dVQzQjBhVzl1Y3lBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZDBiM0FnYkdWbWRDY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVVMmh2ZHpvZ1puVnVZM1JwYjI0Z0tHbHVjM1FzSUdGdWFXMWhkR2x2YmtOdmJYQnNaWFJsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGdWFXMWhkR2x2YmtOdmJYQnNaWFJsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHVndhV05yWlhKV2FYTnBZbXhsSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1SWFXUmxPaUJtZFc1amRHbHZiaUFvYVc1emRDd2dZVzVwYldGMGFXOXVRMjl0Y0d4bGRHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVRMjl0Y0d4bGRHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWlhCcFkydGxjbFpwYzJsaWJHVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVUWld4bFkzUTZJR1oxYm1OMGFXOXVJQ2htYjNKdFlYUjBaV1JFWVhSbExDQmtZWFJsTENCcGJuTjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTjBMaVJsYkM1MGNtbG5aMlZ5S0NkamFHRnVaMlVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMV1JoZEdWMGFXMWxjR2xqYTJWeUp5a3VaR0YwWlhCcFkydGxjaWhQWW1wbFkzUXVZWE56YVdkdUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXbHVSR0YwWlRvZ2JtVjNJRVJoZEdVb0tTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaWEJwWTJ0bGNqb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFpWUnBiV1ZUWlhCaGNtRjBiM0k2SUNjc0lDY3NYSEpjYmlBZ0lDQWdJQ0FnZlN3Z1kyOXRiVzl1VDNCMGFXOXVjeWtwTzF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxa1lYUmxjR2xqYTJWeUxYSmhibWRsSnlrdVpXRmphQ2htZFc1amRHbHZiaUFvWld3cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzFwYmlBOUlHNWxkeUJFWVhSbEtDUW9kR2hwY3lrdVpHRjBZU2duYldsdUp5a3BJSHg4SUc1MWJHd3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRJRDBnYm1WM0lFUmhkR1VvSkNoMGFHbHpLUzVrWVhSaEtDZHRZWGduS1NrZ2ZId2dibVYzSUVSaGRHVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNWtZWFJsY0dsamEyVnlLRTlpYW1WamRDNWhjM05wWjI0b2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1UkdGMFpUb2diV2x1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRSR0YwWlRvZ2JXRjRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21GdVoyVTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRkV3gwYVhCc1pVUmhkR1Z6VTJWd1lYSmhkRzl5T2lBbklDMGdKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnWTI5dGJXOXVUM0IwYVc5dWN5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFpYQnBZMnRsY2lBOUlDUW9kR2hwY3lrdVpHRjBZU2duWkdGMFpYQnBZMnRsY2ljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmxjR2xqYTJWeUxuTmxiR1ZqZEVSaGRHVW9XMjFwYml3Z2JXRjRYU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMV1JoZEdWMGFXMWxjR2xqYTJWeUxDQXVhbk10WkdGMFpYQnBZMnRsY2kxeVlXNW5aU2NwTG05dUtDZGpiR2xqYXljc0lHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHVndhV05yWlhKV2FYTnBZbXhsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFpYQnBZMnRsY2lBOUlDUW9KeTVxY3kxa1lYUmxkR2x0WlhCcFkydGxjaXdnTG1wekxXUmhkR1Z3YVdOclpYSXRjbUZ1WjJVbktTNWtZWFJoS0Nka1lYUmxjR2xqYTJWeUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSbGNHbGphMlZ5TG1ocFpHVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YVhSVFkzSnZiR3hpWVhJb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMWE5qY205c2JHSmhjaWNwTG5OamNtOXNiR0poY2lncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCM0lEMGdKQ2gzYVc1a2IzY3BMbTkxZEdWeVYybGtkR2dvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZHlBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEl0YzIwbktTNXpZM0p2Ykd4aVlYSW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMXpiUzF0WkNjcExuTmpjbTlzYkdKaGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvZHlBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbXhuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEl0YzIwdGJXUW5LUzV6WTNKdmJHeGlZWElvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIY2dQajBnWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJXUWdKaVlnZHlBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbXhuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEl0YldRbktTNXpZM0p2Ykd4aVlYSW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hjZ1BqMGdZWEJ3UTI5dVptbG5MbUp5WldGcmNHOXBiblF1YldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFhOamNtOXNiR0poY2kxdFpDMXNaeWNwTG5OamNtOXNiR0poY2lncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9keUErUFNCaGNIQkRiMjVtYVdjdVluSmxZV3R3YjJsdWRDNXNaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMk55YjJ4c1ltRnlMV3huSnlrdWMyTnliMnhzWW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDUW9kMmx1Wkc5M0tTNXZiaWduY21WemFYcGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KQ2gzYVc1a2IzY3BMbTkxZEdWeVYybGtkR2dvS1NBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyTnliMnhzWW1GeUxYTnRKeWt1YzJOeWIyeHNZbUZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10YzJOeWIyeHNZbUZ5TFhOdEp5a3VjMk55YjJ4c1ltRnlLQ2RrWlhOMGNtOTVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NRb2QybHVaRzkzS1M1dmRYUmxjbGRwWkhSb0tDa2dQajBnWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbUppQWtLSGRwYm1SdmR5a3ViM1YwWlhKWGFXUjBhQ2dwSUR3Z1lYQndRMjl1Wm1sbkxtSnlaV0ZyY0c5cGJuUXViR2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxelkzSnZiR3hpWVhJdGJXUW5LUzV6WTNKdmJHeGlZWElvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEl0YldRbktTNXpZM0p2Ykd4aVlYSW9KMlJsYzNSeWIza25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZHlBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbXhuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyTnliMnhzWW1GeUxYTnRMVzFrSnlrdWMyTnliMnhzWW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyTnliMnhzWW1GeUxYTnRMVzFrSnlrdWMyTnliMnhzWW1GeUtDZGtaWE4wY205NUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ1FvZDJsdVpHOTNLUzV2ZFhSbGNsZHBaSFJvS0NrZ1BqMGdZWEJ3UTI5dVptbG5MbUp5WldGcmNHOXBiblF1YldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpZM0p2Ykd4aVlYSXRiV1F0YkdjbktTNXpZM0p2Ykd4aVlYSW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpZM0p2Ykd4aVlYSXRiV1F0YkdjbktTNXpZM0p2Ykd4aVlYSW9KMlJsYzNSeWIza25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkNoM2FXNWtiM2NwTG05MWRHVnlWMmxrZEdnb0tTQStQU0JoY0hCRGIyNW1hV2N1WW5KbFlXdHdiMmx1ZEM1c1p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtcHpMWE5qY205c2JHSmhjaTFzWnljcExuTmpjbTlzYkdKaGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMXNaeWNwTG5OamNtOXNiR0poY2lnblpHVnpkSEp2ZVNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpOHZJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyTnliMnhzWW1GeUxXaHZkQ2NwTG5OamNtOXNiR0poY2lncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZzBKL1JnTkMrMExyUmdOR0QwWUxRdXRDd0lOQy8wTDRnMFlIUmdkR0wwTHZRdXRDMUlOQzAwTDRnMFkzUXU5QzEwTHpRdGRDOTBZTFFzRnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFUyTnliMnhzS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpZM0p2Ykd3bktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQWtkR0Z5WjJWMElEMGdKQ2drS0hSb2FYTXBMbUYwZEhJb0oyaHlaV1luS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2tkR0Z5WjJWMExteGxibWQwYUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5bVpuTmxkQ0E5SUNSMFlYSm5aWFF1YjJabWMyVjBLQ2t1ZEc5d0lDMGdOREE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KQ2duTG1obFlXUmxjbDlmYldGcGJpY3BMbU56Y3lnbmNHOXphWFJwYjI0bktTQTlQVDBnSjJacGVHVmtKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDQXRQU0FrS0NjdWFHVmhaR1Z5WDE5dFlXbHVKeWt1YjNWMFpYSklaV2xuYUhRb2RISjFaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkNnbkxtaGxZV1JsY2ljcExtTnpjeWduY0c5emFYUnBiMjRuS1NBOVBUMGdKMlpwZUdWa0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZENBdFBTQWtLQ2N1YUdWaFpHVnlKeWt1YjNWMFpYSklaV2xuYUhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0oyaDBiV3dzWW05a2VTY3BMbUZ1YVcxaGRHVW9lM05qY205c2JGUnZjRG9nYjJabWMyVjBmU3dnTXpBd0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1cGRFRmliM1YwS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MWhZbTkxZEMxb2VYTjBiM0o1WDE5NVpXRnlMWE5zYVdSbGNpY3BMbk5zYVdOcktIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOTBjem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzY3pvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Wm1sdWFYUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJRFVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpaVzUwWlhKTmIyUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSjBhV05oYkRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMlZ1ZEdWeVVHRmtaR2x1WnpvZ0p6VXdjSGduTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYzA1aGRrWnZjam9nSnk1cWN5MWhZbTkxZEMxb2VYTjBiM0o1WDE5amIyNTBaVzUwTFhOc2FXUmxjaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2WTNWelQyNVRaV3hsWTNRNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzF2WW1sc1pVWnBjbk4wT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1emFYWmxPaUJiWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdHdiMmx1ZERvZ1lYQndRMjl1Wm1sbkxtSnlaV0ZyY0c5cGJuUXViV1FnTFNBeExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmxiblJsY2xCaFpHUnBibWM2SUNjM01IQjRKMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MWhZbTkxZEMxb2VYTjBiM0o1WDE5NVpXRnlMWE5zYVdSbGNpY3BMbTl1S0NkaVpXWnZjbVZEYUdGdVoyVW5MQ0JtZFc1amRHbHZiaUFvWlhabGJuUXNJSE5zYVdOckxDQmpkWEp5Wlc1MFUyeHBaR1VzSUc1bGVIUlRiR2xrWlNrZ2UxeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloemJHbGpheWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VabWx1WkNnbkxsOXphV0pzYVc1bkp5a3VjbVZ0YjNabFEyeGhjM01vSjE5emFXSnNhVzVuSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb2MyeHBZMnN1SkhOc2FXUmxjMXR1WlhoMFUyeHBaR1ZkS1M1dVpYaDBLQ2t1WVdSa1EyeGhjM01vSjE5emFXSnNhVzVuSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb2MyeHBZMnN1SkhOc2FXUmxjMXR1WlhoMFUyeHBaR1ZkS1M1d2NtVjJLQ2t1WVdSa1EyeGhjM01vSjE5emFXSnNhVzVuSnlrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFdGaWIzVjBMV2g1YzNSdmNubGZYMk52Ym5SbGJuUXRjMnhwWkdWeUp5a3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2R6T2lCbVlXeHpaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVtYVc1cGRHVTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJodmR6b2dNU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRZM0p2Ykd3NklERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWmhaR1U2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnpUbUYyUm05eU9pQW5MbXB6TFdGaWIzVjBMV2g1YzNSdmNubGZYM2xsWVhJdGMyeHBaR1Z5Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSaGNIUnBkbVZJWldsbmFIUTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSeVlXZG5ZV0pzWlRvZ1ptRnNjMlZjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFJtbHNaV2x1Y0hWMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFtYVd4bGFXNXdkWFJmWDJOdWRDY3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLSFJvYVhNcExtUmhkR0VvSjJSbFptRjFiSFFuTENBa0tIUm9hWE1wTG5SbGVIUW9LU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMV1pwYkdWcGJuQjFkQ2NwTG05dUtDZGphR0Z1WjJVbkxDQm1kVzVqZEdsdmJpQW9aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVtYVd4bGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWnBiR1ZPWVcxbElEMGdKQ2gwYUdsektTNTJZV3dvS1M1emNHeHBkQ2duWEZ4Y1hDY3BMbkJ2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5Rb0tTNW1hVzVrS0NjdWFuTXRabWxzWldsdWNIVjBYMTlqYm5RbktTNTBaWGgwS0dacGJHVk9ZVzFsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUkJiblJwYzNCaGJTZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duYVc1d2RYUmJibUZ0WlQxY0ltVnRZV2xzTTF3aVhTeHBibkIxZEZ0dVlXMWxQVndpYVc1bWIxd2lYU3hwYm5CMWRGdHVZVzFsUFZ3aWRHVjRkRndpWFNjcExtRjBkSElvSjNaaGJIVmxKeXdnSnljcExuWmhiQ2duSnlrN1hISmNiaUFnSUNBZ0lDQWdmU3dnTlRBd01DazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1cGRFRnNjR2hoWW1WMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFoYkhCb1lXSmxkQ0JwYm5CMWRDY3BMbTl1S0NkamFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxaGJIQm9ZV0psZENCc2FTY3BMbkpsYlc5MlpVTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2tLSFJvYVhNcExuQnliM0FvSjJOb1pXTnJaV1FuS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5SektDZHNhU2NwTG1Ga1pFTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10WVd4d2FHRmlaWFFnWVNjcExtOXVLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtcHpMV0ZzY0doaFltVjBJR3hwSnlrdWNtVnRiM1psUTJ4aGMzTW9KMTloWTNScGRtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5SektDZHNhU2NwTG1Ga1pFTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JWTmxZWEpqYURJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRVMlZoY21Ob01pNXlaWE5sZENncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzU5S1R0Y2NseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1PRHRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwU1dsM2FXTXlPVEZqYlU1c1kzbEpObGQ1U21waU1qRjBZakkwZFdGdVRXbFlVM2RwWXpJNU1XTnRUbXhqTUU1MlltNVNiR0p1VVdsUGJITnBZV3hHTVZwWVNqVkxSMW94WW0xT01HRlhPWFZKUTJkd1NVaDBZMk5zZUhWSlEwRm5TVVozYVdSWVRteEpTRTR3WTIxc2FtUkdkMmxQTVhoNVdFYzFZMk5zZUhWSlEwRm5TVU5SYjFwSE9XcGtWekZzWW01UmNFeHVTbXhaVjFJMVMwZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmpiSGgxV0VoS1kySnBRV2RKUTBJNVMxUjBZMk5zZUhWSlEwRm5TVVo0ZVZoSE5UbExWSE5wV0ZOM2FWcHRiSE5hVTBrMlNXMU9kbUpYTVhaaWFUVnhZM2xLT1NKZExDSm1hV3hsSWpvaVkyOXRiVzl1TG1wekluMD1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pSWl3aWMyOTFjbU5sY3lJNld5SmpiMjF0YjI0dWFuTWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSkNoa2IyTjFiV1Z1ZENrdWNtVmhaSGtvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ1lYQndMbWx1YVhScFlXeHBlbVVvS1R0Y2NseHVmU2s3WEhKY2JseHlYRzUyWVhJZ1lYQndJRDBnZTF4eVhHNGdJQ0FnYVc1cGRHbGhiR2w2WldRNklHWmhiSE5sTEZ4eVhHNWNjbHh1SUNBZ0lHbHVhWFJwWVd4cGVtVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGFHbGtaUzFsYlhCMGVTY3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVNRb2RHaHBjeWt1Wm1sdVpDZ25MbXB6TFdocFpHVXRaVzF3ZEhsZlgyTnVkQ0ErSUNvbktTNXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjbVZ0YjNabEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWFYUlFjMlYxWkc5VFpXeGxZM1FvS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWFYUlFjMlYxWkc5VFpXeGxZM1JUWldGeVkyZ29LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSVVlXSnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFVtRnVaMlVvS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWFYUkRhR1Z6Y3lncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkRU5vWlhOelJtbHNkR1Z5S0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJR2x1YVhSUWMyVjFaRzlUWld4bFkzUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqZFhOMGIyMGdjMlZzWldOMFhISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxYTmxiR1ZqZENjcExtOXVLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFhObGJHVmpkRjlmZEc5bloyeGxjaWNwTG05dUtDZGpiR2xqYXljc0lHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmxiR1ZqZENjcExuSmxiVzkyWlVOc1lYTnpLQ2RmWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjR0Z5Wlc1MGN5Z25MbXB6TFhObGJHVmpkQ2NwTG1Ga1pFTnNZWE56S0NkZllXTjBhWFpsSnlrdWRHOW5aMnhsUTJ4aGMzTW9KMTl2Y0dWdVpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmxiR1ZqZENjcExtNXZkQ2duTGw5aFkzUnBkbVVuS1M1eVpXMXZkbVZEYkdGemN5Z25YMjl3Wlc1bFpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvZDJsdVpHOTNLUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxelpXeGxZM1FuS1M1eVpXMXZkbVZEYkdGemN5Z25YMjl3Wlc1bFpDQmZZV04wYVhabEp5azdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJR2x1YVhSUWMyVjFaRzlUWld4bFkzUlRaV0Z5WTJnNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QmpkWE4wYjIwZ2MyVnNaV04wSUhObFlYSmphRnh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUXRjMlZoY21Ob0p5a3VaV0ZqYUNobWRXNWpkR2x2YmlBb2FXNWtaWGdzSUdWc1pXMWxiblFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlDUnBkR1Z0Y3lBOUlDUW9aV3hsYldWdWRDa3VabWx1WkNnbkxtcHpMWE5sYkdWamRDMXpaV0Z5WTJoZlgybDBaVzBuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNobGJHVnRaVzUwS1M1bWFXNWtLQ2N1YW5NdGMyVnNaV04wTFhObFlYSmphRjlmYVc1d2RYUW5LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXZiaWduYTJWNWRYQW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ4ZFdWeWVTQTlJQ1FvZEdocGN5a3VkbUZzS0NrdWRISnBiU2dwTG5SdlRHOTNaWEpEWVhObEtDazdYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktIRjFaWEo1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEYxWlhKNUxteGxibWQwYUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdsMFpXMXpMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VaR0YwWVNnbmMyVnNaV04wTFhObFlYSmphQ2NwTG5SdlRHOTNaWEpEWVhObEtDa3VhVzVrWlhoUFppaHhkV1Z5ZVNrZ1BUMDlJREFnUHlBa0tIUm9hWE1wTG5Ob2IzY29LU0E2SUNRb2RHaHBjeWt1YUdsa1pTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE11YzJodmR5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXViMjRvSjJOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYm1WbFpDQm1iM0lnYlVacGJIUmxjakpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQnBibWwwVkdGaWN6b2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxMFlXSnpKeWt1WldGamFDaG1kVzVqZEdsdmJpQW9hVzVrWlhnc0lHVnNaVzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUmhZbk5UWld4bFkzUnZjaUE5SUhSNWNHVnZaaUFrS0dWc1pXMHBMbVJoZEdFb0ozUmhZbk1uS1NBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlBbkxtcHpMWFJoWW5OZlgyeHBjM1FnUGlCc2FTY2dPaUFrS0dWc1pXMHBMbVJoZEdFb0ozUmhZbk1uS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlDUnpaV3hsWTNRZ1BTQWtLR1ZzWlcwcExtWnBibVFvSnk1cWN5MTBZV0p6WDE5elpXeGxZM1FuS1N3Z2QybDBhRk5sYkdWamRDQTlJQ1J6Wld4bFkzUXViR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tHVnNaVzBwTG1WaGMzbDBZV0p6S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJTkMwMEx2Ump5RFFzdEM3MEw3UXR0QzEwTDNRdmRHTDBZVWcwWUxRc05DeDBMN1FzaURRdU5HQjBML1F2dEM3MFl6UXQ5R0QwTFhRdkNCa1lYUmhYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVdKek9pQjBZV0p6VTJWc1pXTjBiM0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXNWxiRU52Ym5SbGVIUTZJQ1FvWld4bGJTa3VhR0Z6UTJ4aGMzTW9KMnB6TFhSaFluTmZaR2x6WTI5dWJtVmpkR1ZrSnlrZ1B5QWtLQ2N1YW5NdGRHRmljMTlmWTI5dWRHVnVkQ2NwSURvZ0pDaGxiR1Z0S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVndaR0YwWlVoaGMyZzZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRwZEdoVFpXeGxZM1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9aV3hsYlNrdVptbHVaQ2gwWVdKelUyVnNaV04wYjNJcExtWnBibVFvSjJFbktTNWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQWtLSFJvYVhNcExtRjBkSElvSjJoeVpXWW5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFFnUFNBa0tIUm9hWE1wTG1SaGRHRW9KM05sYkdWamRDY3BJSHg4SUNRb2RHaHBjeWt1ZEdWNGRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnpaV3hsWTNRdVlYQndaVzVrS0NjOGIzQjBhVzl1SUhaaGJIVmxQVndpSnlBcklIWmhiSFZsSUNzZ0oxd2lQaWNnS3lCMFpYaDBJQ3NnSnp3dmIzQjBhVzl1UGljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2MyVnNaV04wTG05dUtDZGphR0Z1WjJVbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2hsYkdWdEtTNWxZWE41ZEdGaWN5Z25jMlZzWldOMEp5d2dKQ2gwYUdsektTNTJZV3dvS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLR1ZzWlcwcExtWnBibVFvZEdGaWMxTmxiR1ZqZEc5eUtTNW1hVzVrS0NkaE9tNXZkQ2d1WkdsellXSnNaV1FwSnlrdVptbHljM1FvS1M1amJHbGpheWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0dWc1pXMHBMbUpwYm1Rb0oyVmhjM2wwWVdKek9tRm1kR1Z5Snl3Z1puVnVZM1JwYjI0Z0tHVjJaVzUwTENBa1kyeHBZMnRsWkN3Z0pIUmhjbWRsZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hkcGRHaFRaV3hsWTNRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2MyVnNaV04wTG5aaGJDZ2tZMnhwWTJ0bFpDNWhkSFJ5S0Nkb2NtVm1KeWtwTG1Ob1lXNW5aU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSFJoY21kbGRDNW1hVzVrS0NjdWMyeHBZMnN0YVc1cGRHbGhiR2w2WldRbktTNXpiR2xqYXlnbmMyVjBVRzl6YVhScGIyNG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSMFlYSm5aWFF1Wm1sdVpDZ25MbXB6TFhObGJHVmpkREluS1M1elpXeGxZM1F5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQnBibWwwVW1GdVoyVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGNtRnVaMlVuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2hwYm1SbGVDd2daV3hsYlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMnhwWkdWeUlEMGdKQ2hsYkdWdEtTNW1hVzVrS0NjdWFuTXRjbUZ1WjJWZlgzUmhjbWRsZENjcFd6QmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnBibkIxZEhNZ1BTQWtLR1ZzWlcwcExtWnBibVFvSjJsdWNIVjBKeWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNBOUlDUnBibkIxZEhNdVptbHljM1FvS1Zzd1hTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJ5QTlJQ1JwYm5CMWRITXViR0Z6ZENncFd6QmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJ4cFpHVnlJQ1ltSUdaeWIyMGdKaVlnZEc4cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdGFXNGdQU0J3WVhKelpVbHVkQ2htY205dExuWmhiSFZsS1NCOGZDQXdMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhnZ1BTQndZWEp6WlVsdWRDaDBieTUyWVd4MVpTa2dmSHdnTUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZWV2xUYkdsa1pYSXVZM0psWVhSbEtITnNhV1JsY2l3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBPaUJiWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV1WldOME9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpoYm1kbE9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R0YVc0bk9pQnRhVzRzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkdFlYZ25PaUJ0WVhoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemJtRndWbUZzZFdWeklEMGdXMlp5YjIwc0lIUnZYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjaTV1YjFWcFUyeHBaR1Z5TG05dUtDZDFjR1JoZEdVbkxDQm1kVzVqZEdsdmJpQW9kbUZzZFdWekxDQm9ZVzVrYkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJtRndWbUZzZFdWelcyaGhibVJzWlYwdWRtRnNkV1VnUFNCTllYUm9Mbkp2ZFc1a0tIWmhiSFZsYzF0b1lXNWtiR1ZkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGphR0Z1WjJVbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWeUxtNXZWV2xUYkdsa1pYSXVjMlYwS0Z0MGFHbHpMblpoYkhWbExDQnVkV3hzWFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdkxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTm9ZVzVuWlNjc0lHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhJdWJtOVZhVk5zYVdSbGNpNXpaWFFvVzI1MWJHd3NJSFJvYVhNdWRtRnNkV1ZkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDUW9aV3hsYlNrdWFHRnpRMnhoYzNNb0oycHpMV05vWlhOekxYSmhibWRsSnlrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWEl1Ym05VmFWTnNhV1JsY2k1dmJpZ25aVzVrSnl3Z1puVnVZM1JwYjI0Z0tIWmhiSFZsY3l3Z2FHRnVaR3hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KMXR1WVcxbFBWd2ljSEpwWTJWZmJXRjRYQ0pkSnlrdWRISnBaMmRsY2lnblkyaGhibWRsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMWEJwWTJ0bGNpY3BMbVZoWTJnb1puVnVZM1JwYjI0Z0tHbHVaR1Y0TENCbGJHVnRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemJHbGtaWElnUFNBa0tHVnNaVzBwTG1acGJtUW9KeTVxY3kxd2FXTnJaWEpmWDNSaGNtZGxkQ2NwV3pCZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBJRDBnSkNobGJHVnRLUzVtYVc1a0tDY3Vhbk10Y0dsamEyVnlYMTlwYm5CMWRDY3BXekJkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyeHBaR1Z5SUNZbUlHbHVjSFYwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldsdUlEMGdjR0Z5YzJWSmJuUW9hVzV3ZFhRdVoyVjBRWFIwY21saWRYUmxLQ2R0YVc0bktTa2dmSHdnTUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRJRDBnY0dGeWMyVkpiblFvYVc1d2RYUXVaMlYwUVhSMGNtbGlkWFJsS0NkdFlYZ25LU2tnZkh3Z01DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzSUQwZ2NHRnljMlZKYm5Rb2FXNXdkWFF1ZG1Gc2RXVXBJSHg4SUcxcGJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2VldsVGJHbGtaWEl1WTNKbFlYUmxLSE5zYVdSbGNpd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowT2lCMllXd3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVibVZqZERvZ1czUnlkV1VzSUdaaGJITmxYU3hjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y20xaGREb2dlMXh5WEc0dkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGNuTmxTVzUwS0haaGJIVmxLVHRjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVc1blpUb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYldsdUp6b2diV2x1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmJXRjRKem9nYldGNFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYSXVibTlWYVZOc2FXUmxjaTV2YmlnbmRYQmtZWFJsSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwTG5aaGJIVmxJRDBnYzJ4cFpHVnlMbTV2VldsVGJHbGtaWEl1WjJWMEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGxiR1Z0S1M1bWFXNWtLQ2N1YW5NdGNHbGphMlZ5WDE5cGJuQjFkQ2NwTG5SeWFXZG5aWElvSjJOb1lXNW5aU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdFlYTnJJRDBnYVc1d2RYUXVhVzV3ZFhSdFlYTnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WVhOcklDWW1JR2x1Y0hWMExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25hbk10YldGemExOWZZV2RsSnlrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMVptWnBlQ0E5SUdkbGRFNTFiVVZ1WkdsdVp5aHdZWEp6WlVsdWRDaHpiR2xrWlhJdWJtOVZhVk5zYVdSbGNpNW5aWFFvS1Nrc0lGc253cURRczlDKzBMUW5MQ0Fud3FEUXM5QyswTFRRc0Njc0lDZkNvTkM3MExYUmdpZGRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGemF5NXZjSFJwYjI0b2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWbVptbDRPaUJ6ZFdabWFYaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z5TG01dlZXbFRiR2xrWlhJdWMyVjBLSFJvYVhNdWRtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdhVzVwZEVOb1pYTnpPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NRb2QybHVaRzkzS1M1dmRYUmxjbGRwWkhSb0tDa2dQajBnWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJHY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxXTm9aWE56TFhSdmIyeDBhWEJmWDJOdmJuUmxiblFuS1M1d1lYSmxiblFvS1M1b2IzWmxjaWhoY0hBdWMyaHZkME5vWlhOelZHOXZiSFJwY0N3Z1lYQndMbWhwWkdWRGFHVnpjMVJ2YjJ4MGFYQXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjJZWElnSkhSaGNtZGxkQ0E5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTkwYVhSc1pTY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbVZoT2lBa0tDY3Vhbk10WTJobGMzTXRhVzVtYjE5ZllYSmxZU2NwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y21salpUb2dKQ2duTG1wekxXTm9aWE56TFdsdVptOWZYM0J5YVdObEp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlhV05sVUdWeVUzRjFZWEpsT2lBa0tDY3Vhbk10WTJobGMzTXRhVzVtYjE5ZmNISnBZMlZRWlhKVGNYVmhjbVVuS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm14dmIzSTZJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTltYkc5dmNpY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iRzl2Y25OVWIzUmhiRG9nSkNnbkxtcHpMV05vWlhOekxXbHVabTlmWDJac2IyOXljMVJ2ZEdGc0p5a3NYSEpjYmlBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUm9lWEJ2ZEdobFl5QTlJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTlvZVhCdmRHaGxZeWNwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHaDVjRzkwYUdWalYzSmhjSEJsY2lBOUlDUW9KeTVxY3kxamFHVnpjeTFwYm1adlgxOW9lWEJ2ZEdobFl5MTNjbUZ3Y0dWeUp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteGhkQ0E5SUNRb0p5NXFjeTFqYUdWemN5MXBibVp2WDE5cGJXZEdiR0YwSnlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWthVzFuUm14dmIzSWdQU0FrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmYVcxblJteHZiM0luS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBZV0p6SUQwZ0pDZ25MbXB6TFdOb1pYTnpMV2x1Wm05ZlgzUmhZbk1uS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBZV0pHYkc5dmNpQTlJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTkwWVdKR2JHOXZjaWNwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUmhZa1pzWVhRZ1BTQWtLQ2N1YW5NdFkyaGxjM010YVc1bWIxOWZkR0ZpUm14aGRDY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdadmNtMGdQU0FrS0NjdWFuTXRZMmhsYzNNdGFXNW1iMTlmWm05eWJTY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1cGRDQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MWphR1Z6Y3kxcGJtWnZYMTlwZEdWdExsOWhZM1JwZG1VbktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQWtkR2hwY3lBOUlDUW9kR2hwY3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2tkR2hwY3k1b1lYTkRiR0Z6Y3lnblgzTmxiR1ZqZEdWa0p5a3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxamFHVnpjeTFwYm1adlgxOXBkR1Z0SnlrdWNtVnRiM1psUTJ4aGMzTW9KMTl6Wld4bFkzUmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrZEdocGN5NWhaR1JEYkdGemN5Z25YM05sYkdWamRHVmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnSkhSb2FYTXVaR0YwWVNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnSkhSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUmhjbWRsZEZ0clpYbGRMblJsZUhRb1pHRjBZVnRyWlhsZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa1ptOXliUzUyWVd3b1pHRjBZUzVtYjNKdEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWFIbHdiM1JvWldNcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JvZVhCdmRHaGxZeTUwWlhoMEtHUmhkR0V1YUhsd2IzUm9aV01wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHaDVjRzkwYUdWalYzSmhjSEJsY2k1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYUhsd2IzUm9aV05YY21Gd2NHVnlMbWhwWkdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1cGJXZEdiR0YwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWthVzFuUm14aGRDNWhkSFJ5S0Nkb2NtVm1KeXdnWkdGMFlTNXBiV2RHYkdGMEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwYldkR2JHRjBMbVpwYm1Rb0oybHRaeWNwTG1GMGRISW9KM055WXljc0lHUmhkR0V1YVcxblJteGhkQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FXMW5SbXhoZEM1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2RHRmlSbXhoZEM1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteGhkQzVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrZEdGaVJteGhkQzVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWFXMW5SbXh2YjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwYldkR2JHOXZjaTVoZEhSeUtDZG9jbVZtSnl3Z1pHRjBZUzVwYldkR2JHOXZjaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FXMW5SbXh2YjNJdVptbHVaQ2duYVcxbkp5a3VZWFIwY2lnbmMzSmpKeXdnWkdGMFlTNXBiV2RHYkc5dmNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVcxblJteHZiM0l1YzJodmR5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhSaFlrWnNiMjl5TG5Ob2IzY29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JwYldkR2JHOXZjaTVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrZEdGaVJteHZiM0l1YUdsa1pTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2drZEdGaWN5NW1hVzVrS0Nkc2FUcDJhWE5wWW14bEp5a3ViR1Z1WjNSb0lEMDlJREVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBZV0p6TG1acGJtUW9KMnhwT25acGMybGliR1VuS1M1bWFYSnpkQ2dwTG1acGJtUW9KMkVuS1M1amJHbGpheWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJtbDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tGd2lhSFJ0YkN3Z1ltOWtlVndpS1M1aGJtbHRZWFJsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeFViM0E2SUNSMFlYSm5aWFF1ZEdsMGJHVXViMlptYzJWMEtDa3VkRzl3SUMwZ01UQXdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TENBMU1EQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXTm9aWE56TFdsdVptOWZYMmwwWlcwdVgyRmpkR2wyWlNjcExtWnBjbk4wS0NrdVkyeHBZMnNvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwSUQwZ2RISjFaVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0pHTm9aWE56Vkc5dmJIUnBjRG9nYm5Wc2JDeGNjbHh1SUNBZ0lDUmphR1Z6YzFSdmIyeDBhWEJVYVcxbGIzVjBPaUJ1ZFd4c0xGeHlYRzVjY2x4dUlDQWdJSE5vYjNkRGFHVnpjMVJ2YjJ4MGFYQTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnSkhObGJHWWdQU0FrS0hSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUdGd2NDNGtZMmhsYzNOVWIyOXNkR2x3VkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjJabWMyVjBJRDBnSkhObGJHWXViMlptYzJWMEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRndjQzRrWTJobGMzTlViMjlzZEdsd0lEMGdKSE5sYkdZdVptbHVaQ2duTG1wekxXTm9aWE56TFhSdmIyeDBhWEJmWDJOdmJuUmxiblFuS1M1amJHOXVaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY0hBdUpHTm9aWE56Vkc5dmJIUnBjQzVqYzNNb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzl3T2lCdlptWnpaWFF1ZEc5d0lDc2dNamdzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBPaUJ2Wm1aelpYUXViR1ZtZENBcklERXdMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLUzVoY0hCbGJtUlVieWdrS0NkaWIyUjVKeWtwTG1Ga1pFTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdmU3dnTXpBd0tUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnYUdsa1pVTm9aWE56Vkc5dmJIUnBjRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoaGNIQXVKR05vWlhOelZHOXZiSFJwY0ZScGJXVnZkWFFwTzF4eVhHNGdJQ0FnSUNBZ0lHRndjQzRrWTJobGMzTlViMjlzZEdsd0xuSmxiVzkyWlNncE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0JwYm1sMFEyaGxjM05HYVd4MFpYSTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqYUdWemN5QnNhVzVySUdsdUlHWnBiSFJsY2lCeVpYTjFiSFJjY2x4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlDaHRVMlZoY21Ob01pa2dJVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFdOb1pYTnpYMTlzYVc1ckp5a3ViMjRvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhGMVpYSjVJRDBnSkM1d1lYSmhiU2h0VTJWaGNtTm9NaTVuWlhSR2FXeDBaWEp6S0NrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xteHZZMkYwYVc5dUlEMGdKQ2gwYUdsektTNWhkSFJ5S0Nkb2NtVm1KeWtnS3lBblB5Y2dLeUJ4ZFdWeWVUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnSkdadmNtMGdQU0FrS0NjdWFuTXRZMmhsYzNNdFptbHNkR1Z5Snlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWthWFJsYlhNZ1BTQWtLQ2N1YW5NdFkyaGxjM010Wm1sc2RHVnlYMTlwZEdWdEp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21WaFRXbHVJRDBnYm5Wc2JDd2dZWEpsWVUxaGVDQTlJRzUxYkd3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbWxqWlUxcGJpQTlJRzUxYkd3c0lIQnlhV05sVFdGNElEMGdiblZzYkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsY2xCeWFXTmxJRDBnSkdadmNtMHVabWx1WkNnblcyNWhiV1U5WENKd2NtbGpaVjl0YVc1Y0lsMG5LUzV3WVhKbGJuUnpLQ2N1YW5NdGNtRnVaMlVuS1M1bWFXNWtLQ2N1YW5NdGNtRnVaMlZmWDNSaGNtZGxkQ2NwV3pCZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWeVFYSmxZU0E5SUNSbWIzSnRMbVpwYm1Rb0oxdHVZVzFsUFZ3aVlYSmxZVjl0YVc1Y0lsMG5LUzV3WVhKbGJuUnpLQ2N1YW5NdGNtRnVaMlVuS1M1bWFXNWtLQ2N1YW5NdGNtRnVaMlZmWDNSaGNtZGxkQ2NwV3pCZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkwWVd3Z1BTQWthWFJsYlhNdWJHVnVaM1JvSUMwZ0pHbDBaVzF6TG1acGJIUmxjaWduTGw5emIyeGtKeWt1YkdWdVozUm9PMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2tabTl5YlM1c1pXNW5kR2dnUFQwOUlEQWdmSHdnSkdsMFpXMXpMbXhsYm1kMGFDQTlQVDBnTUNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwUTJobGMzTlViM1JoYkNoMGIzUmhiQ2s3WEhKY2JpQWdJQ0FnSUNBZ0pHbDBaVzF6TG1acGJIUmxjaWduVzJSaGRHRXRabWxzZEdWeUxXRnlaV0ZkSnlrdVpXRmphQ2htZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhjbVZoSUQwZ2NHRnljMlZHYkc5aGRDZ2tLSFJvYVhNcExtUmhkR0VvSjJacGJIUmxjaTFoY21WaEp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdGeVpXRk5hVzRnZkh3Z1lYSmxZU0E4SUdGeVpXRk5hVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaV0ZOYVc0Z1BTQk5ZWFJvTG1ac2IyOXlLR0Z5WldFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZWEpsWVUxaGVDQjhmQ0JoY21WaElENGdZWEpsWVUxaGVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbFlVMWhlQ0E5SUUxaGRHZ3VZMlZwYkNoaGNtVmhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1JwZEdWdGN5NW1hV3gwWlhJb0oxdGtZWFJoTFdacGJIUmxjaTF3Y21salpWMG5LUzVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCeWFXTmxJRDBnY0dGeWMyVkpiblFvSkNoMGFHbHpLUzVrWVhSaEtDZG1hV3gwWlhJdGNISnBZMlVuS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjSEpwWTJWTmFXNGdmSHdnY0hKcFkyVWdQQ0J3Y21salpVMXBiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnBZMlZOYVc0Z1BTQndjbWxqWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYQnlhV05sVFdGNElIeDhJSEJ5YVdObElENGdjSEpwWTJWTllYZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWFXTmxUV0Y0SUQwZ2NISnBZMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrWm05eWJTNW1hVzVrS0NkYmJtRnRaVDFjSW1GeVpXRmZiV2x1WENKZEp5a3VZWFIwY2lnbmRtRnNkV1VuTENCaGNtVmhUV2x1S1M1aGRIUnlLQ2R0YVc0bkxDQmhjbVZoVFdsdUtTNWhkSFJ5S0NkdFlYZ25MQ0JoY21WaFRXRjRLVHRjY2x4dUlDQWdJQ0FnSUNBa1ptOXliUzVtYVc1a0tDZGJibUZ0WlQxY0ltRnlaV0ZmYldGNFhDSmRKeWt1WVhSMGNpZ25kbUZzZFdVbkxDQmhjbVZoVFdGNEtTNWhkSFJ5S0NkdGFXNG5MQ0JoY21WaFRXbHVLUzVoZEhSeUtDZHRZWGduTENCaGNtVmhUV0Y0S1R0Y2NseHVJQ0FnSUNBZ0lDQWtabTl5YlM1bWFXNWtLQ2RiYm1GdFpUMWNJbkJ5YVdObFgyMXBibHdpWFNjcExtRjBkSElvSjNaaGJIVmxKeXdnY0hKcFkyVk5hVzRwTG1GMGRISW9KMjFwYmljc0lIQnlhV05sVFdsdUtTNWhkSFJ5S0NkdFlYZ25MQ0J3Y21salpVMWhlQ2s3WEhKY2JpQWdJQ0FnSUNBZ0pHWnZjbTB1Wm1sdVpDZ25XMjVoYldVOVhDSndjbWxqWlY5dFlYaGNJbDBuS1M1aGRIUnlLQ2QyWVd4MVpTY3NJSEJ5YVdObFRXRjRLUzVoZEhSeUtDZHRhVzRuTENCd2NtbGpaVTFwYmlrdVlYUjBjaWduYldGNEp5d2djSEpwWTJWTllYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNSbWIzSnRMbVpwYm1Rb0oxdHVZVzFsUFZ3aWNtOXZiWE5jSWwwbktTNWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ1JwZEdWdGN5NW1hV3gwWlhJb0oxdGtZWFJoTFdacGJIUmxjaTF5YjI5dGN6MWNJaWNnS3lBa0tIUm9hWE1wTG5aaGJDZ3BJQ3NnSjF3aVhTY3BMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5Rb0tTNXlaVzF2ZG1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lITnNhV1JsY2xCeWFXTmxMbTV2VldsVGJHbGtaWEl1ZFhCa1lYUmxUM0IwYVc5dWN5aDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowT2lCYlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbWxqWlUxcGJpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YVdObFRXRjRYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmhibWRsT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5iV2x1SnpvZ2NISnBZMlZOYVc0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5iV0Y0SnpvZ2NISnBZMlZOWVhoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMHNJSFJ5ZFdVZ0x5OGdRbTl2YkdWaGJpQW5abWx5WlZObGRFVjJaVzUwSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdJQ0J6Ykdsa1pYSkJjbVZoTG01dlZXbFRiR2xrWlhJdWRYQmtZWFJsVDNCMGFXOXVjeWg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKME9pQmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21WaFRXbHVMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbFlVMWhlRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlZVzVuWlRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjFwYmljNklHRnlaV0ZOYVc0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5iV0Y0SnpvZ1lYSmxZVTFoZUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dkSEoxWlNBdkx5QkNiMjlzWldGdUlDZG1hWEpsVTJWMFJYWmxiblFuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBa1ptOXliUzVtYVc1a0tDZHBibkIxZENjcExtOXVLQ2RqYUdGdVoyVW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1iM0p0UkdGMFlTQTlJQ1JtYjNKdExuTmxjbWxoYkdsNlpVRnljbUY1S0Nrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnljeUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSmxZVG9nVzJGeVpXRk5hVzRzSUdGeVpXRk5ZWGhkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtbGpaVG9nVzNCeWFXTmxUV2x1TENCd2NtbGpaVTFoZUYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiMjF6T2lCYlhWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29abTl5YlVSaGRHRXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtMbVZoWTJnb1ptOXliVVJoZEdFc0lHWjFibU4wYVc5dUlDaHVMQ0IyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZGk1dVlXMWxJRDA5SUNkaGNtVmhYMjFwYmljZ0ppWWdkaTUyWVd4MVpTQWhQU0JoY21WaFRXbHVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeWN5NWhjbVZoV3pCZElEMGdjR0Z5YzJWSmJuUW9kaTUyWVd4MVpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kaTV1WVcxbElEMDlJQ2RoY21WaFgyMWhlQ2NnSmlZZ2RpNTJZV3gxWlNBaFBTQmhjbVZoVFdGNEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5Y3k1aGNtVmhXekZkSUQwZ2NHRnljMlZKYm5Rb2RpNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpNXVZVzFsSUQwOUlDZHdjbWxqWlY5dGFXNG5JQ1ltSUhZdWRtRnNkV1VnSVQwZ2NISnBZMlZOYVc0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEp6TG5CeWFXTmxXekJkSUQwZ2NHRnljMlZKYm5Rb2RpNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpNXVZVzFsSUQwOUlDZHdjbWxqWlY5dFlYZ25JQ1ltSUhZdWRtRnNkV1VnSVQwZ2NISnBZMlZOWVhncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEp6TG5CeWFXTmxXekZkSUQwZ2NHRnljMlZKYm5Rb2RpNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpNXVZVzFsSUQwOUlDZHliMjl0Y3ljcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEp6TG5KdmIyMXpMbkIxYzJnb2RpNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1sc2RHVnljeTVoY21WaFd6QmRJRDA5SUdGeVpXRk5hVzRnSmlZZ1ptbHNkR1Z5Y3k1aGNtVmhXekZkSUQwOUlHRnlaV0ZOWVhncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1ptbHNkR1Z5Y3k1aGNtVmhPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1sc2RHVnljeTV3Y21salpWc3dYU0E5UFNCd2NtbGpaVTFwYmlBbUppQm1hV3gwWlhKekxuQnlhV05sV3pGZElEMDlJSEJ5YVdObFRXRjRLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJR1pwYkhSbGNuTXVjSEpwWTJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1hV3gwWlhKekxuSnZiMjF6TG14bGJtZDBhQ0E5UFNBd0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHWnBiSFJsY25NdWNtOXZiWE03WEhKY2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1ptbHNkR1Z5Y3lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVDJKcVpXTjBMbXRsZVhNb1ptbHNkR1Z5Y3lrdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWthWFJsYlhNdVlXUmtRMnhoYzNNb0oxOW1hV3gwWlhKbFpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdsMFpXMXpMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJtYVd4MFpYSmxaQ0E5SUhSeWRXVXNJQ1JmYVhSbGJTQTlJQ1FvZEdocGN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDNWxZV05vS0dacGJIUmxjbk1zSUdaMWJtTjBhVzl1SUNockxDQjJLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvYXlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZWEpsWVNjNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQW9KRjlwZEdWdExtUmhkR0VvSjJacGJIUmxjaTFoY21WaEp5a3BJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWEpsWVNBOUlFMWhkR2d1Y205MWJtUW9jR0Z5YzJWR2JHOWhkQ2drWDJsMFpXMHVaR0YwWVNnblptbHNkR1Z5TFdGeVpXRW5LU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhKbFlTQThJSFpiTUYwZ2ZId2dZWEpsWVNBK0lIWmJNVjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSmxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM0J5YVdObEp6cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JQ2drWDJsMFpXMHVaR0YwWVNnblptbHNkR1Z5TFhCeWFXTmxKeWtwSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlBa1gybDBaVzB1WkdGMFlTZ25abWxzZEdWeUxYQnlhV05sSnlrZ0lUMDlJQ2NuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtbGpaU0E5SUUxaGRHZ3VjbTkxYm1Rb2NHRnljMlZHYkc5aGRDZ2tYMmwwWlcwdVpHRjBZU2duWm1sc2RHVnlMWEJ5YVdObEp5a3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YVdObElEd2dkbHN3WFNCOGZDQndjbWxqWlNBK0lIWmJNVjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSmxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM0p2YjIxekp6cGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JQ2drWDJsMFpXMHVaR0YwWVNnblptbHNkR1Z5TFhKdmIyMXpKeWtwSUQwOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMkxtbHVaR1Y0VDJZb0pGOXBkR1Z0TG1SaGRHRW9KMlpwYkhSbGNpMXliMjl0Y3ljcExuUnZVM1J5YVc1bktDa3BJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEpsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dacGJIUmxjbVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9kR2hwY3lrdWNtVnRiM1psUTJ4aGMzTW9KMTltYVd4MFpYSmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEJ3TG5ObGRFTm9aWE56Vkc5MFlXd29KR2wwWlcxekxteGxibWQwYUNBdElDUnBkR1Z0Y3k1bWFXeDBaWElvSnk1ZlptbHNkR1Z5WldRbktTNXNaVzVuZEdncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHbDBaVzF6TG5KbGJXOTJaVU5zWVhOektDZGZabWxzZEdWeVpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGd2NDNXpaWFJEYUdWemMxUnZkR0ZzS0hSdmRHRnNLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnYUdGdVpHeGxJR2RsZENCbWFXeDBaWEp6WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1pwYkhSbGNuTWdQU0I3ZlN3Z2FHRnphQ3dnYUdGemFHVnpPMXh5WEc0Z0lDQWdJQ0FnSUdoaGMyaGxjeUE5SUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoM2FXNWtiM2N1Ykc5allYUnBiMjR1YzJWaGNtTm9Mbk4xWW5OMGNpZ3hLU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2hoYzJobGN5NXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnphR1Z6SUQwZ2FHRnphR1Z6TG5Od2JHbDBLQ2NtSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ2FXNGdhR0Z6YUdWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHRnphR1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLR2twS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGemFDQTlJR2hoYzJobGMxdHBYUzV6Y0d4cGRDZ25QU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYUdGemFGc3hYU0FoUFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4MFpYSnpXMmhoYzJoYk1GMWRJRDBnYUdGemFGc3hYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb1ptbHNkR1Z5Y3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1hV3gwWlhKekxteGxibWQwYUNBaFBUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQW9abWxzZEdWeWN5NXJiMjF1WVhSdWVXVXBJQ0U5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHWnZjbTB1Wm1sdVpDZ25XMjVoYldVOVhDSnliMjl0YzF3aVhTY3BMbVpwYkhSbGNpZ25XM1poYkhWbFBWd2lKeUFySUdacGJIUmxjbk11YTI5dGJtRjBibmxsSUNzZ0oxd2lYU2NwTG5CeWIzQW9KMk5vWldOclpXUW5MQ0IwY25WbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ0tHWnBiSFJsY25OYkoyRndjR05vWlhOemNtVnphV1JsYm5ScFlXeDhZWEpsWVNkZEtTQWhQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhjbVZoSUQwZ1ptbHNkR1Z5YzFzbllYQndZMmhsYzNOeVpYTnBaR1Z1ZEdsaGJIeGhjbVZoSjEwdWMzQnNhWFFvSnl3bktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWEpCY21WaExtNXZWV2xUYkdsa1pYSXVjMlYwS0dGeVpXRXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQW9abWxzZEdWeWMxc25ZWEJ3WTJobGMzTnlaWE5wWkdWdWRHbGhiSHh3Y21salpTZGRLU0FoUFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3Y21salpTQTlJR1pwYkhSbGNuTmJKMkZ3Y0dOb1pYTnpjbVZ6YVdSbGJuUnBZV3g4Y0hKcFkyVW5YUzV6Y0d4cGRDZ25MQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGNsQnlhV05sTG01dlZXbFRiR2xrWlhJdWMyVjBLSEJ5YVdObEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSbWIzSnRMbVpwYm1Rb0oxdHVZVzFsUFZ3aWNtOXZiWE5jSWwwbktTNTBjbWxuWjJWeUtDZGphR0Z1WjJVbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJSE5sZEVOb1pYTnpWRzkwWVd3NklHWjFibU4wYVc5dUlDaDBiM1JoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGJtUnBibWR6SUQwZ1d5ZlF1dEN5MExEUmdOR0MwTGpSZ05Dd0p5d2dKOUM2MExMUXNOR0EwWUxRdU5HQTBZc25MQ0FuMExyUXN0Q3cwWURSZ3RDNDBZQW5YVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10WTJobGMzTXRabWxzZEdWeVgxOTBiM1JoYkNjcExuUmxlSFFvZEc5MFlXd2dLeUFuSUNjZ0t5QmhjSEF1WjJWMFRuVnRSVzVrYVc1bktIUnZkR0ZzTENCbGJtUnBibWR6S1NrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZzBLVFJnOUM5MExyUmh0QzQwWThnMExMUXZ0QzMwTExSZ05DdzBZblFzTkMxMFlJZzBMN1F1dEMrMEwzUmg5Q3cwTDNRdU5DMUlOQzAwTHZSanlEUXZOQzkwTDdRdHRDMTBZSFJndEN5MExYUXZkQzkwTDdRczlDK0lOR0gwTGpSZ2RDNzBMQWcwWUhRdTlDKzBMTFFzQ0RRdmRDd0lOQyswWUhRdmRDKzBMTFFzTkM5MExqUXVDRFJoOUM0MFlIUXU5Q3dJTkM0SU5DODBMRFJnZEdCMExqUXN0Q3dJTkMrMExyUXZ0QzkwWWZRc05DOTBMalF1Vnh5WEc0Z0lDQWdJQ29nY0dGeVlXMGdJR2xPZFcxaVpYSWdTVzUwWldkbGNpRFFwOUM0MFlIUXU5QytJTkM5MExBZzBMN1JnZEM5MEw3UXN0QzFJTkM2MEw3Umd0QyswWURRdnRDejBMNGcwTDNSZzlDMjBMM1F2aURSZ2RHRTBMN1JnTkM4MExqUmdOQyswTExRc05HQzBZd2cwTDdRdXRDKzBMM1JoOUN3MEwzUXVOQzFYSEpjYmlBZ0lDQWdLaUJ3WVhKaGJTQWdZVVZ1WkdsdVozTWdRWEp5WVhrZzBKelFzTkdCMFlIUXVOQ3lJTkdCMEx2UXZ0Q3lJTkM0MEx2UXVDRFF2dEM2MEw3UXZkR0gwTERRdmRDNDBMa2cwTFRRdTlHUElOR0gwTGpSZ2RDMTBMc2dLREVzSURRc0lEVXBMRnh5WEc0Z0lDQWdJQ29nSUNBZ0lDQWdJQ0RRdmRDdzBML1JnTkM0MEx6UXRkR0FJRnNuMFkvUXNkQzcwTDdRdXRDK0p5d2dKOUdQMExIUXU5QyswTHJRc0Njc0lDZlJqOUN4MEx2UXZ0QzZKMTFjY2x4dUlDQWdJQ0FxSUhKbGRIVnliaUJUZEhKcGJtZGNjbHh1SUNBZ0lDQXFJRnh5WEc0Z0lDQWdJQ29nYUhSMGNITTZMeTlvWVdKeVlXaGhZbkl1Y25VdmNHOXpkQzh4TURVME1qZ3ZYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR2RsZEU1MWJVVnVaR2x1WnpvZ1puVnVZM1JwYjI0Z0tHbE9kVzFpWlhJc0lHRkZibVJwYm1kektTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITkZibVJwYm1jc0lHazdYSEpjYmlBZ0lDQWdJQ0FnYVU1MWJXSmxjaUE5SUdsT2RXMWlaWElnSlNBeE1EQTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHbE9kVzFpWlhJZ1BqMGdNVEVnSmlZZ2FVNTFiV0psY2lBOFBTQXhPU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Ulc1a2FXNW5JRDBnWVVWdVpHbHVaM05iTWwwN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FTQTlJR2xPZFcxaVpYSWdKU0F4TUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2d4S1RwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ulc1a2FXNW5JRDBnWVVWdVpHbHVaM05iTUYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZ3lLVHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdLRE1wT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FvTkNrNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzBWdVpHbHVaeUE5SUdGRmJtUnBibWR6V3pGZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpSVzVrYVc1bklEMGdZVVZ1WkdsdVozTmJNbDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITkZibVJwYm1jN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dWZWeHlYRzVjY2x4dWFsRjFaWEo1S0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lGd2lkWE5sSUhOMGNtbGpkRndpTzF4eVhHNWNjbHh1SUNBZ0lDUW9aRzlqZFcxbGJuUXBMbkpsWVdSNUtHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBUV0ZwYmxOc2FXUmxjaWdwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJUYldGc2JGTnNhV1JsY25Nb0tUdGNjbHh1SUNBZ0lDQWdJQ0JwYm1sMFVtVjJhV1YzYzFOc2FXUmxjaWdwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJCWjJWdWRITlFjbVZ6Wlc1MFlYUnBiMjRvS1R0Y2NseHVJQ0FnSUNBZ0lDQnpaWFJCWjJWdWRITlFjbVZ6Wlc1MFlYUnBiMjRvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwVFdWdWRTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUdsdWFYUk5ZWE5yS0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZEZCdmNIVndLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkRk5sYkdWamRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUdsdWFYUldZV3hwWkdGMFpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUdsdWFYUlNaV0ZzZEhsR2FXeDBaWEp6S0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZEZKbFlXeDBlU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJRWVhOemQyOXlaQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJIWVd4c1pYSjVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkRWg1Y0c5MGFHVmpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXNXBkRVJoZEdWd2FXTnJaWElvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwVTJOeWIyeHNZbUZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdhVzVwZEZOamNtOXNiQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFJCWW05MWRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUdsdWFYUkdhV3hsYVc1d2RYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBRV3h3YUdGaVpYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCcGJtbDBRVzUwYVhOd1lXMG9LVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDUW9kMmx1Wkc5M0tTNXZiaWduY21WemFYcGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2x1YVhSVGJXRnNiRk5zYVdSbGNuTW9LVHRjY2x4dUx5OGdJQ0FnSUNBZ0lHbHVhWFJOWlc1MUtDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBUV0ZwYmxOc2FXUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpTQTlJR0Z3Y0VOdmJtWnBaeTV6Ykdsa1pYSkJkWFJ2Y0d4aGVWTndaV1ZrSUM4Z01UQXdNRHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdKR0poY2lBOUlDUW9KeTVxY3kxdFlXbHVMWE5zYVdSbGNpMWlZWEluS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnpiR2xqYXlBOUlDUW9KeTVxY3kxemJHbGtaWEl0YldGcGJpY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOUVlYVnpaU0E5SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsamF5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJsY21ObGJuUlVhVzFsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0pITnNhV05yTG14bGJtZDBhQ0E5UFQwZ01DbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FrYzJ4cFkyc3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSnZkM002SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVpwYm1sMFpUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUYUc5M09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRmtaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmxaV1E2SUdGd2NFTnZibVpwWnk1emJHbGtaWEpHWVdSbFUzQmxaV1JjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdmNHeGhlVk53WldWa09pQmhjSEJEYjI1bWFXY3VjMnhwWkdWeVFYVjBiM0JzWVhsVGNHVmxaQ3hjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrYzJ4cFkyc3ViMjRvSjJKbFptOXlaVU5vWVc1blpTY3NJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDd2djMnhwWTJzc0lHTjFjbkpsYm5SVGJHbGtaU3dnYm1WNGRGTnNhV1JsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFUyeHBaR1VnUENCdVpYaDBVMnhwWkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYzJ4cFkyc3VKSE5zYVdSbGMxdGpkWEp5Wlc1MFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyWmhaR1VnWDJ4bFpuUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb2MyeHBZMnN1SkhOc2FXUmxjMXR1WlhoMFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyWmhaR1VnWDNKcFoyaDBKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hOc2FXTnJMaVJ6Ykdsa1pYTmJZM1Z5Y21WdWRGTnNhV1JsWFNrdVlXUmtRMnhoYzNNb0oxOW1ZV1JsSUY5eWFXZG9kQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaHpiR2xqYXk0a2MyeHBaR1Z6VzI1bGVIUlRiR2xrWlYwcExtRmtaRU5zWVhOektDZGZabUZrWlNCZmJHVm1kQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoMGFXTnJLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKR0poY2k1aGJtbHRZWFJsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBd0lDc2dKeVVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSURFd01DazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKSE5zYVdOckxtOXVLQ2RoWm5SbGNrTm9ZVzVuWlNjc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZEN3Z2MyeHBZMnNzSUdOMWNuSmxiblJUYkdsa1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLSE5zYVdOckxpUnpiR2xrWlhOYlkzVnljbVZ1ZEZOc2FXUmxYU2t1Y21WdGIzWmxRMnhoYzNNb0oxOW1ZV1JsSUY5c1pXWjBJRjl5YVdkb2RDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZCeWIyZHlaWE56WW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNSemJHbGpheTV2YmloN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxaVzUwWlhJNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselVHRjFjMlVnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6Wld4bFlYWmxPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMUJoZFhObElEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnpkR0Z5ZEZCeWIyZHlaWE56WW1GeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZEZCeWIyZHlaWE56WW1GeUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmxjbU5sYm5SVWFXMWxJRDBnTUR0Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNCcGMxQmhkWE5sSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJwWTJzZ1BTQnpaWFJKYm5SbGNuWmhiQ2hwYm5SbGNuWmhiQ3dnTVRBcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdhVzUwWlhKMllXd29LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxQmhkWE5sSUQwOVBTQm1ZV3h6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR1Z5WTJWdWRGUnBiV1VnS3owZ01TQXZJQ2gwYVcxbElDc2dNQzR4S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUmlZWEl1WTNOektIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nY0dWeVkyVnVkRlJwYldVZ0t5QmNJaVZjSWx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NHVnlZMlZ1ZEZScGJXVWdQajBnTVRBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pITnNhV05yTG5Oc2FXTnJLQ2R6YkdsamEwNWxlSFFuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhKbGMyVjBVSEp2WjNKbGMzTmlZWElvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaVlYSXVZM056S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBd0lDc2dKeVVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHbGpheWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemRHRnlkRkJ5YjJkeVpYTnpZbUZ5S0NrN1hISmNibHh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUlRiV0ZzYkZOc2FXUmxjbk1vS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NRb2QybHVaRzkzS1M1dmRYUmxjbGRwWkhSb0tDa2dQQ0JoY0hCRGIyNW1hV2N1WW5KbFlXdHdiMmx1ZEM1dFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyeHBaR1Z5TFhOdFlXeHNPbTV2ZENndWMyeHBZMnN0YVc1cGRHbGhiR2w2WldRcEp5a3VjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkwY3pvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNtOTNjem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMmh2ZHpvZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWdWRHVnlUVzlrWlRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdObGJuUmxjbEJoWkdScGJtYzZJQ2N4TlhCNEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2WTNWelQyNVRaV3hsWTNRNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6Ykdsa1pYSXRjMjFoYkd3dWMyeHBZMnN0YVc1cGRHbGhiR2w2WldRbktTNXpiR2xqYXlnbmRXNXpiR2xqYXljcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9KQ2gzYVc1a2IzY3BMbTkxZEdWeVYybGtkR2dvS1NBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeUlDNWhaMlZ1ZEhNdGMyeHBaR1Z5WDE5cGRHVnRKeWt1YjJabUtDZGpiR2xqYXljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10WVdkbGJuUnpMWE5zYVdSbGNqcHViM1FvTG5Oc2FXTnJMV2x1YVhScFlXeHBlbVZrS1NjcExuTnNhV05yS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZkSE02SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKeWIzZHpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Wm1sdWFYUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRhRzkzT2lBeExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRZM0p2Ykd3NklERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWlc1MFpYSk5iMlJsT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWdWRHVnlVR0ZrWkdsdVp6b2dKekkxSlNjc1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNsQmhaR1JwYm1jNklDYzRNSEI0Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZZM1Z6VDI1VFpXeGxZM1E2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjaWNwTG05dUtDZGhablJsY2tOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNobGRtVnVkQ3dnYzJ4cFkyc3NJR04xY25KbGJuUlRiR2xrWlNrZ2UxeHlYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloemJHbGpheWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG1acGJtUW9KeTVmWVdOMGFYWmxKeWt1Y21WdGIzWmxRMnhoYzNNb0oxOWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvYzJ4cFkyc3VKSE5zYVdSbGMxdGpkWEp5Wlc1MFUyeHBaR1ZkS1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUVdkbGJuUnpVSEpsYzJWdWRHRjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFoyVnVkSE10YzJ4cFpHVnlMbk5zYVdOckxXbHVhWFJwWVd4cGVtVmtKeWt1YzJ4cFkyc29KM1Z1YzJ4cFkyc25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVwZEVGblpXNTBjMUJ5WlhObGJuUmhkR2x2YmlncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBRV2RsYm5SelVISmxjMlZ1ZEdGMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2drS0hkcGJtUnZkeWt1YjNWMFpYSlhhV1IwYUNncElENDlJR0Z3Y0VOdmJtWnBaeTVpY21WaGEzQnZhVzUwTG0xa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFoyVnVkSE10YzJ4cFpHVnlJQzVoWjJWdWRITXRjMnhwWkdWeVgxOXBkR1Z0SnlrdWIyNG9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1d1lYSmxiblFvS1M1bWFXNWtLQ2N1WDJGamRHbDJaU2NwTG5KbGJXOTJaVU5zWVhOektDZGZZV04wYVhabEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbUZrWkVOc1lYTnpLQ2RmWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUkJaMlZ1ZEhOUWNtVnpaVzUwWVhScGIyNG9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSE5sZEVGblpXNTBjMUJ5WlhObGJuUmhkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0pDZ25MbXB6TFdGblpXNTBjeTF6Ykdsa1pYSW5LUzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUNSaFoyVnVkQ0E5SUNRb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeUlDNWZZV04wYVhabElDNXFjeTFoWjJWdWRITXRjMnhwWkdWeVgxOXphRzl5ZENjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKR1oxYkd3Z1BTQWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjbDlmWm5Wc2JDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtablZzYkM1bWFXNWtLQ2N1YW5NdFlXZGxiblJ6TFhOc2FXUmxjbDlmWm5Wc2JGOWZhVzFuSnlrdVlYUjBjaWduYzNKakp5d2dKR0ZuWlc1MExtUmhkR0VvSjJGblpXNTBMV2x0WnljcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pHWjFiR3d1Wm1sdVpDZ25MbXB6TFdGblpXNTBjeTF6Ykdsa1pYSmZYMloxYkd4ZlgyNWhiV1VuS1M1MFpYaDBLQ1JoWjJWdWRDNWtZWFJoS0NkaFoyVnVkQzF1WVcxbEp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0dodmJtVWdQU0FrWVdkbGJuUXVaR0YwWVNnbllXZGxiblF0Y0dodmJtVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKR1oxYkd3dVptbHVaQ2duTG1wekxXRm5aVzUwY3kxemJHbGtaWEpmWDJaMWJHeGZYM0JvYjI1bElHRW5LUzUwWlhoMEtIQm9iMjVsS1M1aGRIUnlLQ2RvY21WbUp5d2dKM1JsYkRvbklDc2djR2h2Ym1VdWNtVndiR0ZqWlNndld5MWNYSE1vS1Ywdlp5d2dKeWNwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWhhV3dnUFNBa1lXZGxiblF1WkdGMFlTZ25ZV2RsYm5RdGJXRnBiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrWm5Wc2JDNW1hVzVrS0NjdWFuTXRZV2RsYm5SekxYTnNhV1JsY2w5ZlpuVnNiRjlmYldGcGJDQmhKeWt1ZEdWNGRDaHRZV2xzS1M1aGRIUnlLQ2RvY21WbUp5d2dKMjFoYVd4MGJ6b25JQ3NnYldGcGJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIxY213Z1BTQWtZV2RsYm5RdVpHRjBZU2duWVdkbGJuUXRkWEpzSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSbWRXeHNMbVpwYm1Rb0p5NXFjeTFoWjJWdWRITXRjMnhwWkdWeVgxOW1kV3hzWDE5MWNtd2dZU2NwTG1GMGRISW9KMmh5WldZbkxDQjFjbXdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRZV2RsYm5SekxYTnNhV1JsY2w5ZmRYSnNKeWt1WVhSMGNpZ25hSEpsWmljc0lIVnliQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YVhSTlpXNTFLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxdFpXNTFMWFJ2WjJkc1pYSW5LUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvY21WbUlEMGdKQ2gwYUdsektTNWhkSFJ5S0Nkb2NtVm1KeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXRaVzUxTFhSdloyZHNaWEpiYUhKbFpqMWNJaWNnS3lCb2NtVm1JQ3NnSjF3aVhTY3BMblJ2WjJkc1pVTnNZWE56S0NkZllXTjBhWFpsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb2FISmxaaWt1ZEc5bloyeGxRMnhoYzNNb0oxOWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFcxbGJuVXVYMkZqZEdsMlpTY3BMbXhsYm1kMGFDQTlQU0F3SUQ4Z0pDZ25MbXB6TFcxbGJuVXRiM1psY214aGVTY3BMbWhwWkdVb0tTQTZJQ1FvSnk1cWN5MXRaVzUxTFc5MlpYSnNZWGtuS1M1emFHOTNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMVzFsYm5VdGIzWmxjbXhoZVNjcExtOXVLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF0Wlc1MUxYUnZaMmRzWlhJc0lDNXFjeTF0Wlc1MUp5a3VjbVZ0YjNabFEyeGhjM01vSjE5aFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNoMGFHbHpLUzVvYVdSbEtDbGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXVnVkUzF6WldOdmJtUXRkRzluWjJ4bGNpY3BMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1MGIyZG5iR1ZEYkdGemN5Z25YMkZqZEdsMlpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXVnVkUzF6WldOdmJtUW5LUzUwYjJkbmJHVkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHVhWFJOWVhOcktDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF0WVhOclgxOTBaV3duS1M1cGJuQjFkRzFoYzJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYTnJPaUFuS3prZ0tEazVPU2tnT1RrNUxUazVMVGs1SjF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUVsdWNIVjBiV0Z6YXk1bGVIUmxibVJCYkdsaGMyVnpLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKMjUxYldWeWFXTW5PaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRYUnZWVzV0WVhOck9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkMDFoYzJ0UGJraHZkbVZ5T2lCbVlXeHpaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKaFpHbDRVRzlwYm5RNklGd2lMRndpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozSnZkWEJUWlhCaGNtRjBiM0k2SUZ3aUlGd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsbmFYUnpPaUF3TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXeHNiM2ROYVc1MWN6b2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2UjNKdmRYQTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEVGc2FXZHVPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YldGemEwRnpUblZ0WW1WeU9pQjBjblZsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZmJuVnRaWEpwWXljcExtbHVjSFYwYldGemF5aGNJbTUxYldWeWFXTmNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFcxaGMydGZYMk4xY25KbGJtTjVKeWt1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFabVpwZURvZ0o4S2cwWURSZzlDeExpZGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGJXRnphMTlmYzNGMVlYSmxKeWt1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFabVpwZURvZ0o4S2cwTHpDc2lkY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10YldGemExOWZjM0YxWVhKbFgyWnBiSFJsY2ljcExtbHVjSFYwYldGemF5aGNJbTUxYldWeWFXTmNJaXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFYZzZJQ2ZDb05DOHdySW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFibTFoYzJ0QmMwNTFiV0psY2pvZ1ptRnNjMlZjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZlkzVnljbVZ1WTNsZlptbHNkR1Z5SnlrdWFXNXdkWFJ0WVhOcktGd2liblZ0WlhKcFkxd2lMQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4xWm1acGVEb2dKOEtnMFlEUmc5Q3hMaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ1YldGemEwRnpUblZ0WW1WeU9pQm1ZV3h6WlZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF0WVhOclgxOWhaMlVuS1M1cGJuQjFkRzFoYzJzb1hDSnVkVzFsY21salhDSXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZtWm1sNE9pQW53cURRdTlDMTBZSW5YSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXMWhjMnRmWDNCbGNtTmxiblFuS1M1cGJuQjFkRzFoYzJzb1hDSnVkVzFsY21salhDSXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZtWm1sNE9pQW5KU2RjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRiV0Z6YTE5ZlkzVnljbVZ1WTNrc0lDNXFjeTF0WVhOclgxOXpjWFZoY21Vc0lDNXFjeTF0WVhOclgxOXdaWEpqWlc1MEp5a3ViMjRvSjJKc2RYSW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHNWxaV1FnWm05eUlISmxiVzkyWlNCemRXWm1hWGhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDFKdlltbHVTR1Z5WW05MGN5OUpibkIxZEcxaGMyc3ZhWE56ZFdWekx6RTFOVEZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhZZ1BTQWtLSFJvYVhNcExuWmhiQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpQTlQU0F3SUh4OElIWWdQVDBnSnljcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VkbUZzS0NjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHbHVhWFJRYjNCMWNDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlVOc1lYTnpPaUFuWDNCdmNIVndKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWFYwYjBadlkzVnpPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1luUnVWSEJzT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiV0ZzYkVKMGJqb2dKenh6Y0dGdUlHUmhkR0V0Wm1GdVkzbGliM2d0WTJ4dmMyVWdZMnhoYzNNOVhDSm1ZVzVqZVdKdmVDMWpiRzl6WlMxemJXRnNiRndpUGp4emNHRnVJR05zWVhOelBWd2liR2x1YTF3aVB0Q1gwTERRdXRHQTBZdlJndEdNUEM5emNHRnVQand2YzNCaGJqNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM1ZqYURvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRjRzl3ZFhBbktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRdVptRnVZM2xpYjNndVkyeHZjMlVvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLUzVtWVc1amVXSnZlQ2h2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kMmx1Wkc5M0xteHZZMkYwYVc5dUxtaGhjMmdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlDUmpiblFnUFNBa0tIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b1lYTm9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NSamJuUXViR1Z1WjNSb0lDWW1JQ1JqYm5RdWFHRnpRMnhoYzNNb0ozQnZjSFZ3TFdOdWRDY3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0xtWmhibU41WW05NExtOXdaVzRvSkdOdWRDd2diM0IwYVc5dWN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNXBkRk5sYkdWamRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QnpaV3hsWTNReVhISmNiaUFnSUNBZ0lDQWdKQzVtYmk1elpXeGxZM1F5TG1SbFptRjFiSFJ6TG5ObGRDaGNJblJvWlcxbFhDSXNJRndpWTNWemRHOXRYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lDUXVabTR1YzJWc1pXTjBNaTVrWldaaGRXeDBjeTV6WlhRb1hDSnRhVzVwYlhWdFVtVnpkV3gwYzBadmNsTmxZWEpqYUZ3aUxDQkpibVpwYm1sMGVTazdYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxtcHpMWE5sYkdWamRESW5LUzV6Wld4bFkzUXlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0pDaDNhVzVrYjNjcExtOXVLQ2R5WlhOcGVtVW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6Wld4bFkzUXlKeWt1YzJWc1pXTjBNaWdwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0dkx5QWdJQ0FnSUNBZ0pDZ25MbXB6TFhObGJHVmpkREluS1M1elpXeGxZM1F5S0NkdmNHVnVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0pDaGNJaTVxY3kxaFoyVnVkQzF6WldGeVkyaGNJaWt1YzJWc1pXTjBNaWg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvWlcxbE9pQW5ZV2RsYm5Sekp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUNjeE1EQWxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Z1WjNWaFoyVTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBWRzl2VTJodmNuUTZJR1oxYm1OMGFXOXVJQ2hoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpMEovUXZ0QzIwTERRdTlHRDBMblJnZEdDMExBc0lOQ3kwTExRdGRDMDBMalJndEMxSUZ3aUlDc2dLR0V1YldsdWFXMTFiU0F0SUdFdWFXNXdkWFF1YkdWdVozUm9LU0FySUZ3aUlOQzQwTHZRdUNEUXNkQyswTHZSak5HSTBMVWcwWUhRdU5DODBMTFF2dEM3MEw3UXNsd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYW1GNE9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY213NklGd2lhSFIwY0hNNkx5OWhjR2t1YlhscWMyOXVMbU52YlM5aWFXNXpMMjlyZVhacFhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFZIbHdaVG9nSjJwemIyNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1lYazZJREkxTUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdaMWJtTjBhVzl1SUNod1lYSmhiWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4T2lCd1lYSmhiWE11ZEdWeWJTd2dMeThnYzJWaGNtTm9JSFJsY20xY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1T2lBbllXZGxiblJmYzJWaGNtTm9KMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6YzFKbGMzVnNkSE02SUdaMWJtTjBhVzl1SUNoa1lYUmhLU0I3WEhKY2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2Wnloa1lYUmhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBjeUE5SUNRdWJXRndLR1JoZEdFc0lHWjFibU4wYVc5dUlDaDJZV3gxWlN3Z2EyVjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYTJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dkbUZzZFdVdWNHRm5aWFJwZEd4bExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdkbGJuUTZJSFpoYkhWbFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh5WlhOMWJIUnpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSek9pQnlaWE4xYkhSekxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVTZJSFJ5ZFdWY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZTWlhOMWJIUTZJR1p2Y20xaGRGSmxjM1ZzZEN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZUWld4bFkzUnBiMjQ2SUdadmNtMWhkRk5sYkdWamRHbHZiaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWE5qWVhCbFRXRnlhM1Z3T2lCbWRXNWpkR2x2YmlBb2JXRnlhM1Z3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRnlhM1Z3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBdkx5QnNaWFFnYjNWeUlHTjFjM1J2YlNCbWIzSnRZWFIwWlhJZ2QyOXlhMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdFNXNXdkWFJNWlc1bmRHZzZJRE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUdsdGRXMVRaV3hsWTNScGIyNU1aVzVuZEdnNklERXNYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdabTl5YldGMFVtVnpkV3gwS0dsMFpXMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMHViRzloWkdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2ZRdjlDKzBMalJnZEM2NG9DbUp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSnp4a2FYWWdZMnhoYzNNOVhDSnpaV3hsWTNReUxYSmxjM1ZzZEMxaFoyVnVkRndpUGp4emRISnZibWMrSnlBclhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNWhaMlZ1ZEM1d1lXZGxkR2wwYkdVZ0t5QW5QQzl6ZEhKdmJtYytQR0p5UGljZ0t5QnBkR1Z0TG1GblpXNTBMblpoYkhWbElDc2dKend2WkdsMlBpYzdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWnZjbTFoZEZObGJHVmpkR2x2YmlocGRHVnRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBkR1Z0TG1GblpXNTBMbkJoWjJWMGFYUnNaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXRm5aVzUwTFhObFlYSmphQ2NwTG05dUtDZHpaV3hsWTNReU9uTmxiR1ZqZENjc0lHWjFibU4wYVc5dUlDaGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnWlM1d1lYSmhiWE11WkdGMFlUdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhrWVhSaEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1SUQwZ1pHRjBZUzVoWjJWdWRDNTFjbWxjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFZtRnNhV1JoZEdVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSkM1MllXeHBaR0YwYjNJdVlXUmtUV1YwYUc5a0tGd2ljR2h2Ym1WY0lpd2dablZ1WTNScGIyNGdLSFpoYkhWbExDQmxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl3ZEdsdmJtRnNLR1ZzWlcxbGJuUXBJSHg4SUM5ZVhGd3JYRnhrWEZ4elhGd29YRnhrZXpOOVhGd3BYRnh6WEZ4a2V6TjlMVnhjWkhzeWZTMWNYR1I3TW4wa0x5NTBaWE4wS0haaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNCOUxDQmNJbEJzWldGelpTQnpjR1ZqYVdaNUlHRWdkbUZzYVdRZ2JXOWlhV3hsSUc1MWJXSmxjbHdpS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYjNCMGFXOXVjeUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSlFiR0ZqWlcxbGJuUTZJR1oxYm1OMGFXOXVJQ2hsY25KdmNpd2daV3hsYldWdWRDa2dlMzBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEoxYkdWek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YUc5dVpUb2dYQ0p3YUc5dVpWd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxMllXeHBaR0YwWlNjcExtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG5aaGJHbGtZWFJsS0c5d2RHbHZibk1wTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUlNaV0ZzZEhsR2FXeDBaWEp6S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MW1hV3gwWlhKekxYSmxZV3gwZVMxMGVYQmxKeWt1YjI0b0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFptbHNkR1Z5Y3kxeVpXRnNkSGt0ZEdsMGJHVW5LUzUwWlhoMEtDUW9kR2hwY3lrdVpHRjBZU2duWm1sc2RHVnljeTEwYVhSc1pTY3BLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFVHRnpjM2R2Y21Rb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDUW9KeTVxY3kxd1lYTnpkMjl5WkNjcExteGxibWQwYUNBOVBUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlrY205d1ltOTRMM3A0WTNaaWJseHlYRzRnSUNBZ0lDQWdJQ1F1WVdwaGVDaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIVnliRG9nWENJdUwycHpMMnhwWW5NdmVuaGpkbUp1TG1welhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbE9pQmNJbk5qY21sd2RGd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV05vWlRvZ2RISjFaVnh5WEc0Z0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVaRzl1WlNobWRXNWpkR2x2YmlBb2MyTnlhWEIwTENCMFpYaDBVM1JoZEhWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVtWVdsc0tHWjFibU4wYVc5dUlDaHFjWGhvY2l3Z2MyVjBkR2x1WjNNc0lHVjRZMlZ3ZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RGY25KdmNpQnNiMkZrYVc1bklIcDRZM1ppYmljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2x1YVhRb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxd1lYTnpkMjl5WkNjcExtOXVLQ2RyWlhsMWNDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdLSHA0WTNaaWJpa2dQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJDQTlJQ1FvZEdocGN5a3VkbUZzS0NrdWRISnBiU2dwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0I2ZUdOMlltNG9kbUZzS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyNTBJRDBnSkNoMGFHbHpLUzV6YVdKc2FXNW5jeWduTG1sdWNIVjBMV2hsYkhBbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR051ZEM1eVpXMXZkbVZEYkdGemN5Z25YekFnWHpFZ1h6SWdYek1nWHpRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXd3ViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyNTBMbUZrWkVOc1lYTnpLQ2RmSnlBcklISmxjeTV6WTI5eVpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LSEpsY3k1elkyOXlaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjR0Z6YzNkdmNtUW5LUzVyWlhsMWNDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnBibWwwVW1WMmFXVjNjMU5zYVdSbGNpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdKSE5zYVdSbGNpQTlJQ1FvSnk1cWN5MXpiR2xrWlhJdGNtVjJhV1YzY3ljcE8xeHlYRzRnSUNBZ0lDQWdJQ1J6Ykdsa1pYSXVjMnhwWTJzb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSnZkM002SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVpwYm1sMFpUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUYUc5M09pQXpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iMk4xYzA5dVUyVnNaV04wT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR0Z3ZEdsMlpVaGxhV2RvZERvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzkwYzBOc1lYTnpPaUFuYzJ4cFkyc3RaRzkwY3lCZlltbG5KeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMybDJaVG9nVzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbXhuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJodmR6b2dNVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lBa1ltbG5JRDBnSkNnbkxuSmxkbWxsZDNOZlgyeHBjM1F1WDJKcFp5QXVjbVYyYVdWM2MxOWZiR2x6ZEY5ZmFYUmxiU2NwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVpXNTBJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSkdKcFp5NXNaVzVuZEdnZ0ppWWdKSE5zYVdSbGNpNXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBRbWxuS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSemJHbGtaWEpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXViMjRvSjJKbFptOXlaVU5vWVc1blpTY3NJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDd2djMnhwWTJzc0lHTjFjbkpsYm5SVGJHbGtaU3dnYm1WNGRGTnNhV1JsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBVMnhwWkdVZ0lUMGdibVY0ZEZOc2FXUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2tKcFp5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblFnUFNCamRYSnlaVzUwVTJ4cFpHVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIyNG9KMkZtZEdWeVEyaGhibWRsSnl3Z1puVnVZM1JwYjI0Z0tHVjJaVzUwTENCemJHbGpheXdnWTNWeWNtVnVkRk5zYVdSbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVTJ4cFpHVWdJVDBnWTNWeWNtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUW1sbktDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNGdZMnhsWVhKQ2FXY29LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1JpYVdjdVptRmtaVTkxZENncExtVnRjSFI1S0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhObGRFSnBaeWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtcHpMWE5zYVdSbGNpMXlaWFpwWlhkeklDNXpiR2xqYXkxamRYSnlaVzUwSUM1eVpYWnBaWGR6WDE5c2FYTjBYMTlwZEdWdFgxOXBibTVsY2ljcExtTnNiMjVsS0NrdVlYQndaVzVrVkc4b0pHSnBaeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1JpYVdjdVptRmtaVWx1S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaWFXY3VjR0Z5Wlc1MEtDa3VZM056S0Nkb1pXbG5hSFFuTENBa1ltbG5MbTkxZEdWeVNHVnBaMmgwS0hSeWRXVXBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdablZ1WTNScGIyNGdhVzVwZEZKbFlXeDBlU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBibWwwS0NrN1hISmNiaUFnSUNBZ0lDQWdKQ2hrYjJOMWJXVnVkQ2t1YjI0b0ozQmtiM0JoWjJWZmJHOWhaQ2NzSUdaMWJtTjBhVzl1SUNobExDQmpiMjVtYVdjc0lISmxjM0J2Ym5ObEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVhWFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBa0tHUnZZM1Z0Wlc1MEtTNXZiaWduYlhObE1sOXNiMkZrSnl3Z1puVnVZM1JwYjI0Z0tHVXNJR1JoZEdFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXlaV0ZzZEhrdGJHbHpkQzF6Ykdsa1pYSmJaR0YwWVMxcGJtbDBQVndpWm1Gc2MyVmNJbDBuS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUFrZEc5bloyeGxjbk1nUFNBa0tIUm9hWE1wTG1acGJtUW9KeTVxY3kxeVpXRnNkSGt0YkdsemRDMXpiR2xrWlhKZlgybHRaeTEzY21Gd2NHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKR052ZFc1MFpYSWdQU0FrS0hSb2FYTXBMbVpwYm1Rb0p5NXFjeTF5WldGc2RIa3RiR2x6ZEMxemJHbGtaWEpmWDJOdmRXNTBaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBiMmRuYkdWeWN5NWxZV05vS0daMWJtTjBhVzl1SUNocEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1dmJpZ25iVzkxYzJWdmRtVnlKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtkRzluWjJ4bGNuTXVjbVZ0YjNabFEyeGhjM01vSjE5aFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtZMjkxYm5SbGNpNTBaWGgwS0drZ0t5QXhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNWtZWFJoS0NkcGJtbDBKeXdnSjNSeWRXVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YVhSSFlXeHNaWEo1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MW5ZV3hzWlhKNUxXNWhkaWNwTG5Oc2FXTnJLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaRzkwY3pvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5Y205M2N6b2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1bWFXNXBkR1U2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTm9iM2M2SURZc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJOeWIyeHNPaUF4TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjJOMWMwOXVVMlZzWldOME9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYzA1aGRrWnZjam9nSnk1cWN5MW5ZV3hzWlhKNVgxOXpiR2xrWlhJbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTndiMjV6YVhabE9pQmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0d2IybHVkRG9nWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJXUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRhRzkzT2lBelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZExGeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxbllXeHNaWEo1SnlrdVpXRmphQ2htZFc1amRHbHZiaUFvYVN3Z1pXd3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUNSemJHbGtaWElnUFNBa0tHVnNLUzVtYVc1a0tDY3Vhbk10WjJGc2JHVnllVjlmYzJ4cFpHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lBa1kzVnljbVZ1ZENBOUlDUW9aV3dwTG1acGJtUW9KeTVxY3kxbllXeHNaWEo1WDE5amRYSnlaVzUwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSemJHbGtaWEl1YzJ4cFkyc29lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5MGN6b2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDNNNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtWnBibWwwWlRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYQmxWRzlUYkdsa1pUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpUbUYyUm05eU9pQW5MbXB6TFdkaGJHeGxjbmt0Ym1GMkp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTnBkbVU2SUZ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKeWIzZHpPaUJtWVd4elpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1J6Ykdsa1pYSXViMjRvSjJGbWRHVnlRMmhoYm1kbEp5d2dablZ1WTNScGIyNGdLR1YyWlc1MExDQnpiR2xqYXl3Z1kzVnljbVZ1ZEZOc2FXUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa1kzVnljbVZ1ZEM1MFpYaDBLQ3NyWTNWeWNtVnVkRk5zYVdSbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUFrYkdsdWEzTWdQU0FrYzJ4cFpHVnlMbVpwYm1Rb0p5NXpiR2xrWlRwdWIzUW9Mbk5zYVdOckxXTnNiMjVsWkNrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDaGxiQ2t1Wm1sdVpDZ25MbXB6TFdkaGJHeGxjbmxmWDNSdmRHRnNKeWt1ZEdWNGRDZ2tiR2x1YTNNdWJHVnVaM1JvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkd4cGJtdHpMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1F1Wm1GdVkzbGliM2d1YjNCbGJpZ2tiR2x1YTNNc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyOXdPaUIwY25WbFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0FrYkdsdWEzTXVhVzVrWlhnb2RHaHBjeWtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaURRcE5HRDBMM1F1dEdHMExqUmp5RFFzdEMrMExmUXN0R0EwTERSaWRDdzBMWFJnaURRdnRDNjBMN1F2ZEdIMExEUXZkQzQwTFVnMExUUXU5R1BJTkM4MEwzUXZ0QzIwTFhSZ2RHQzBMTFF0ZEM5MEwzUXZ0Q3owTDRnMFlmUXVOR0IwTHZRc0NEUmdkQzcwTDdRc3RDd0lOQzkwTEFnMEw3UmdkQzkwTDdRc3RDdzBMM1F1TkM0SU5HSDBMalJnZEM3MExBZzBMZ2cwTHpRc05HQjBZSFF1TkN5MExBZzBMN1F1dEMrMEwzUmg5Q3cwTDNRdU5DNVhISmNiaUFnSUNBZ0tpQndZWEpoYlNBZ2FVNTFiV0psY2lCSmJuUmxaMlZ5SU5DbjBMalJnZEM3MEw0ZzBMM1FzQ0RRdnRHQjBMM1F2dEN5MExVZzBMclF2dEdDMEw3UmdOQyswTFBRdmlEUXZkR0QwTGJRdmRDK0lOR0IwWVRRdnRHQTBMelF1TkdBMEw3UXN0Q3cwWUxSakNEUXZ0QzYwTDdRdmRHSDBMRFF2ZEM0MExWY2NseHVJQ0FnSUNBcUlIQmhjbUZ0SUNCaFJXNWthVzVuY3lCQmNuSmhlU0RRbk5DdzBZSFJnZEM0MExJZzBZSFF1OUMrMExJZzBMalF1OUM0SU5DKzBMclF2dEM5MFlmUXNOQzkwTGpRdVNEUXROQzcwWThnMFlmUXVOR0IwTFhRdXlBb01Td2dOQ3dnTlNrc1hISmNiaUFnSUNBZ0tpQWdJQ0FnSUNBZ0lOQzkwTERRdjlHQTBMalF2TkMxMFlBZ1d5ZlJqOUN4MEx2UXZ0QzYwTDRuTENBbjBZL1FzZEM3MEw3UXV0Q3dKeXdnSjlHUDBMSFF1OUMrMExvblhWeHlYRzRnSUNBZ0lDb2djbVYwZFhKdUlGTjBjbWx1WjF4eVhHNGdJQ0FnSUNvZ1hISmNiaUFnSUNBZ0tpQm9kSFJ3Y3pvdkwyaGhZbkpoYUdGaWNpNXlkUzl3YjNOMEx6RXdOVFF5T0M5Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1oyVjBUblZ0Ulc1a2FXNW5LR2xPZFcxaVpYSXNJR0ZGYm1ScGJtZHpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE5GYm1ScGJtY3NJR2s3WEhKY2JpQWdJQ0FnSUNBZ2FVNTFiV0psY2lBOUlHbE9kVzFpWlhJZ0pTQXhNREE3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2xPZFcxaVpYSWdQajBnTVRFZ0ppWWdhVTUxYldKbGNpQThQU0F4T1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelJXNWthVzVuSUQwZ1lVVnVaR2x1WjNOYk1sMDdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhU0E5SUdsT2RXMWlaWElnSlNBeE1EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNocEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNneEtUcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelJXNWthVzVuSUQwZ1lVVnVaR2x1WjNOYk1GMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2d5S1RwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnS0RNcE9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBb05DazZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MwVnVaR2x1WnlBOUlHRkZibVJwYm1keld6RmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ulc1a2FXNW5JRDBnWVVWdVpHbHVaM05iTWwwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5GYm1ScGJtYzdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1cGRFaDVjRzkwYUdWaktDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFvZVhCdmRHaGxZeWNwTG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ0pHTnZjM1FnUFNBa0tIUm9hWE1wTG1acGJtUW9KeTVxY3kxb2VYQnZkR2hsWTE5ZlkyOXpkQ2NwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YzNRZ1BTQWtZMjl6ZEM1MllXd29LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtjR0Y1YldWdWRGQmxjbU5sYm5RZ1BTQWtLSFJvYVhNcExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZjR0Y1YldWdWRDMXdaWEpqWlc1MEp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIQmhlVzFsYm5SVGRXMGdQU0FrS0hSb2FYTXBMbVpwYm1Rb0p5NXFjeTFvZVhCdmRHaGxZMTlmY0dGNWJXVnVkQzF6ZFcwbktTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2NHRjViV1Z1ZEZOMWJWQnBZMnRsY2lBOUlDUW9kR2hwY3lrdVptbHVaQ2duTG1wekxYQnBZMnRsY2w5ZmRHRnlaMlYwSnlsYk1GMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHRm5aU0E5SUNRb2RHaHBjeWt1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5aFoyVW5LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtZM0psWkdsMElEMGdKQ2gwYUdsektTNW1hVzVrS0NjdWFuTXRhSGx3YjNSb1pXTmZYMk55WldScGRDY3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnpiR2xrWlhJZ1BTQWtLSFJvYVhNcExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZjMnhwWkdWeUp5a3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHbDBaVzF6SUQwZ0pDaDBhR2x6S1M1bWFXNWtLQ2N1YW5NdGFIbHdiM1JvWldOZlgybDBaVzBuS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYzJOeWIyeHNJRDBnSkNoMGFHbHpLUzVtYVc1a0tDY3Vhbk10YUhsd2IzUm9aV05mWDNOamNtOXNiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtRjBaU0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE11WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVlYUmxMbkIxYzJnb2NHRnljMlZHYkc5aGRDZ2tLSFJvYVhNcExtWnBibVFvSnk1cWN5MW9lWEJ2ZEdobFkxOWZjbUYwWlNjcExuUmxlSFFvS1M1eVpYQnNZV05sS0Z3aUxGd2lMQ0JjSWk1Y0lpa3BJSHg4SURBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh5WVhSbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpoZEdWTlJTQTlJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrYVhSbGJYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVhSbFRVVXVjSFZ6YUNod1lYSnpaVVpzYjJGMEtDUW9kR2hwY3lrdVptbHVaQ2duTG1wekxXaDVjRzkwYUdWalgxOXlZWFJsVFVVbktTNTBaWGgwS0NrdWNtVndiR0ZqWlNoY0lpeGNJaXdnWENJdVhDSXBLU0I4ZkNBd0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvY21GMFpVMUZLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOeVpXUnBkQ0E5SURBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhaMlVnUFNBa1lXZGxMblpoYkNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjR1Z5WTJWdWREdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pHTnZjM1F1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFYZzZJQ2ZDb05HQTBZUFFzUzRuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNWpiMjF3YkdWMFpUb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YzNRZ1BTQWtLSFJvYVhNcExuWmhiQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J3WVhsdFpXNTBVM1Z0TG5CeWIzQW9KMjFoZUNjc0lHTnZjM1FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J3WVhsdFpXNTBVM1Z0VUdsamEyVnlMbTV2VldsVGJHbGtaWEl1ZFhCa1lYUmxUM0IwYVc5dWN5aDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpoYm1kbE9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmJXbHVKem9nTUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R0WVhnbk9pQmpiM04wWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrY0dGNWJXVnVkRk4xYlM1MGNtbG5aMlZ5S0NkamFHRnVaMlVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUndZWGx0Wlc1MFUzVnRMbTl1S0NkamFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WlhKalpXNTBJRDBnSkNoMGFHbHpLUzUyWVd3b0tTQXFJREV3TUNBdklHTnZjM1E3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR1Z5WTJWdWRDQStJREV3TUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCbGNtTmxiblFnUFNBeE1EQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1MllXd29ZMjl6ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqY21Wa2FYUWdQU0JqWVd4alEzSmxaR2wwS0dOdmMzUXNJSEJsY21ObGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhCaGVXMWxiblJRWlhKalpXNTBMblpoYkNod1pYSmpaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUmpjbVZrYVhRdWRtRnNLR055WldScGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVhSbGJYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb2FTd2daV3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0dWc0tTNW1hVzVrS0NjdWFuTXRhSGx3YjNSb1pXTmZYMlpwY25OMEp5a3VkR1Y0ZENobWIzSnRZWFJRY21salpTZ2tjR0Y1YldWdWRGTjFiUzUyWVd3b0tTa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9aV3dwTG1acGJtUW9KeTVxY3kxb2VYQnZkR2hsWTE5ZmNHVnliVzl1ZEdnbktTNTBaWGgwS0dadmNtMWhkRkJ5YVdObEtHTmhiR05RWlhKTmIyNTBhQ2hqY21Wa2FYUXNJSEpoZEdWYmFWMHNJR0ZuWlNrcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tHVnNLUzVtYVc1a0tDY3Vhbk10YUhsd2IzUm9aV05mWDNCbGNtMXZiblJvVFVVbktTNTBaWGgwS0dadmNtMWhkRkJ5YVdObEtHTmhiR05RWlhKTmIyNTBhQ2hqY21Wa2FYUXNJSEpoZEdWTlJWdHBYU3dnWVdkbEtTa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9aV3dwTG1acGJtUW9KeTVxY3kxb2VYQnZkR2hsWTE5ZlpXTnZibTl0ZVNjcExuUmxlSFFvWm05eWJXRjBVSEpwWTJVb1kyRnNZMUJsY2sxdmJuUm9LR055WldScGRDd2djbUYwWlZ0cFhTd2dZV2RsS1NBcUlERXlJQ29nWVdkbElDMGdZMkZzWTFCbGNrMXZiblJvS0dOeVpXUnBkQ3dnY21GMFpVMUZXMmxkTENCaFoyVXBJQ29nTVRJZ0tpQmhaMlVwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKSEJoZVcxbGJuUlRkVzB1YVc1d2RYUnRZWE5yS0Z3aWJuVnRaWEpwWTF3aUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFYZzZJQ2ZDb05HQTBZUFFzUzRuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNWpiMjF3YkdWMFpUb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjR0Z5Wlc1MGN5Z25MbXB6TFhCcFkydGxjaWNwTG1acGJtUW9KeTVxY3kxd2FXTnJaWEpmWDNSaGNtZGxkQ2NwV3pCZExtNXZWV2xUYkdsa1pYSXVjMlYwS0NRb2RHaHBjeWt1ZG1Gc0tDa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkhCaGVXMWxiblJUZFcwdWRISnBaMmRsY2lnblkyaGhibWRsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaFoyVXViMjRvSjJOb1lXNW5aU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZuWlNBOUlDUmhaMlV1ZG1Gc0tDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVhSbGJYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb2FTd2daV3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0dWc0tTNW1hVzVrS0NjdWFuTXRhSGx3YjNSb1pXTmZYM0JsY20xdmJuUm9KeWt1ZEdWNGRDaG1iM0p0WVhSUWNtbGpaU2hqWVd4alVHVnlUVzl1ZEdnb1kzSmxaR2wwTENCeVlYUmxXMmxkTENCaFoyVXBLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2hsYkNrdVptbHVaQ2duTG1wekxXaDVjRzkwYUdWalgxOXdaWEp0YjI1MGFFMUZKeWt1ZEdWNGRDaG1iM0p0WVhSUWNtbGpaU2hqWVd4alVHVnlUVzl1ZEdnb1kzSmxaR2wwTENCeVlYUmxUVVZiYVYwc0lHRm5aU2twS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0dWc0tTNW1hVzVrS0NjdWFuTXRhSGx3YjNSb1pXTmZYMlZqYjI1dmJYa25LUzUwWlhoMEtHWnZjbTFoZEZCeWFXTmxLR05oYkdOUVpYSk5iMjUwYUNoamNtVmthWFFzSUhKaGRHVmJhVjBzSUdGblpTa2dLaUF4TWlBcUlHRm5aU0F0SUdOaGJHTlFaWEpOYjI1MGFDaGpjbVZrYVhRc0lISmhkR1ZOUlZ0cFhTd2dZV2RsS1NBcUlERXlJQ29nWVdkbEtTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSelkzSnZiR3d1Wm1sdVpDZ25MbWg1Y0c5MGFHVmpYMTlzYVhOMFgxOXBkR1Z0SnlrdVpXRmphQ2htZFc1amRHbHZiaUFvYVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNW1hVzVrS0NjdWFIbHdiM1JvWldOZlgyeHBjM1JmWDJsMFpXMWZYMmx1Ym1WeUp5a3ViMjRvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhOc2FXUmxjaTV6YkdsamF5Z25jMnhwWTJ0SGIxUnZKeXdnYVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdacGJIUmxjbk1zSU5DNjBMRFF0dEMwMFl2UXVTRFJnZEMxMEx2UXRkQzYwWUlnMFlUUXVOQzcwWXpSZ3RHQTBZUFF0ZEdDSU5DKzBZTFF0TkMxMEx2UmpOQzkwTDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMGVXeGxJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb2RHaHBjeWt1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5bWFXeDBaWEluS1M1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJtVG1GdFpTQTlJQ1FvZEdocGN5a3VaR0YwWVNnbmFIbHdiM1JvWldNdFptbHNkR1Z5Snlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpTQTlJQ2RtYVd4MFpYSXRKeUFySUdaT1lXMWxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVXVjSFZ6YUNnbkxpY2dLeUJqYkdGemMwNWhiV1VnS3lBbmUyUnBjM0JzWVhrNmJtOXVaU0FoYVcxd2IzSjBZVzUwZlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUNSamFHVmphMkp2ZUdWeklEMGdKQ2gwYUdsektTNW1hVzVrS0NkcGJuQjFkRnQwZVhCbFBXTm9aV05yWW05NFhTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdOb1pXTnJZbTk0WlhNdWIyNG9KMk5vWVc1blpTY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ0pHTm9aV05yWldRZ1BTQWtZMmhsWTJ0aWIzaGxjeTVtYVd4MFpYSW9KenBqYUdWamEyVmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NSamFHVmphMlZrTG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE11Y21WdGIzWmxRMnhoYzNNb1kyeGhjM05PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdZZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdOb1pXTnJaV1F1WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1MbkIxYzJnb0p6cHViM1FvVzJSaGRHRXRabWxzZEdWeUxTY2dLeUFrS0hSb2FYTXBMblpoYkNncElDc2dKMTBwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrYVhSbGJYTXVabWxzZEdWeUtDY3Vhbk10YUhsd2IzUm9aV05mWDJsMFpXMG5JQ3NnWmk1cWIybHVLQ2NuS1NrdVlXUmtRMnhoYzNNb1kyeGhjM05PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2FYUmxiWE11Y21WdGIzWmxRMnhoYzNNb1kyeGhjM05PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnp4emRIbHNaVDRuSUNzZ2MzUjViR1V1YW05cGJpZ25KeWtnS3lBblBDOXpkSGxzWlQ0bktTNWhjSEJsYm1SVWJ5Z25hR1ZoWkNjcFhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1kyRnNZMUJoZVcxbGJuUW9ZMjl6ZEN3Z2NHVnlZMlZ1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWpaV2xzS0dOdmMzUWdLaUJ3WlhKalpXNTBJQzhnTVRBd0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1kyRnNZME55WldScGRDaGpiM04wTENCd1pYSmpaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjNOMElDMGdUV0YwYUM1alpXbHNLR052YzNRZ0tpQndaWEpqWlc1MElDOGdNVEF3S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWTJGc1kxQmxjazF2Ym5Sb0tHTnlaV1JwZEN3Z2NtRjBaU3dnWVdkbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbU5sYVd3b1kzSmxaR2wwSUNvZ0tDaHlZWFJsSUM4Z01USXdNQzR3S1NBdklDZ3hMakFnTFNCTllYUm9MbkJ2ZHlneExqQWdLeUJ5WVhSbElDOGdNVEl3TUM0d0xDQXRLR0ZuWlNBcUlERXlLU2twS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdadmNtMWhkRkJ5YVdObEtIQnlhV05sS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21salpTNTBiMU4wY21sdVp5Z3BMbkpsY0d4aFkyVW9MeTR2Wnl3Z1puVnVZM1JwYjI0Z0tHTXNJR2tzSUdFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBJQ1ltSUdNZ0lUMDlJRndpTGx3aUlDWW1JQ0VvS0dFdWJHVnVaM1JvSUMwZ2FTa2dKU0F6S1NBL0lDY2dKeUFySUdNZ09pQmpPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdKQ2duTG1wekxXaDVjRzkwYUdWalgxOXpiR2xrWlhJbktTNXpiR2xqYXloN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSdmRITTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtOTNjem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVabWx1YVhSbE9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5vYjNjNklERXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyTnliMnhzT2lBeExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCalpXNTBaWEpOYjJSbE9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWlc1MFpYSlFZV1JrYVc1bk9pQW5NVFZ3ZUNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadlkzVnpUMjVUWld4bFkzUTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxdlltbHNaVVpwY25OME9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOd2IyNXphWFpsT2lCYlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3R3YjJsdWREb2dZWEJ3UTI5dVptbG5MbUp5WldGcmNHOXBiblF1YldRZ0xTQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2ZEhNNklHWmhiSE5sTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtjbUZuWjJGaWJHVTZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaVzUwWlhKUVlXUmthVzVuT2lBbk1IQjRKMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ1FvSnk1cWN5MW9lWEJ2ZEdobFkxOWZjMmh2ZHkxaWRHNG5LUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUFrZENBOUlDUW9kR2hwY3lrdWNHRnlaVzUwY3lnbkxtcHpMV2g1Y0c5MGFHVmpKeWt1Wm1sdVpDZ25MbXB6TFdoNWNHOTBhR1ZqWDE5emFHOTNMWFJoY21kbGRDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkhRdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjJabWMyVjBJRDBnSkhRdWIyWm1jMlYwS0NrdWRHOXdJQzBnTkRBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkNnbkxtaGxZV1JsY2w5ZmJXRnBiaWNwTG1OemN5Z25jRzl6YVhScGIyNG5LU0E5UFQwZ0oyWnBlR1ZrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQ0F0UFNBa0tDY3VhR1ZoWkdWeVgxOXRZV2x1SnlrdWIzVjBaWEpJWldsbmFIUW9kSEoxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0Nkb2RHMXNMQ0JpYjJSNUp5a3VZVzVwYldGMFpTaDdjMk55YjJ4c1ZHOXdPaUJ2Wm1aelpYUjlMQ0F6TURBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNXBkRVJoZEdWd2FXTnJaWElvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHVndhV05yWlhKV2FYTnBZbXhsSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052YlcxdmJrOXdkR2x2Ym5NZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQW5kRzl3SUd4bFpuUW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZibE5vYjNjNklHWjFibU4wYVc5dUlDaHBibk4wTENCaGJtbHRZWFJwYjI1RGIyMXdiR1YwWldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGJtbHRZWFJwYjI1RGIyMXdiR1YwWldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmxjR2xqYTJWeVZtbHphV0pzWlNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVNHbGtaVG9nWm5WdVkzUnBiMjRnS0dsdWMzUXNJR0Z1YVcxaGRHbHZia052YlhCc1pYUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0Z1YVcxaGRHbHZia052YlhCc1pYUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdWd2FXTnJaWEpXYVhOcFlteGxJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VTJWc1pXTjBPaUJtZFc1amRHbHZiaUFvWm05eWJXRjBkR1ZrUkdGMFpTd2daR0YwWlN3Z2FXNXpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpkQzRrWld3dWRISnBaMmRsY2lnblkyaGhibWRsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFrWVhSbGRHbHRaWEJwWTJ0bGNpY3BMbVJoZEdWd2FXTnJaWElvVDJKcVpXTjBMbUZ6YzJsbmJpaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXBia1JoZEdVNklHNWxkeUJFWVhSbEtDa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1Z3YVdOclpYSTZJSFJ5ZFdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHVlVhVzFsVTJWd1lYSmhkRzl5T2lBbkxDQW5MRnh5WEc0Z0lDQWdJQ0FnSUgwc0lHTnZiVzF2Yms5d2RHbHZibk1wS1R0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFpHRjBaWEJwWTJ0bGNpMXlZVzVuWlNjcExtVmhZMmdvWm5WdVkzUnBiMjRnS0dWc0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0YVc0Z1BTQnVaWGNnUkdGMFpTZ2tLSFJvYVhNcExtUmhkR0VvSjIxcGJpY3BLU0I4ZkNCdWRXeHNMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlQ0E5SUc1bGR5QkVZWFJsS0NRb2RHaHBjeWt1WkdGMFlTZ25iV0Y0SnlrcElIeDhJRzVsZHlCRVlYUmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VaR0YwWlhCcFkydGxjaWhQWW1wbFkzUXVZWE56YVdkdUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmtSaGRHVTZJRzFwYml4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlRVJoZEdVNklHMWhlQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKaGJtZGxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsd2JHVkVZWFJsYzFObGNHRnlZWFJ2Y2pvZ0p5QXRJQ2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUdOdmJXMXZiazl3ZEdsdmJuTXBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSaGRHVndhV05yWlhJZ1BTQWtLSFJvYVhNcExtUmhkR0VvSjJSaGRHVndhV05yWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBaWEJwWTJ0bGNpNXpaV3hsWTNSRVlYUmxLRnR0YVc0c0lHMWhlRjBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFrWVhSbGRHbHRaWEJwWTJ0bGNpd2dMbXB6TFdSaGRHVndhV05yWlhJdGNtRnVaMlVuS1M1dmJpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1lYUmxjR2xqYTJWeVZtbHphV0pzWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSaGRHVndhV05yWlhJZ1BTQWtLQ2N1YW5NdFpHRjBaWFJwYldWd2FXTnJaWElzSUM1cWN5MWtZWFJsY0dsamEyVnlMWEpoYm1kbEp5a3VaR0YwWVNnblpHRjBaWEJwWTJ0bGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFpYQnBZMnRsY2k1b2FXUmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJwYm1sMFUyTnliMnhzWW1GeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEluS1M1elkzSnZiR3hpWVhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2R5QTlJQ1FvZDJsdVpHOTNLUzV2ZFhSbGNsZHBaSFJvS0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hjZ1BDQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzV0WkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10YzJOeWIyeHNZbUZ5TFhOdEp5a3VjMk55YjJ4c1ltRnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpZM0p2Ykd4aVlYSXRjMjB0YldRbktTNXpZM0p2Ykd4aVlYSW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hjZ1BDQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzVzWnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10YzJOeWIyeHNZbUZ5TFhOdExXMWtKeWt1YzJOeWIyeHNZbUZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDNJRDQ5SUdGd2NFTnZibVpwWnk1aWNtVmhhM0J2YVc1MExtMWtJQ1ltSUhjZ1BDQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzVzWnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10YzJOeWIyeHNZbUZ5TFcxa0p5a3VjMk55YjJ4c1ltRnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoM0lENDlJR0Z3Y0VOdmJtWnBaeTVpY21WaGEzQnZhVzUwTG0xa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVxY3kxelkzSnZiR3hpWVhJdGJXUXRiR2NuS1M1elkzSnZiR3hpWVhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSGNnUGowZ1lYQndRMjl1Wm1sbkxtSnlaV0ZyY0c5cGJuUXViR2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtcHpMWE5qY205c2JHSmhjaTFzWnljcExuTmpjbTlzYkdKaGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWtLSGRwYm1SdmR5a3ViMjRvSjNKbGMybDZaU2NzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ1FvZDJsdVpHOTNLUzV2ZFhSbGNsZHBaSFJvS0NrZ1BDQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzV0WkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMXpiU2NwTG5OamNtOXNiR0poY2lncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbXB6TFhOamNtOXNiR0poY2kxemJTY3BMbk5qY205c2JHSmhjaWduWkdWemRISnZlU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNna0tIZHBibVJ2ZHlrdWIzVjBaWEpYYVdSMGFDZ3BJRDQ5SUdGd2NFTnZibVpwWnk1aWNtVmhhM0J2YVc1MExtMWtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ppWWdKQ2gzYVc1a2IzY3BMbTkxZEdWeVYybGtkR2dvS1NBOElHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbXhuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdGMyTnliMnhzWW1GeUxXMWtKeWt1YzJOeWIyeHNZbUZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY3Vhbk10YzJOeWIyeHNZbUZ5TFcxa0p5a3VjMk55YjJ4c1ltRnlLQ2RrWlhOMGNtOTVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hjZ1BDQmhjSEJEYjI1bWFXY3VZbkpsWVd0d2IybHVkQzVzWnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMXpiUzF0WkNjcExuTmpjbTlzYkdKaGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMXpiUzF0WkNjcExuTmpjbTlzYkdKaGNpZ25aR1Z6ZEhKdmVTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2drS0hkcGJtUnZkeWt1YjNWMFpYSlhhV1IwYUNncElENDlJR0Z3Y0VOdmJtWnBaeTVpY21WaGEzQnZhVzUwTG0xa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMk55YjJ4c1ltRnlMVzFrTFd4bkp5a3VjMk55YjJ4c1ltRnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMk55YjJ4c1ltRnlMVzFrTFd4bkp5a3VjMk55YjJ4c1ltRnlLQ2RrWlhOMGNtOTVKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NRb2QybHVaRzkzS1M1dmRYUmxjbGRwWkhSb0tDa2dQajBnWVhCd1EyOXVabWxuTG1KeVpXRnJjRzlwYm5RdWJHY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTF6WTNKdmJHeGlZWEl0YkdjbktTNXpZM0p2Ykd4aVlYSW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1cWN5MXpZM0p2Ykd4aVlYSXRiR2NuS1M1elkzSnZiR3hpWVhJb0oyUmxjM1J5YjNrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNHZMeUFnSUNBZ0lDQWdKQ2duTG1wekxYTmpjbTlzYkdKaGNpMW9iM1FuS1M1elkzSnZiR3hpWVhJb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlOQ2YwWURRdnRDNjBZRFJnOUdDMExyUXNDRFF2OUMrSU5HQjBZSFJpOUM3MExyUXRTRFF0TkMrSU5HTjBMdlF0ZEM4MExYUXZkR0MwTEJjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1cGRGTmpjbTlzYkNncElIdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRjMk55YjJ4c0p5a3ViMjRvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdKSFJoY21kbGRDQTlJQ1FvSkNoMGFHbHpLUzVoZEhSeUtDZG9jbVZtSnlrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KSFJoY21kbGRDNXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdlptWnpaWFFnUFNBa2RHRnlaMlYwTG05bVpuTmxkQ2dwTG5SdmNDQXRJRFF3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ1FvSnk1b1pXRmtaWEpmWDIxaGFXNG5LUzVqYzNNb0ozQnZjMmwwYVc5dUp5a2dQVDA5SUNkbWFYaGxaQ2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUWdMVDBnSkNnbkxtaGxZV1JsY2w5ZmJXRnBiaWNwTG05MWRHVnlTR1ZwWjJoMEtIUnlkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NRb0p5NW9aV0ZrWlhJbktTNWpjM01vSjNCdmMybDBhVzl1SnlrZ1BUMDlJQ2RtYVhobFpDY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhRZ0xUMGdKQ2duTG1obFlXUmxjaWNwTG05MWRHVnlTR1ZwWjJoMEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDZG9kRzFzTEdKdlpIa25LUzVoYm1sdFlYUmxLSHR6WTNKdmJHeFViM0E2SUc5bVpuTmxkSDBzSURNd01DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUkJZbTkxZENncElIdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRZV0p2ZFhRdGFIbHpkRzl5ZVY5ZmVXVmhjaTF6Ykdsa1pYSW5LUzV6YkdsamF5aDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZkSE02SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDNNNklHWmhiSE5sTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VGFHOTNPaUExTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5qY205c2JEb2dNU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMlZ1ZEdWeVRXOWtaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkR2xqWVd3NklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05sYm5SbGNsQmhaR1JwYm1jNklDYzFNSEI0Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhOT1lYWkdiM0k2SUNjdWFuTXRZV0p2ZFhRdGFIbHpkRzl5ZVY5ZlkyOXVkR1Z1ZEMxemJHbGtaWEluTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjJOMWMwOXVVMlZzWldOME9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjJKcGJHVkdhWEp6ZERvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMybDJaVG9nVzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklHRndjRU52Ym1acFp5NWljbVZoYTNCdmFXNTBMbTFrSUMwZ01TeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaVzUwWlhKUVlXUmthVzVuT2lBbk56QndlQ2RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FrS0NjdWFuTXRZV0p2ZFhRdGFIbHpkRzl5ZVY5ZmVXVmhjaTF6Ykdsa1pYSW5LUzV2YmlnblltVm1iM0psUTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnS0dWMlpXNTBMQ0J6YkdsamF5d2dZM1Z5Y21WdWRGTnNhV1JsTENCdVpYaDBVMnhwWkdVcElIdGNjbHh1THk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2MyeHBZMnNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbVpwYm1Rb0p5NWZjMmxpYkdsdVp5Y3BMbkpsYlc5MlpVTnNZWE56S0NkZmMybGliR2x1WnljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tITnNhV05yTGlSemJHbGtaWE5iYm1WNGRGTnNhV1JsWFNrdWJtVjRkQ2dwTG1Ga1pFTnNZWE56S0NkZmMybGliR2x1WnljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tITnNhV05yTGlSemJHbGtaWE5iYm1WNGRGTnNhV1JsWFNrdWNISmxkaWdwTG1Ga1pFTnNZWE56S0NkZmMybGliR2x1WnljcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDUW9KeTVxY3kxaFltOTFkQzFvZVhOMGIzSjVYMTlqYjI1MFpXNTBMWE5zYVdSbGNpY3BMbk5zYVdOcktIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOTBjem9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzY3pvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Wm1sdWFYUmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJREVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXhMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1ZV1JsT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjMDVoZGtadmNqb2dKeTVxY3kxaFltOTFkQzFvZVhOMGIzSjVYMTk1WldGeUxYTnNhV1JsY2ljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGa1lYQjBhWFpsU0dWcFoyaDBPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2NtRm5aMkZpYkdVNklHWmhiSE5sWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYVc1cGRFWnBiR1ZwYm5CMWRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10Wm1sc1pXbHVjSFYwWDE5amJuUW5LUzVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNWtZWFJoS0Nka1pXWmhkV3gwSnl3Z0pDaDBhR2x6S1M1MFpYaDBLQ2twTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXFjeTFtYVd4bGFXNXdkWFFuS1M1dmJpZ25ZMmhoYm1kbEp5d2dablZ1WTNScGIyNGdLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1sc1pYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsVG1GdFpTQTlJQ1FvZEdocGN5a3VkbUZzS0NrdWMzQnNhWFFvSjF4Y1hGd25LUzV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjR0Z5Wlc1MEtDa3VabWx1WkNnbkxtcHpMV1pwYkdWcGJuQjFkRjlmWTI1MEp5a3VkR1Y0ZENobWFXeGxUbUZ0WlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCcGJtbDBRVzUwYVhOd1lXMG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSjJsdWNIVjBXMjVoYldVOVhDSmxiV0ZwYkROY0lsMHNhVzV3ZFhSYmJtRnRaVDFjSW1sdVptOWNJbDBzYVc1d2RYUmJibUZ0WlQxY0luUmxlSFJjSWwwbktTNWhkSFJ5S0NkMllXeDFaU2NzSUNjbktTNTJZV3dvSnljcE8xeHlYRzRnSUNBZ0lDQWdJSDBzSURVd01EQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWFYUkJiSEJvWVdKbGRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3Vhbk10WVd4d2FHRmlaWFFnYVc1d2RYUW5LUzV2YmlnblkyaGhibWRsSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YW5NdFlXeHdhR0ZpWlhRZ2JHa25LUzV5WlcxdmRtVkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KQ2gwYUdsektTNXdjbTl3S0NkamFHVmphMlZrSnlrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjR0Z5Wlc1MGN5Z25iR2tuS1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0pDZ25MbXB6TFdGc2NHaGhZbVYwSUdFbktTNXZiaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5NXFjeTFoYkhCb1lXSmxkQ0JzYVNjcExuSmxiVzkyWlVOc1lYTnpLQ2RmWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvZEdocGN5a3VjR0Z5Wlc1MGN5Z25iR2tuS1M1aFpHUkRiR0Z6Y3lnblgyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHMVRaV0Z5WTJneUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVk5sWVhKamFESXVjbVZ6WlhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1ZlNrN1hISmNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGphR0Z5YzJWMFBYVjBaamc3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHAxV1ZjeGJHTjVTVFpYTVRCelNXMHhhR05JUW5CaWJXUjZTV3B2YVVscGQybGpNamt4WTIxT2JHTjVTVFpYZVVwcVlqSXhkR0l5TkhWaGJrMXBXRk4zYVdNeU9URmpiVTVzWXpCT2RtSnVVbXhpYmxGcFQyeHphV0ZzUmpGYVdFbzFTMGRhTVdKdFRqQmhWemwxU1VObmNFbElkR05qYkhoMVNVTkJaMGxHZDJsa1dFNXNTVWhPTUdOdGJHcGtSbmRwVHpGNGVWaEhOV05qYkhoMVNVTkJaMGxEVVc5YVJ6bHFaRmN4YkdKdVVYQk1ia3BzV1ZkU05VdEhXakZpYlU0d1lWYzVkVWxEWjNCSlNIUmpZMng0ZFZoSVNtTmlhVUZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxHZUhsWVJ6VTVTMVJ6YVZoVGQybGFiV3h6V2xOSk5rbHRUblppVnpGMlltazFjV041U2psY2NseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1PRHRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTblZaVnpGc1kzbEpObGN4TUhOSmJURm9ZMGhDY0dKdFpIcEphbTlwU1dsM2FXTXlPVEZqYlU1c1kzbEpObGQ1U21waU1qRjBZakkwZFdGdVRXbFlVM2RwWXpJNU1XTnRUbXhqTUU1MlltNVNiR0p1VVdsUGJITnBTa05vYTJJeVRqRmlWMVoxWkVOcmRXTnRWbWhhU0d0dldtNVdkVmt6VW5CaU1qUm5TME5yWjJVeGVIbFlSelJuU1VOQloxbFlRbmRNYld4MVlWaFNjRmxYZUhCbGJWVnZTMVIwWTJOc2VIVm1VMnMzV0VoS1kySnNlSGxZUnpVeVdWaEpaMWxZUW5kSlJEQm5aVEY0ZVZoSE5HZEpRMEZuWVZjMWNHUkhiR2hpUjJ3MldsZFJOa2xIV21oaVNFNXNURVo0ZVZoSE5XTmpiSGgxU1VOQlowbEhiSFZoV0ZKd1dWZDRjR1Z0VlRaSlIxb3hZbTFPTUdGWE9YVkpRMmR3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVd0TFEyTjFZVzVOZEdGSGJHdGFVekZzWWxoQ01HVlRZM0JNYlZab1dUSm5iMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZTVk5SYjJSSGFIQmplV3QxV20xc2RWcERaMjVNYlhCNlRGZG9jRnBIVlhSYVZ6RjNaRWhzWmxneVRuVmtRMEVyU1VOdmJrdFROWE5hVnpWdVpFZG5jRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFGdlpFZG9jR041YTNWamJWWjBZak5hYkV0RGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZURzFzZFdGWVVsRmpNbFl4V2tjNVZGcFhlR3haTTFGdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqQmhSMng2VEcxc2RXRllVbEZqTWxZeFdrYzVWRnBYZUd4Wk0xSlVXbGRHZVZreVoyOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNNR0ZIYkhwTWJXeDFZVmhTVlZsWFNucExRMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMlJIYUhCamVUVndZbTFzTUZFeWFHeGpNMDF2UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZURzFzZFdGWVVrUmhSMVo2WXpCYWNHSklVbXhqYVdkd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsSVVtOWhXRTExWVZjMWNHUkhiR2hpUjJ3MldsZFJaMUJUUWpCamJsWnNUekY0ZVZoSE5HZEpRMEZuWmxONFkyTnNlSFZZU0VwalltbEJaMGxEUW5CaWJXd3dWVWhPYkdSWFVuWlZNbFp6V2xkT01FOXBRbTFrVnpWcVpFZHNkbUpwUVc5TFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQloweDVPR2RaTTFaNlpFYzVkRWxJVG14aVIxWnFaRVo0ZVZoSE5HZEpRMEZuU1VOQlowbERVVzlLZVRWeFkza3hlbHBYZUd4Wk0xRnVTMU0xZG1KcFoyNVpNbmh3V1RKemJreERRbTFrVnpWcVpFZHNkbUpwUVc5YVUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKc1RHNU9NR0l6UWxGamJUbDNXVmRrYUdSSGJIWmlhV2R3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxJTUhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOUmIwcDVOWEZqZVRGNldsZDRiRmt6VW1aWU0xSjJXakprYzFwWVNXNUxVelYyWW1sbmJsa3llSEJaTW5OdVRFTkNiV1JYTldwa1IyeDJZbWxCYjB0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEVVc5S2VUVnhZM2t4ZWxwWGVHeFpNMUZ1UzFNMWVWcFhNWFprYlZaRVlrZEdlbU41WjI1WU1rWnFaRWRzTWxwVFkzQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVd0TFNGSnZZVmhOY0V4dVFtaGpiVloxWkVoTmIwcDVOWEZqZVRGNldsZDRiRmt6VVc1TFV6Vm9Xa2RTUkdKSFJucGplV2R1V0RKR2FtUkhiREphVTJOd1RHNVNkbG95WkhOYVZVNXpXVmhPZWt0RFpHWmlNMEpzWW0xV2EwcDVhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOUtlVFZ4WTNreGVscFhlR3haTTFGdVMxTTFkV0l6VVc5S2VUVm1XVmRPTUdGWVdteEtlV3QxWTIxV2RHSXpXbXhSTW5ob1l6Tk5iMG94T1haalIxWjFXbGRSYmt0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBJNVMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXdExTR1J3WW0xU2RtUjVhM1ZpTWpSdlNqSk9jMkZYVG5KS2VYZG5XbTVXZFZrelVuQmlNalJuUzBOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CYTB0RFkzVmhiazEwWXpKV2MxcFhUakJLZVd0MVkyMVdkR0l6V214Uk1uaG9Zek5OYjBveE9YWmpSMVoxV2xkUloxZ3lSbXBrUjJ3eVdsTmpjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpTREJ3VHpGNGVWaEhOR2RKUTBGblpsTjRZMk5zZUhWWVNFcGpZbWxCWjBsRFFuQmliV3d3VlVoT2JHUlhVblpWTWxaeldsZE9NRlV5Vm1oamJVNXZUMmxDYldSWE5XcGtSMngyWW1sQmIwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5USGs0WjFrelZucGtSemwwU1VoT2JHSkhWbXBrUTBKNldsZEdlVmt5YUdOamJIaDFTVU5CWjBsRFFXZEpRMEZyUzBOamRXRnVUWFJqTWxaeldsZE9NRXhZVG14WldFcHFZVU5qY0V4dFZtaFpNbWR2V201V2RWa3pVbkJpTWpSblMwZHNkVnBIVmpSTVEwSnNZa2RXZEZwWE5UQkxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNGcG9ZMmxCYTJGWVVteGlXRTFuVUZOQmEwdEhWbk5hVnpGc1ltNVJjRXh0V25CaWJWRnZTbmsxY1dONU1YcGFWM2hzV1ROUmRHTXlWbWhqYlU1dldERTVjR1JIVm5SS2VXczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTFGdldsZDRiR0pYVm5Wa1EydDFXbTFzZFZwRFoyNU1iWEI2VEZoT2JHSkhWbXBrUXpGNldsZEdlVmt5YUdaWU1teDFZMGhXTUVwNWJHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CZFdJeU5HOUtNblJzWlZoV2QwcDVkMmRhYmxaMVdUTlNjR0l5TkdkTFEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DTWxsWVNXZGpXRlpzWTI1cloxQlRRV3RMU0ZKdllWaE5jRXh1V21oaVEyZHdURzVTZVdGWE1HOUxVelV3WWpCNGRtUXlWbmxSTWtaNldsTm5jRTh4ZUhsWVJ6UjJUSGxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbUl5ZUd4TWJYaDJXbmxvZUdSWFZubGxVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhSGhrVjFaNVpWTTFjMXBYTlc1a1IyZHdTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUp3WkVkV2RHTjVOV3haVjA1dlMwZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RMU0ZKdllWaE5jRXh0VW1oa1IwVnZTak5PYkdKSFZtcGtRekY2V2xkR2VWa3laMjVMVXpVd1lqQjRkbVF5Vm5sUk1rWjZXbE5uY0V4dGJIVmFSMVkwVkRKWmIyTllWbXhqYm10d1NVUXdPVkJUUVhkSlJEaG5Ta05vTUdGSGJIcExVelY2WVVjNU0wdERhMmRQYVVGclMwaFNiMkZZVFhCTWJXaHdXa2RWYjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2NFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamxKUjFaell6SlZaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta2RzTUZwWE1YcE1iazV2WWpOamIwdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNSEJZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloweHRPWFZMUTJScVlVZEdkVm95Vlc1TVEwSnRaRmMxYW1SSGJIWmlhVUZ2UzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKUnpWc1dsZFJaMXB0T1hsSlJ6RkhZVmQ0TUZwWVNYbFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRXBzWkVoV2VXSnBRbTFaVjNoNldsUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJNVMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKU0RCeldFaEtZMkpzZUhsWVJ6Um5TVU5CWjJGWE5YQmtSbEpvV1c1Tk5rbEhXakZpYlU0d1lWYzVkVWxEWjNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQmEwdERZM1ZoYmsxMFpFZEdhV041WTNCTWJWWm9XVEpuYjFwdVZuVlpNMUp3WWpJMFowdEhiSFZhUjFZMFRFTkNiR0pIVm5STFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Zwb1kybENNRmxYU25wVk1sWnpXbGRPTUdJelNXZFFVMEl3WlZoQ2JHSXlXV2RLUTJoc1lrZFdkRXRUTld0WldGSm9TME5rTUZsWFNucEtlV3RuVUZRd09VbERaREZpYlZKc1dtMXNkVnBYVVc1SlJEaG5TbmsxY1dONU1UQlpWMHA2V0RFNWMyRllUakJKUkRSbllrZHJia2xFYjJkS1EyaHNZa2RXZEV0VE5XdFpXRkpvUzBOa01GbFhTbnBLZVdzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRnBvWTJsQmEyTXlWbk5hVjA0d1NVUXdaMHBEYUd4aVIxWjBTMU0xYldGWE5XdExRMk4xWVc1TmRHUkhSbWxqTVRsbVl6SldjMXBYVGpCS2VXdHpTVWhrY0dSSGFGUmFWM2hzV1ROUloxQlRRV3RqTWxaeldsZE9NRXh0ZUd4aWJXUXdZVVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNrTm9iR0pIVm5STFV6VnNXVmhPTldSSFJtbGplV2czV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CZGt4NVJGRjBUa00zTUZrNFp6Qk1URkYxT1VNck1FeGlVWFJrUXprd1RETlNhVGxIUmtsT1IwTXdURVJSYzJSREt6Qk1TV2N3VEdwU1oyUkRMekJNTjFGMU9VZE5NRXhtVW1jNVF6RXdUSGRuV2tkR01GbFdlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMFpwWTNwdloyUkhSbWxqTVU1c1lrZFdhbVJIT1hsTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkwZEdkVnBYZUVSaU1qVXdXbGhvTUU5cFFXdExSMVp6V2xjd2NFeHRhR2hqTUU1eldWaE9la3REWkhGamVURXdXVmRLZWxneVVuQmpNazUyWW0wMWJGa3pVbXhhUTJOd1NVUTRaMHBEWjI1TWJYQjZURmhTYUZsdVRtWllNazUyWW01U2JHSnVVVzVMVTBFMlNVTlJiMXBYZUd4aVUyeGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VOb00yRllVbTlWTWxaeldsZE9NRXRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwaFNhRmx1VGxSYVYzaHNXVE5TZG1OcGEzVmFiV3gxV2tObmJsbFRZM0JNYlZab1dUSm5iMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVdtaGphVUl5V1ZkNE1WcFRRVGxKUTFGdlpFZG9jR041YTNWWldGSXdZMmxuYm1GSVNteGFhV053VEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01GcFlhREJKUkRCblNrTm9NR0ZIYkhwTFV6VnJXVmhTYUV0RFpIcGFWM2hzV1ROUmJrdFRRamhtUTBGclMwaFNiMkZZVFhCTWJsSnNaVWhSYjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CYTJNeVZuTmFWMDR3VEcxR2QyTkhWblZhUTJkdVVFYzVkMlJIYkhaaWFVSXlXVmQ0TVZwVU1XTkphV055WkcxR2MyUlhWWEpLTVhkcFVHbGpjbVJIVmpSa1EzTnVVRU01ZG1OSVVuQmlNalFyU25sck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TZWxwWGVHeFpNMUYxWWpJMGIwb3lUbTlaVnpWdVdsTmpjMGxIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXdExSMVp6V2xjd2NFeHRWbWhqTTJ3d1dWZEtla3REWkhwYVYzaHNXVE5SYmt4RFFXdExTRkp2WVZoTmNFeHVXbWhpUTJkd1MxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNSEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEVVc5YVYzaHNZbE5yZFZsdGJIVmFRMmR1V2xkR2VtVllVbWhaYmswMldWZGFNRnBZU1c1TVEwSnRaRmMxYW1SSGJIWmlhVUZ2V2xoYWJHSnVVWE5KUTFKcVlrZHNhbUV5Vm10TVEwRnJaRWRHZVZveVZqQkxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWtNbXd3WVVaT2JHSkhWbXBrUTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFKNldsZDRiRmt6VVhWa2JVWnpTME5TYW1KSGJHcGhNbFpyVEcxR01HUklTVzlLTW1oNVdsZFpia3RUYTNWWk1taG9ZbTFrYkV0RGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSTVXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMlJIUm5sYU1sWXdURzFhY0dKdFVXOUtlVFY2WWtkc2FtRjVNWEJpYld3d1lWZEdjMkZZY0d4YVEyTndURzVPYzJGWFRuSkxRMlI2V2xoU1VXSXpUbkJrUjJ4MlltbGpjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLU0ZKb1kyMWtiR1JETlcxaFZ6VnJTME5qZFdGdVRYUmpNbFp6V2xkT01FMXBZM0JNYms1c1lrZFdhbVJFU1c5TFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJaVGF6ZFlTRXBqWW1sQlowbERRamxNUm5oNVdFYzFZMk5zZUhWSlEwRm5TVWRzZFdGWVVrUmhSMVo2WTNwdloxcHVWblZaTTFKd1lqSTBaMHREYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1Vkc2JVbERaMnRMU0dSd1ltMVNkbVI1YTNWaU0xWXdXbGhLV0dGWFVqQmhRMmR3U1VRME9VbEhSbmRqUlU1MlltMWFjRnA1TldsamJWWm9ZVE5DZG1GWE5UQk1iWGh1UzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5SYjBwNU5YRmplVEZxWVVkV2VtTjVNVEJpTWpselpFZHNkMWd4T1dwaU1qVXdXbGMxTUVwNWEzVmpSMFo1V2xjMU1FdERhM1ZoUnpreVdsaEpiMWxZUW5kTWJrNXZZak5rUkdGSFZucGpNVkoyWWpKNE1HRllRWE5KUjBaM1kwTTFiMkZYVW14Uk1taHNZek5PVldJeU9YTmtSMngzUzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpsWVNFcGpZbWxCWjBsRFFXZEpRMEZuWkcxR2VVbERVakJaV0VwdVdsaFJaMUJUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElVbkJrUjNoc1QybEJhMHREWTNWaGJrMTBXVEpvYkdNelRYUmhWelZ0WWpFNVptUkhiREJpUjFWdVMxTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1ZoS2JGbFViMmRLUTJkdVRHMXdla3hYVG05YVdFNTZURmRzZFZwdE9XWllNa1o1V2xkRmJrdFRlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOSVNuQlpNbFUyU1VOUmIwcDVOWEZqZVRGcVlVZFdlbU41TVhCaWJWcDJXREU1ZDJOdGJHcGFVMk53VEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSjNZMjFzYWxwV1FteGpiRTU0WkZkR2VWcFViMmRLUTJkdVRHMXdla3hYVG05YVdFNTZURmRzZFZwdE9XWllNMEo1WVZkT2JGVkhWbmxWTTBZeFdWaEtiRXA1YTNOWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhXbk5pTWpsNVQybEJhMHREWTNWaGJrMTBXVEpvYkdNelRYUmhWelZ0WWpFNVpscHRlSFppTTBsdVMxTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV20xNGRtSXpTbnBXUnprd1dWZDNOa2xEVVc5S2VUVnhZM2t4YW1GSFZucGplVEZ3WW0xYWRsZ3hPVzFpUnpsMlkyNU9WV0l6VW1oaVEyTndURVo0ZVZoSE5HZEpRMEZuU1VOQlowbElNSE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyWVVoc2QySXpVbTlhVjAxblVGTkJhMHREWTNWaGJrMTBXVEpvYkdNelRYUmhWelZ0WWpFNVptRkliSGRpTTFKdldsZE5ia3RUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFKdlpWaENkbVJIYUd4Wk1XUjVXVmhDZDFwWVNXZFFVMEZyUzBOamRXRnVUWFJaTW1oc1l6Tk5kR0ZYTlcxaU1UbG1ZVWhzZDJJelVtOWFWMDEwWkROS2FHTklRbXhqYVdOd1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowcEhiSFJhTUZweldWaFJaMUJUUVd0TFEyTjFZVzVOZEZreWFHeGpNMDEwWVZjMWJXSXhPV1poVnpGdVVtMTRhR1JEWTNCTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNrZHNkRm93V25OaU1qbDVTVVF3WjBwRFoyNU1iWEI2VEZkT2IxcFlUbnBNVjJ4MVdtMDVabGd5YkhSYU1GcHpZakk1ZVVwNWEzTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRnJaRWRHYVdONVFUbEpRMUZ2U25rMWNXTjVNV3BoUjFaNlkza3hjR0p0V25aWU1Ua3dXVmRLZWtwNWEzTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRnJaRWRHYVZKdGVIWmlNMGxuVUZOQmEwdERZM1ZoYmsxMFdUSm9iR016VFhSaFZ6VnRZakU1Wm1SSFJtbFNiWGgyWWpOSmJrdFRlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUl3V1ZkS1IySkhSakJKUkRCblNrTm5ia3h0Y0hwTVYwNXZXbGhPZWt4WGJIVmFiVGxtV0ROU2FGbHJXbk5aV0ZGdVMxTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERVbTFpTTBwMFNVUXdaMHBEWjI1TWJYQjZURmRPYjFwWVRucE1WMngxV20wNVpsZ3lXblpqYlRCdVMxTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhiSFZoV0ZGblVGTkNiVmxYZUhwYVZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQmEwdERZM1ZoYmsxMFdUSm9iR016VFhSaFZ6VnRZakU1Wm1GWVVteGlVelZtV1ZkT01HRllXbXhLZVd0MVlqSTBiMG95VG5OaFYwNXlTbmwzWjFwdVZuVlpNMUp3WWpJMFowdERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqSlpXRWxuU2toU2IyRllUV2RRVTBGclMwaFNiMkZZVFhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVGdlNraFNiMkZZVFhWaFIwWjZVVEo0YUdNelRXOUtNVGw2V2xkNGJGa3pVbXhhUTJOd1MxWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVR6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyUzBOamRXRnVUWFJaTW1oc1l6Tk5kR0ZYTlcxaU1UbG1ZVmhTYkdKVFkzQk1ia3BzWWxjNU1scFZUbk5aV0U1NlMwTmtabU15Vm5OYVYwNHdXbGRSYmt0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMHBJVW05aFdFMTFXVmRTYTFFeWVHaGpNMDF2U2pFNWVscFhlR3haTTFKc1drTmpjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ01sbFlTV2RhUjBZd1dWTkJPVWxEVWpCaFIyeDZURzFTYUdSSFJXOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkYWJUbDVTVU5vTWxsWVNXZGhNbFkxU1Vkc2RVbERVakJaV0VwdVdsaFJjRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFJd1dWaEtibHBZVW1KaE1sWTFXRk0xTUZwWWFEQkxSMUpvWkVkR1ltRXlWalZZVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1IxcDJZMjB3ZFdSdFJuTkxSMUpvWkVkRmRWcHRPWGxpVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VOb2ExbFlVbWhNYldnMVkwYzVNR0ZIVm1wTFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMkZJYkhkaU0xSnZXbGROZFdSSFZqUmtRMmhyV1ZoU2FFeHRhRFZqUnprd1lVZFdha3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFKdlpWaENkbVJIYUd4Wk1XUjVXVmhDZDFwWVNYVmpNbWgyWkhsbmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DT1VsSFZuTmpNbFZuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwSGFEVmpSemt3WVVkV2FsWXpTbWhqU0VKc1kyazFiMkZYVW14TFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBkU2FHUkhSWFZoVnpGdVVtMTRhR1JEYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNrZHNkRm93V25OWldGRjFXVmhTTUdOcFoyNWhTRXBzV21samMwbEhVbWhrUjBWMVlWY3hibEp0ZUdoa1EyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMkZYTVc1U2JYaG9aRU0xYldGWE5XdExRMlJ3WWxkamJrdFROV2hrU0ZKNVMwTmtlbU50VFc1TVEwSnJXVmhTYUV4dGJIUmFNRnB6V1ZoUmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtSMngwV2pCYWMxbFlVWFZqTW1oMlpIbG5jRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLU0ZKb1dXdGFjMWxZVVhWak1taDJaSGxuY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNPVWxIVm5Oak1sVm5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMHBIYkhSYU1GcHpXVmhSZFdGSGJHdGFVMmR3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwSVVtaFphMXB6V1ZoUmRXRkhiR3RhVTJkd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vYTFsWVVtaE1iV3gwV2pCYWMySXlPWGxMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmEyRlhNVzVTYlhoMllqTkpkVmxZVWpCamFXZHVZVWhLYkZwcFkzTkpSMUpvWkVkRmRXRlhNVzVTYlhoMllqTkpjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLUjJ4MFdqQmFjMkl5T1hsTWJWcHdZbTFSYjBveWJIUmFlV053VEcxR01HUklTVzlLTTA1NVdYbGpjMGxIVW1oa1IwVjFZVmN4YmxKdGVIWmlNMGx3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwSGJIUmFNRnB6WWpJNWVVeHVUbTlpTTJOdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERVakJaVjBwSFlrYzVkbU5wTlhwaFJ6a3pTME5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3daMXBYZUhwYVUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMkZYTVc1U2JYaDJZak5KZFdGSGJHdGFVMmR3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwSVVtaFphMXB6WWpJNWVVeHRhSEJhUjFWdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSndXbWxCYjBwSVVtaFpiazExV20xc2RWcERaMjVpUjJzMlpHMXNlbUZYU25OYVUyTndURzE0YkdKdFpEQmhRMEU1VUZOQmVFdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyWkVkR2FXTjVOVzFoVnpWclMwTmtjMkZVY0RKaFdFNXdXVzE0YkVwNWEzVmFiV3g1WXpOUmIwdFROVzFoVnpWclMwTmthRXA1YTNWWk1uaHdXVEp6YjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NGcHBRVzloVnpWd1pFTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLUTJoalNXMW9NR0pYZDNOSlIwcDJXa2hzWTBscGEzVlpWelZ3WWxkR01GcFRhRGRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTXlUbmxpTW5oelZrYzVkMDlwUVd0a1IwWjVXakpXTUV4dVVuQmtSM2hzVEcwNWJWcHVUbXhrUTJkd1RHNVNkbU5EUVhSSlJFVjNUVVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpUZDJkT1ZFRjNTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRlVmhITkdkSlEwRm5TVU5CWjBsSU1IQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTlJiMHA1TlhGamVURnFZVWRXZW1ONU1YQmliVnAyV0RFNWNHUkhWblJNYkRsb1dUTlNjR1J0Vlc1TFV6VnRZVmhLZW1SRFozQk1iVTV6WVZkT2NrdERhemRZU0VwalltbEJaMGxEUVdkSlEwRm5ZVmMxY0dSRFFUbEpTRko1WkZkVk4xaElTbU5pYVVGblNVTkNPVXhHZUhsWVJ6VmpZMng0ZFVsRFFXZEpRMUpxWVVkV2VtTXhVblppTW5nd1lWaEJOa2xITlRGaVIzZHpXRWhLWTJKcFFXZEpRMEZyV1RKb2JHTXpUbFZpTWpselpFZHNkMVpIYkhSYVZ6a3haRVJ2WjJKdVZuTmlRM2hqWTJ4NGRWaElTbU5pYVVGblNVTkNlbUZIT1ROUk1taHNZek5PVldJeU9YTmtSMngzVDJsQ2JXUlhOV3BrUjJ4MlltbEJiMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWkcxR2VVbERVbnBhVjNodFNVUXdaMHBEYURCaFIyeDZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRbWhqU0VGMVNrZE9iMXBZVG5wV1J6bDJZa2hTY0dOR1VuQmlWMVoyWkZoUloxQlRRbnBhV0ZKVllWY3hiR0l6VmpCTFIxb3hZbTFPTUdGWE9YVkpRMmR3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5aRzFHZVVsSE9XMWFiazVzWkVOQk9VbERVbnBhVjNodFRHMDViVnB1VG14a1EyZHdUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKb1kwaEJkVXBIVG05YVdFNTZWa2M1ZG1KSVVuQmpRMEU1U1VOU2VscFhlRzFNYlZwd1ltMVJiMHA1TlhGamVURnFZVWRXZW1ONU1UQmlNamx6WkVkc2QxZ3hPV3BpTWpVd1dsYzFNRXA1YTNWWk1uaDJZbTFWYjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMWxZUW5kTWFWSnFZVWRXZW1NeFVuWmlNbmd3WVZoQmRWa3pUbnBMU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2RtTkViMmRpTWxwdFl6SldNRXh1VW5aalEwRnlTVVJKTkV4R2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaVIxWnRaRVJ2WjJJeVdtMWpNbFl3VEcxNGJGcHVVV2RMZVVGNFRVTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxOcmRWbFlRbmRhVnpWclZrYzRiMHBEWjI1WmJUbHJaVk5qY0V0VE5XaGFSMUpFWWtkR2VtTjVaMjVZTWtacVpFZHNNbHBUWTNCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1Vnd2MwbEVUWGROUTJzM1dFaEtZMkpwUVdkSlEwSTVURVo0ZVZoSE5XTmpiSGgxU1VOQlowbEhhSEJhUjFaRVlVZFdlbU14VW5aaU1uZ3dZVmhCTmtsSFdqRmliVTR3WVZjNWRVbERaM0JKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5DYW1KSFZtaGpiRkp3WWxkV2RtUllVVzlaV0VKM1RHbFNhbUZIVm5wak1WSjJZako0TUdGWVFsVmhWekZzWWpOV01FdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwSm9ZMGhCZFVwSFRtOWFXRTU2VmtjNWRtSklVbkJqUXpWNVdsY3hkbVJ0Vlc5TFZIUmpZMng0ZFVsRFFXZEpTREJ6V0VoS1kySnNlSGxZUnpSblNVTkJaMkZYTlhCa1JVNXZXbGhPZWxKdGJITmtSMVo1VDJsQ2JXUlhOV3BrUjJ4MlltbEJiMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWkcxR2VVbERVbTFpTTBwMFNVUXdaMHBEWjI1TWJYQjZURmRPYjFwWVRucE1WMXB3WWtoU2JHTnBZM0JNUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tkc01GcFhNWHBKUkRCblNrTm5ia3h0Y0hwTVYwNXZXbGhPZWt4WFduQmlTRkpzWTJ3NVptRllVbXhpVTJOd1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxbFlTbXhaVlRGd1ltbEJPVWxITlRGaVIzZHpTVWRHZVZwWFJrNVpXR2RuVUZOQ2RXUlhlSE5NUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTBoS2NGa3lWazVoVnpSblVGTkNkV1JYZUhOTVEwSjNZMjFzYWxwVk1XaGxRMEU1U1VjMU1XSkhkM05ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl3WWpOU2FHSkRRVGxKUTFKd1pFZFdkR041TlhOYVZ6VnVaRWRuWjB4VFFXdGhXRkpzWWxoTmRWcHRiSE5rUjFaNVMwTmpkVmd6VG5aaVIxRnVTMU0xYzFwWE5XNWtSMmMzV0VoS1kySnBRV2RKUTBGblNVTkJaMkZYV1dkTFExSnRZak5LZEV4dGVHeGliV1F3WVVOQk9WQlVNR2ROUTBJNFprTkJhMkZZVW14aVdFMTFZa2RXZFZvelVtOUpSREE1VUZOQmQwdFdlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFEzV0VoS1kySnBRV2RKUTBGblNVTkJaMlJIYUhCamVUVjZXbGhTUkdGSFZucGpNVkoyWkVkR2MwdElVblprUjBaelMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXdGhXRkpzWWxoTmRWcHRiSE5rUjFaNVMwTmtZbHBIUmpCWlV6RnRZVmQ0TUZwWVNYUlpXRXBzV1ZZd2JrdFROV3haVjA1dlMwZGFNV0p0VGpCaFZ6bDFTVU5uY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlIwWjVXbGRGWjFCVFFrNVpXRkp2VEc1S2RtUlhOV3RMU0VKb1kyNU9iRkp0ZUhaWldGRnZTa05vTUdGSGJIcExVelZyV1ZoU2FFdERaRzFoVjNnd1dsaEpkRmxZU214WlUyTndTMU5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEWjJoWldFcHNXVlV4Y0dKcFFqaG1RMEpvWTIxV2FFbEVkMmRaV0Vwc1dWVXhjR0pwYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldWaEtiRmxWTVhCaWFVRTVTVWRHZVZwWFJUZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyRlhXV2RMUTBab1kyMVdhRlJYUmpSSlNIZzRTVWRHZVZwWFJXZFFhVUpvWTIxV2FGUlhSalJMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FHTnRWbWhVVjBZMFNVUXdaMWxZU214WlZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oNVdFYzBaMGxEUVdkSlEwRm5TVWd3Y0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTFKd1pFZFdkR041TlcxaFYzZ3dXbGhKYjBveGRHdFpXRkpvVEZkYWNHSklVbXhqYVRGM1kyMXNhbHBXTUc1TFV6VnNXVmRPYjB0SFdqRmliVTR3WVZjNWRVbERaM0JKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtiVVo1U1VoQ2VXRlhUbXhKUkRCblkwZEdlV015VmtwaWJsRnZTa05vTUdGSGJIcExVelZyV1ZoU2FFdERaRzFoVjNnd1dsaEpkR05JU25CWk1sVnVTMU5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEWjJoalNFcHdXVEpXVG1GWE5HZG1TSGRuWTBoS2NGa3lWV2RRUTBKM1kyMXNhbHBWTVhCaWFXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk5JU25CWk1sWk9ZVmMwWjFCVFFuZGpiV3hxV2xSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMGxZUW5saFYwNXNWRmRHTkVsSWVEaEpTRUo1WVZkT2JFbEVOR2RqU0Vwd1dUSldUbGxZWjNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaENlV0ZYVG14VVYwWTBTVVF3WjJOSVNuQlpNbFUzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZMng0ZFVsRFFXZEpRMEZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRnJXbTA1ZVdKVE5XMWhWelZyUzBOa1ltSnRSblJhVkRGalNXMUdlVnBYUm1aaVYyeDFXRU5LWkVwNWEzVlpXRkl3WTJsbmJtUnRSbk5rVjFWdVRFTkNhR050Vm1oVVYyeDFTMU0xYUdSSVVubExRMlIwWVZjMGJreERRbWhqYlZab1ZGZHNkVXRUTldoa1NGSjVTME5rZEZsWVoyNU1RMEpvWTIxV2FGUlhSalJMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CYTFwdE9YbGlVelZ0WVZjMWEwdERaR0ppYlVaMFdsUXhZMGx0Um5sYVYwWm1ZbGRHTkZoRFNtUktlV3QxV1ZoU01HTnBaMjVrYlVaelpGZFZia3hEUW1oamJWWm9WRmRHTkV0VE5XaGtTRko1UzBOa2RHRlhORzVNUTBKb1kyMVdhRlJYYkhWTFV6Vm9aRWhTZVV0RFpIUlpXR2R1VEVOQ2FHTnRWbWhVVjBZMFMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXdGFiVGw1WWxNMWJXRlhOV3RMUTJSaVltMUdkRnBVTVdOSmJrSjVZVmRPYkZneU1YQmliSGRwV0ZOamNFeHRSakJrU0VsdlNqTmFhR0pJVm14S2VYZG5ZMGhLY0ZreVZrNWhWelJ3VEcxR01HUklTVzlLTWpGd1ltbGpjMGxJUW5saFYwNXNWRmRzZFV0VE5XaGtTRko1UzBOa2RGbFlaMjVNUTBKM1kyMXNhbHBWTVdobFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowcEhXblpqYlRCMVdtMXNkVnBEWjI1WE1qVm9ZbGRWT1ZoRFNuZGpiV3hxV2xZNWRGbFlhR05KYkRCdVMxTTFhR1JJVW5sTFEyUXlXVmQ0TVZwVFkzTkpTRUo1WVZkT2JGUlhSalJMVXpWb1pFaFNlVXREWkhSaFZ6UnVURU5DZDJOdGJHcGFWVEZ3WW1scmRWbFlVakJqYVdkdVlsZEdORXA1ZDJkalNFcHdXVEpXVGxsWVozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTlNiV0l6U25STWJWcHdZbTFSYjBveGRIVlpWekZzVUZaM2FXTnRPWFppV0U1alNXd3dia3RUTld4WlYwNXZTMGRhTVdKdFRqQmhWemwxU1VObmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExRMUp3WkVkV2RHTjVOVzFoVjNnd1dsaEpiMG94ZEd0WldGSm9URmRhY0dKSVVteGphVEY1WWpJNWRHTjZNV05KYVdOblMzbEJhMHRJVW05aFdFMXdURzVhYUdKRFozQkpRM05uU2pGM2FWaFRZM0JNYlhoc1ltMWtNR0ZEUVRsUVUwRjNTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVd0TFNGSnZZVmhOY0V4dVFtaGpiVloxWkVObmNFeHVTbXhpVnpreVdsTm5jRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ09WaElTbU5pYVVGblNVTkJaMGxEUVdkbVUyczNXRWhLWTJKc2VIbFlSelJuU1VOQlowbERRV2RKUTFKdFlqTktkRXh0V25CaWJWRnZTakpzZFdOSVZqQktlV3QxWWpJMGIwb3lUbTlaVnpWdVdsTmpjMGxIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdka2JVWjVTVWRhZG1OdE1VVlpXRkpvU1VRd1owcEhXblpqYlRCMVl6SldlV0ZYUm5OaFdIQnNVVmhLZVZsWWEyOUxVM2hqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtMWhWM2d3V2xoS2VrbEVNR2RsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKb1kyMVdhRTlwUW1KWldFcHNXVlV4Y0dKcGQyZFpXRXBzV1ZVeGFHVkdNSE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0VKNVlWZE9iRTlwUW1KalNFcHdXVEpXVG1GWE5ITkpTRUo1WVZkT2JGUlhSalJZVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkyMDVkbUpZVFRaSlJuUmtXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVZIUmpZMng0ZFV4NU9HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlqSTFlbUl5ZUd4TWJYaDJXbmxvYldJelNuUlNSMFl3V1ZOck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5SZFZwWFJtcGhRMmh0WWpOS2RGSkhSakJaVTNkbldtNVdkVmt6VW5CaU1qUm5TMGMwYzBsSVdYQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFESk1iVFZvWWxkVloxQlVNR2RLTWtaNVdsZEdabUpYYkhWS2VVRnRTbWxDTWt4dVdtaGlTRlpzU1VORk9VbEhSbmxhVjBaT1lWYzBjRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNiV0ZYZURCYVdFcDZURzFHZVZwWFJtSk5SakJuVUZOQ2QxbFlTbnBhVld4MVpFTm9Na3h1V21oaVNGWnNTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjJ4dFNVTm9Na3h0TldoaVYxVm5VRlF3WjBveVJubGFWMFptWWxkR05FcDVRVzFLYVVJeVRHNWFhR0pJVm14SlEwVTVTVWRHZVZwWFJrNVpXR2R3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp0WVZkNE1GcFlTbnBNYlVaNVdsZEdZazFXTUdkUVUwSjNXVmhLZWxwVmJIVmtRMmd5VEc1YWFHSklWbXhMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VneFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmd5VEcwMWFHSlhWV2RRVkRCblNqTkNlV0ZYVG14WU1qRndZbWxqWjBwcFdXZGthVFV5V1ZkNE1WcFRRV2hRVTBKM1kyMXNhbHBWTVhCaWFXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIxcHdZa2hTYkdOdVRYVmpTRXB3V1RKV1lrMUdNR2RRVTBKM1dWaEtlbHBWYkhWa1EyZ3lURzVhYUdKSVZteExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkcxSlEyZ3lURzAxYUdKWFZXZFFWREJuU2pOQ2VXRlhUbXhZTWpGb1pVTmpaMHBwV1dka2FUVXlXVmQ0TVZwVFFXaFFVMEozWTIxc2FscFZNV2hsUTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFwd1lraFNiR051VFhWalNFcHdXVEpXWWsxV01HZFFVMEozV1ZoS2VscFZiSFZrUTJneVRHNWFhR0pJVm14TFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKUTJneVRHMDFhR0pYVldkUVZEQm5Tak5LZG1JeU1YcEtlV3RuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMXB3WWtoU2JHTnVUWFZqYlRsMllsaE5kV05JVm5waFEyZ3lURzVhYUdKSVZteExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhRzFoVjNnd1dsaEtla3h0Um5sYVYwWmlUVVl3WjFCVU1HZFpXRXBzV1ZVeGNHSnBRVzFLYVVKdFlWZDRNRnBZU25wTWJVWjVXbGRHWWsxV01HZFFWREJuV1ZoS2JGbFZNV2hsUTJ4alkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkU2JHSkhWakJhVTBKdFlWZDRNRnBZU25wTWJVWjVXbGRGTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYUcxaFYzZ3dXbGhLZWt4dVFubGhWMDVzVjNwQ1pFbEVNRGxKU0VKNVlWZE9iRlJYYkhWSlExbHRTVWRhY0dKSVVteGpiazExWTBoS2NGa3lWbUpOVmpCblVGUXdaMk5JU25CWk1sWk9XVmhuY0ZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW10YVYzaHNaRWRWWjFwdGJITmtSMVo1WTNrMWQyTnRiR3BhVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBkYWNHSklVbXhqYmsxMVkyMDVkbUpZVFhWaVIxWjFXak5TYjBsRU1EbEpSRUZ3V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYTFwWGVHeGtSMVZuV20xc2MyUkhWbmxqZVRWNVlqSTVkR042ZEdOamJIaDFUSGs0WjBsRFFXZEpRMEZuU1VOQlowbERRbXBpTWpWNllqSjRiRXh0ZUhaYWVXaHRZVmQ0TUZwWVNucExWSFJqWTJ4NGRWaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFGQlpiWEJzV1ROUmRXRXlWalZqZVdodFlWZDRNRnBZU25wTFV6VnpXbGMxYm1SSFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TY0dSSFZuUmplVFZvV2tkU1JHSkhSbnBqZVdkdVdESmFjR0pJVW14amJWWnJTbmxyTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVd0aFdGSnNZbGhOZFZwWFJtcGhRMmh0WkZjMWFtUkhiSFppYVVGdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpHMUdlVWxIV25CaVNGSnNZMjFXYTBsRU1HZGtTRW94V2xOM1owcEdPWEJrUjFaMFNVUXdaMHBEYURCaFIyeDZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRnJURzFXYUZreVoyOWFiV3h6WkVkV2VXTjVkMmRhYmxaMVdUTlNjR0l5TkdkTFIzTnpTVWhaY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpNMlJ3WkVkT2IwbERhSEpMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW1wWldFNXNTVU5rYUdOdFZtaEtlbkJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMlJJYkhkYVZ6bHRTVU5uYTFneWJEQmFWekIxV2tkR01GbFRaMjVhYld4elpFZFdlVXhYUm5sYVYwVnVTMU5yWjBsVU1EbEpRMlF4WW0xU2JGcHRiSFZhVjFGdVMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRnBvWTJsQ2FHTnRWbWhKUkRCblZGZEdNR0ZETlhsaU0xWjFXa05vZDFsWVNucGFWVnB6WWpKR01FdERVbVpoV0ZKc1lsTTFhMWxZVW1oTFEyUnRZVmQ0TUZwWVNYUlpXRXBzV1ZOamNFdFRhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRGFHaGpiVlpvU1VSM1oyUnNjM2RZVTBJNFprTkNhR050Vm1oSlJEUm5aR3h6ZUZoVGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkYWJXeHpaRWRXZVZwWFVXZFFVMEp0V1ZkNGVscFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd1oxcFhlSHBhVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFduQmlTRkpzWTIxV2EwbEVNR2RhYlVaell6SlZOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhTbmxhVjBaeVR6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkWk1rWjZXbE5CYm1OSVNuQlpNbFZ1VDJ4NGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYURCbFdFSnNZakpaWjB0RFVtWmhXRkpzWWxNMWExbFlVbWhMUTJSdFlWZDRNRnBZU1hSalNFcHdXVEpWYmt0VGEyZEpWREE1U1VOa01XSnRVbXhhYld4MVdsZFJia3RUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRbmRqYld4cVdsTkJPVWxGTVdoa1IyZDFZMjA1TVdKdFVXOWpSMFo1WXpKV1IySkhPV2hrUTJkcldESnNNRnBYTUhWYVIwWXdXVk5uYmxwdGJITmtSMVo1VEZoQ2VXRlhUbXhLZVd0d1MxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWMWxuUzBoQ2VXRlhUbXhKUkhkblpHeHpkMWhUUWpobVEwSjNZMjFzYWxwVFFTdEpTRnBpVFZZd2NFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFduQmlTRkpzWTIxV2EwbEVNR2RhYlVaell6SlZOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJNVNVZFdjMk15VldkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2JXRlhlREJhV0Vwc1drTkJPVWxIV21oaVNFNXNUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VneFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhV050Vm1oaGVuUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRtaGpNbFZuU2pOS2RtSXlNWHBLZW5CalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSndXbWxCYjJSSWJIZGFWemx0U1VObmExZ3liREJhVnpCMVdrZEdNRmxUWjI1YWJXeHpaRWRXZVV4WVNuWmlNakY2U25scmNFbEVNRGxRVTBGdVpGYzFhMXBYV25CaWJWWnJTbmxDT0daRFFqSk1iV3gxV2tkV05GUXlXVzlLUmpsd1pFZFdkRXh0VW1oa1IwVnZTakphY0dKSVVteGphVEY1WWpJNWRHTjVZM0JNYmxKMlZUTlNlV0ZYTlc1TFEydHdTVVF3T1ZCVFFYUk5VMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW0xaFYzZ3dXbGhLYkZwRFFUbEpSMXBvWWtoT2JFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVhwMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyWldlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2NGaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWlowdEhXbkJpU0ZKc1kyMVdhMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlExRnZaRWRvY0dONWEzVmpiVlowWWpOYWJGRXllR2hqTTAxdlNqRTViV0ZYZURCYVdFcHNXa05qY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTUhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldWaENkMHh1VG14a1JVNXZXbGhPZWxaSE9UQlpWM2R2U2tkc01GcFhNWHBNYlhoc1ltMWtNR0ZEUVhSSlExSndaRWRXZEdONU5XMWhWM2d3V2xoSmIwcDVOV1phYld4elpFZFdlVnBYVVc1TFV6VnpXbGMxYm1SSFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsSlIxWnpZekpWWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkS1Iyd3dXbGN4ZWt4dVNteGlWemt5V2xWT2MxbFlUbnBMUTJSbVdtMXNjMlJIVm5sYVYxRnVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIUm5kalF6VjZXbGhTUkdGSFZucGpNVkoyWkVkR2MwdElVblprUjBaelMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGVWaEhOV05qYkhoMVNVTkJaMGxEUVdkSlEwSTVTMVIwWTJOc2VIVkpRMEZuU1Vnd2MxaElTbU5pYkhoNVdFYzBaMGxEUVdkak1sWXdVVEpvYkdNelRsVmlNMUpvWWtSdloxcHVWblZaTTFKd1lqSTBaMHRJVW5aa1IwWnpTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RrYlVaNVNVZFdkVnBIYkhWYU0wMW5VRk5DWWtvNVF6WXdURXhSYzA1SFFUQlpURkYxVGtkQk1FeEJia3hEUVc0d1RISlJjM1JEZHpCWlJGSm5kRU0wTUZsRVVtbDVZM05KUTJaUmRYUkRlVEJNUkZKblRrZERNRXhxVW1kRFpHUlBNWGg1V0VjMFowbERRV2RKUTBGblNVTlJiMHA1TlhGamVURnFZVWRXZW1ONU1XMWhWM2d3V2xoS1psZ3pVblprUjBaelNubHJkV1JIVmpSa1EyZ3dZak5TYUdKRFFYSkpRMk5uU25sQmNrbEhSbmRqUXpWdVdsaFNUMlJYTVVaaWJWSndZbTFqYjJSSE9UQlpWM2R6U1VkV2RWcEhiSFZhTTAxd1MxUjBZMk5zZUhWSlEwRm5TVWd3YzFoSVNtTmliSGg1V0VjMFowbERRV2RNZVc5eFdFaEtZMkpwUVdkSlEwRm5TMmxFVVhCT1IwUXdURE5SZFhSSFJ6Qk1hbEpxZVVSUmMzUkRLekJNWmxGemRFZEJNRXhFVW1sa1EzY3dURmhTWjJsRVVYWjBRell3VERkUmRtUkhTREJNUkZGMlpFTTBNRXhWWnpCTVZGRjFPVWRRU1U1RE9EQk1NMUYyZEVNeU1FeFlVbWRrUjBNd1RFeFJkR1JET1RCTU0xRjJkRU42TUV3MFp6QlpabEYxVGtkQ01FeDJVWE5EUkZKblpFTTNNRXczVVhOMFEzZEpUa001TUV4Qlp6Qk1OMUpuWkVNNU1FdzNVWE4wUTNjd1RETlJkVTVETkVsT1IwZ3dUR3BTWjJSRE56Qk1RV2N3VEdkbk1FeDZVWE5PUjBJd1dVaFJkVTVEZVRCTVFXY3dURGRSZFhSREt6Qk1NMUpvT1VOM01Fd3pVWFZPUXpWWVNFcGpZbWxCWjBsRFFXZExhVUozV1ZoS2FHSlRRV2RoVlRVeFlsZEtiR05wUWtwaWJsSnNXakpXZVVsT1EyNHdUR3BTWjJSRE56Qk1OR2N3VEROUmMwTkVVWFowUjBJd1RETlJkblJEZVRCTVZXY3dUSEpSZG5SSFF6Qk1OMUpuVGtNck1FeFFVWFpwUkZGMlpFZEVNRXhpVVhaa1F5dEpUa2RDTUZsVVVYWjBSMEV3VEhwUmRVNUhRVEJNTjFGemRFTjNNRmxNVW1wRFJGRjJkRU0yTUV3M1VYWmtSMGd3VEVSUmRtUkROREJNVm1OamJIaDFTVU5CWjBsRFFYRkpTRUpvWTIxR2RFbERRbWhTVnpWcllWYzFibU41UWtKamJrcG9aVk5FVVc1T1EzY3dXVWhTWjJSRE5EQk1TV2N3V1VoUmRUbERLekJNU1djd1RHcFJkVGxETkVsT1F5c3dUSEpSZG5SRE9UQlpabEZ6VGtNNU1FeHFVWFZUUkZGMFRrTTNNRms0WnpCWlpsRjFUa2RDTUV4WVVYVjVRVzlOVTNkblRrTjNaMDVUYTNOWVNFcGpZbWxCWjBsRFFXZExhVUZuU1VOQlowbERRV2RKVGtNNU1FeEVVWFk1UjBFd1RHcFJkazVETVRCWlFXZFhlV1pTYWpsRGVEQk1kbEYyZEVNMk1FdzBia3hEUVc0d1dTOVJjMlJETnpCTU4xRjFkRU4zU25sM1owbzVSMUF3VEVoUmRUbERLekJNYjI1WVZuaDVXRWMwWjBsRFFXZEpRMjluWTIxV01HUllTblZKUms0d1kyMXNkVm94ZUhsWVJ6Um5TVU5CWjBsRGIyZFlTRXBqWW1sQlowbERRV2RMYVVKdlpFaFNkMk42YjNaTU1taG9XVzVLYUdGSFJtbGphVFY1WkZNNWQySXpUakJNZWtWM1RsUlJlVTlET1dOamJIaDFTVU5CWjBsRFFYRk1NWGg1V0VjMFowbERRV2RhTWxZd1ZHNVdkRkpYTld0aFZ6VnVUMmxDYldSWE5XcGtSMngyWW1sQmIyRlZOVEZpVjBwc1kybDNaMWxWVm5WYVIyeDFXak5OY0ZoSVNtTmlhVUZuU1VOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdka2JVWjVTVWhPUm1KdFVuQmliV056U1Vkck4xaElTbU5pYVVGblNVTkJaMGxEUVdkaFZUVXhZbGRLYkdOcFFUbEpSMnhQWkZjeGFWcFlTV2RLVTBGNFRVUkJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZGhWMWxuUzBkc1QyUlhNV2xhV0VsblVHb3daMDFVUldkS2FWbG5ZVlUxTVdKWFNteGphVUU0VUZOQmVFOVRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFucFNWelZyWVZjMWJrbEVNR2RaVlZaMVdrZHNkVm96VG1KTmJEQTNXRWhLWTJKcFFXZEpRMEZuU1VOQloyWlRRbXhpU0U1c1NVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZOQk9VbEhiRTlrVnpGcFdsaEpaMHBUUVhoTlJIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqTTJSd1pFZE9iMGxEYUhCTFZuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxV1ZoT2JFbERaM2hMVkhCalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbnBTVnpWcllWYzFia2xFTUdkWlZWWjFXa2RzZFZvelRtSk5SakEzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpia3BzV1Zkek4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcFpXRTVzU1VObmVVdFVjR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDVvWXpKVlowdEVUWEJQYkhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1RKR2VscFRRVzlPUTJzMldFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RqTUZaMVdrZHNkVnA1UVRsSlIwWkdZbTFTY0dKdFpIcFhla1prVHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMHA1V2xkR2NrOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGFSMVp0V1ZoV2MyUkVjR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VsSlhOV3RoVnpWdVNVUXdaMWxWVm5WYVIyeDFXak5PWWsxc01EZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEk1V0VoS1kySnBRV2RKUTBGblNVTkJaMk50VmpCa1dFcDFTVWhPUm1KdFVuQmliV00zV0VoS1kySnBRV2RKUTBJNVRFWjRlVmhITldOamJIaDFabFo0ZVZoSE5XTmpiSGgxWVd4R01WcFlTalZMUjFveFltMU9NR0ZYT1hWSlEyZHdTVWgwWTJOc2VIVkpRMEZuU1VaM2FXUllUbXhKU0U0d1kyMXNhbVJHZDJsUE1YaDVXRWMxWTJOc2VIVkpRMEZuU1VOUmIxcEhPV3BrVnpGc1ltNVJjRXh1U214WlYxSTFTMGRhTVdKdFRqQmhWemwxU1VObmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwSndZbTFzTUZSWFJuQmliRTV6WVZkU2JHTnBaM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWRzZFdGWVVsUmlWMFp6WWtaT2MyRlhVbXhqYmsxdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFuQmliV3d3VlcxV01tRlhWak5qTVU1ellWZFNiR05wWjNCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1Vkc2RXRllVa0phTWxaMVpFaE9VV050Vm5wYVZ6VXdXVmhTY0dJeU5HOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNlbHBZVWtKYU1sWjFaRWhPVVdOdFZucGFWelV3V1ZoU2NHSXlORzlMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5DY0dKdGJEQlVWMVoxWkZObmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlIyeDFZVmhTVGxsWVRuSkxRMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMkZYTlhCa1JrSjJZMGhXZDB0RGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGbllWYzFjR1JHVG14aVIxWnFaRU5uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUjJ4MVlWaFNWMWxYZUhCYVIwWXdXbE5uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUjJ4MVlWaFNVMXBYUm5Oa1NHeEhZVmQ0TUZwWVNucExRMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMkZYTlhCa1JrcHNXVmQ0TUdWVFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVZHNkV0ZZVWxGWldFNTZaREk1ZVZwRFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVZHNkV0ZZVWxOWlZ6VnVXbE5uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUjJ4MVlWaFNTRmxYZUhOYVdFbzFTME5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RoVnpWd1pFVm9OV05IT1RCaFIxWnFTME5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RoVnpWd1pFVlNhR1JIVm5kaFYwNXlXbGhKYjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBKd1ltMXNNRlV5VG5saU1uaHpXVzFHZVV0RGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGbllWYzFjR1JHVG1wamJUbHpZa05uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUjJ4MVlWaFNRbGx0T1RGa1EyZHdUekY0ZVZoSE5HZEpRMEZuU1VOQlowbEhiSFZoV0ZKSFlWZDRiR0ZYTlhka1dGRnZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRbkJpYld3d1VWZDRkMkZIUm1sYVdGRnZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRbkJpYld3d1VWYzFNR0ZZVG5kWlZ6QnZTMVIwWTJOc2VIVkpRMEZuU1Vnd2NFOHhlSGxZUnpWalkyeDRkVWxEUVdkSlExRnZaREpzZFZwSE9UTkxVelYyWW1sbmJtTnRWbnBoV0hCc1NubDNaMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVZHNkV0ZZVWxSaVYwWnpZa1pPYzJGWFVteGpiazF2UzFSMFkyTnNlSFZNZVRoblNVTkJaMGxEUVdkSlIyeDFZVmhTVGxwWE5URkxRMnMzV0VoS1kySnBRV2RKUTBJNVMxUjBZMk5zZUhWWVNFcGpZbWxCWjBsRFFtMWtWelZxWkVkc2RtSnBRbkJpYld3d1ZGZEdjR0pzVG5OaFYxSnNZMmxuY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBJeVdWaEpaMlJIYkhSYVUwRTVTVWRHZDJORlRuWmliVnB3V25rMWVtSkhiR3RhV0VwQ1pGaFNkbU5IZUdobFZrNTNXbGRXYTBsRE9HZE5WRUYzVFVSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpKWldFbG5Ta2RLYUdOcFFUbEpRMUZ2U25rMWNXTjVNWFJaVjJ4MVRGaE9jMkZYVW14amFURnBXVmhKYmt0VGVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlExSjZZa2RzYW1GNVFUbEpRMUZ2U25rMWNXTjVNWHBpUjJ4cldsaEpkR0pYUm5CaWFXTndURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMkZZVGxGWldGWjZXbE5CT1VsSFdtaGlTRTVzVEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSSGJHcGhlWGhqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhDYkdOdFRteGlibEpWWVZjeGJFOHhlSGxZUnpWalkyeDRkVWxEUVdkSlEwRm5TVU5DY0ZwcFFXOUtTRTV6WVZkT2NreHRlR3hpYldRd1lVTkJPVkJVTUdkTlEyeGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqYlZZd1pGaEtkVTh4ZUhsWVJ6VmpZMng0ZFVsRFFXZEpRMEZuU1VOQmEyTXllSEJaTW5OMVl6SjRjRmt5YzI5bE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXRpTTFKNlQybENNR051Vm14TVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbWhqYmtwMlpETk5Oa2xIV21oaVNFNXNURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKd1ltMWFjR0p0YkRCYVZHOW5aRWhLTVZwVGVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMk15ZUhCYVIxWjZWa2M1VkdGSE9UTlBhVUY0VEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSjZZa2RzYTFwWVRsVmlNVTVxWTIwNWMySkViMmROVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGFiVVpyV2xSdloyUklTakZhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGpNMEpzV2xkUk5rbEhSbmRqUlU1MlltMWFjRnA1TlhwaVIyeHJXbGhLUjFsWFVteFZNMEpzV2xkU1kyTnNlSFZNZVRoblNVTkJaMGxEUVdkSlEwRm5TVU5DYUdSWVVuWmpSM2hvWlZaT2QxcFhWbXRQYVVKb1kwaENSR0l5TlcxaFYyTjFZeko0Y0ZwSFZubFJXRll3WWpOQ2MxbFliRlJqUjFac1drTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJhMk15ZUhCWk1uTjFZakkwYjBveVNteGFiVGw1V2xWT2IxbFhOVzVhVTJOelNVZGFNV0p0VGpCaFZ6bDFTVU5vYkdSdFZuVmtRM2RuWXpKNGNGa3ljM05KUjA0eFkyNUtiR0p1VWxSaVIyeHJXbE4zWjJKdFZqUmtSazV6WVZkU2JFdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmhxWkZoS2VWcFhOVEJWTW5od1drZFZaMUJEUW5WYVdHZ3dWVEo0Y0ZwSFZYQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5SYjJNeWVIQlpNbk4xU2toT2MyRlhVbXhqTVhScVpGaEtlVnBYTlRCVk1uaHdXa2RXWkV0VE5XaGFSMUpFWWtkR2VtTjVaMjVZTWxwb1drZFZaMWd5ZUd4YWJsRnVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVVc5ak1uaHdXVEp6ZFVwSVRuTmhWMUpzWXpGMGRWcFlhREJWTW5od1drZFdaRXRUTldoYVIxSkVZa2RHZW1ONVoyNVlNbHBvV2tkVloxZ3pTbkJhTW1nd1NubHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd1oxcFhlSHBhVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmEwdElUbk5oVjA1eVRHbFNlbUpIYkd0YVdFNWlXVE5XZVdOdFZuVmtSazV6WVZkU2JGaFRhM1ZaVjFKclVUSjRhR016VFc5S01UbHRXVmRTYkVsR09YbGhWMlJ2WkVOamNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtRMmg2WWtkc2FtRjVOR3RqTW5od1drZFdlbGN5Tld4bFNGSlVZa2RzYTFwV01IQk1iVVpyV2tWT2MxbFlUbnBMUTJSbVdtMUdhMXBUUW1aaVIxWnRaRU5qY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNPVmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VkT2MxcFhSbmxXUjJ4MFdsYzVNV1JEYURCaFYwNXlTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNrZEthR05wTldoaWJXeDBXVmhTYkV0SWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNHUndXa2hTYjA5cFFYZEpRM05uU25sVmJsaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWd3YzBsRVJYZE5RMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMlpUYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU2toT2MyRlhUbkpNYlRsMVMwTmthRnB1VW14amEwNXZXVmMxYmxwVFkzTkpSMW94WW0xT01HRlhPWFZKUTJoc1pHMVdkV1JEZDJkak1uaHdXVEp6YzBsSFRqRmpia3BzWW01U1ZHSkhiR3RhVTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyUzBoT2MyRlhUbkpNYVZKNllrZHNhMXBZVG1KWk0xWjVZMjFXZFdSR1RuTmhWMUpzV0ZOcmRXTnRWblJpTTFwc1VUSjRhR016VFc5S01UbHRXVmRTYkVsR09YTmFWMW93U1VZNWVXRlhaRzlrUTJOd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo2WkVkR2VXUkdRbmxpTW1SNVdsaE9lbGx0Um5sTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQloyWlRhemRZU0VwallteDRlVmhITkdkSlEwRm5TVU5CWjBsRFVucGlSMnhxWVhrMWRtSnBhRGRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSE1YWmtXRTVzV2xjMU1GcFlTVFpKUjFveFltMU9NR0ZYT1hWSlEyZHdTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkhwVlIwWXhZekpWWjFCVFFqQmpibFpzVHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSTVURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKMFlqTldlbHBYZUd4WldGcHNUMmxDYldSWE5XcGtSMngyWW1sQmIwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3WXpGQ2FHUllUbXhKUkRCbldtMUdjMk15VlRkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNV05qYkhoMVNVTkJaMGxEUVdkSlEwSTVTMVo0ZVZoSE5XTmpiSGgxU1VOQlowbERRV2RKUTBKdFpGYzFhbVJIYkhaaWFVSjZaRWRHZVdSR1FubGlNbVI1V2xoT2VsbHRSbmxMUTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoT2JHUkdRbmxpTW1SNVdsaE9lbGx0Um5sTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0VKc1kyMU9iR0p1VWxWaFZ6RnNTVVF3WjAxRWRHTmpiSGgxVEhrNFowbERRV2RKUTBGblNVTkJaMGxEUW5Cak1VSm9aRmhPYkVsRU1HZGFiVVp6WXpKVk4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhTY0ZreWMyZFFVMEo2V2xoU1NtSnVVbXhqYmxwb1lrTm9jR0p1VW14amJscG9Za04zWjAxVVFYQlBNWGg1V0VjMFowbERRV2RKUTBGblNVZ3hZMk5zZUhWWVNFcGpZbWxCWjBsRFFXZEpRMEZuV201V2RWa3pVbkJpTWpSbllWYzFNRnBZU2pKWlYzZHZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYUhCak1VSm9aRmhPYkVsRU1EbFFVMEp0V1ZkNGVscFRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTBkV2VWa3lWblZrUmxKd1lsZFZaMHQ2TUdkTlUwRjJTVU5vTUdGWE1XeEpRM05uVFVNMGVFdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUpwV1ZoSmRWa3pUbnBMU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRak5oVjFJd1lVUnZaMk5IVm5sWk1sWjFaRVpTY0dKWFZXZExlVUpqU1dsV1kwbHNlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1VMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWpSMVo1V1RKV2RXUkdVbkJpVjFWblVHb3daMDFVUVhkTFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkS1NFNXpZVmRPY2t4dVRuTmhWMDV5UzBOa2VtSkhiR3BoTURWc1pVaFJia3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RKUTBGblNVZ3hZMk5zZUhWWVNFcGpZbXg0ZVZoSE5HZEpRMEZuU1VOQlowbEhXakZpYlU0d1lWYzVkVWxJU214ak1sWXdWVWhLZGxvelNteGpNMDVwV1ZoSmIwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVtbFpXRWwxV1ROT2VrdElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTR1J3V2toU2IwOXBRWGRKUTNOblNubFZibGhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2NFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DYW1KSFZtaGpiRkp3WWxkV2RtUllVVzlrUjJ4cVlYbHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVTkJaMGxEUW5wa1IwWjVaRVpDZVdJeVpIbGFXRTU2V1cxR2VVdERhemRZU0VwallteDRlVmhITkdkSlEwRm5abFo0ZVZoSE5XTmpiSGgxU1VOQlowbEhXakZpYlU0d1lWYzVkVWxIYkhWaFdGSlVZbGRHYzJKR1RuTmhWMUpzWTI1TmIwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5ZVmRaWjB0RFVXOWtNbXgxV2tjNU0wdFROWFprV0ZKc1kyeGtjRnBJVW05TFEydG5VRU5DYUdOSVFrUmlNalZ0WVZkamRWbHVTbXhaVjNSM1lqSnNkV1JETlhSYVEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSak1uaHdXa2RXZVV4WVRuUlpWM2h6VDIwMWRtUkRaM1ZqTW5od1dUSnpkR0ZYTlhCa1IyeG9Za2RzTmxwWFVYQktlV3QxWXpKNGNGa3ljMjlsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV2tjNU1HTjZiMmRrU0VveFdsTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhSbmxqYlRrelkzcHZaMXB0Um5Oak1sVnpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNjR0p0V25CaWJXd3dXbFJ2WjJSSVNqRmFVM2hqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhPYzJGWFVteGpNVkoyVlRKb2RtUjZiMmROVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoT2MyRlhVbXhqTVZKMlZUSk9lV0l5ZUhOUGFVRjRURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWt5Vm5Wa1IxWjVWRmM1YTFwVWIyZGtTRW94V2xONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRteGlibEpzWTJ4Q2FGcEhVbkJpYldNMlNVTmplRTVZUWpSS2VYaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZGFkbGt6Vm5wVU1qVlVXbGQ0YkZrelVUWkpTRko1WkZkVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWd3Y0U4eGVIbFlSelJuU1VOQlowbERRV2RKU0RCbldsZDRlbHBUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERVVzlLZVRWeFkza3hlbUpIYkd0YVdFbDBZekl4YUdKSGQzVmpNbmh3V1RKemRHRlhOWEJrUjJ4b1lrZHNObHBYVVc1TFV6VjZZa2RzYW1GNVoyNWtWelY2WWtkc2FtRjVZM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRbkJhYVVGdlNrTm9NMkZYTld0aU0yTndURzA1TVdSSFZubFdNbXhyWkVkbmIwdFRRVGhKUjBaM1kwVk9kbUp0V25CYWVUVnBZMjFXYUdFelFuWmhWelV3VEcweGEwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOUtlVFZ4WTNreGFGb3lWblZrU0UxMFl6SjRjRnBIVm5sSlF6Vm9XakpXZFdSSVRYUmpNbmh3V2tkV2VWZ3hPWEJrUjFaMFNubHJkV0l5V20xTFEyUnFZa2RzYW1GNVkzQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVd0TFEyTjFZVzVOZEZsWFpHeGlibEo2VEZoT2MyRlhVbXhqYW5CMVlqTlJiMHh1VG5OaFYwNXlURmRzZFdGWVVuQlpWM2h3WlcxV2EwdFRZM0JNYms1ellWZE9ja3RJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFKMlpFaE5Oa2xIV21oaVNFNXNURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMWxZU25saU0yUjZUMmxDYlZsWGVIcGFVM2hqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRzZFZwdGJIVmhXRkpzVDJsQ01HTnVWbXhNUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWXpKNGNGcEhWbnBXUnpsVVlVYzVNMDlwUVhoTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbll6SjRjRnBIVm5wV1J6bFVXVE5LZG1KSGR6WkpSRVZ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYWxwWE5UQmFXRXBPWWpKU2JFOXBRakJqYmxac1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxa3lWblZrUjFaNVZVZEdhMXBIYkhWYWVtOW5TbnBKTVVwVFkzTllTRXBqWW1rNGRrbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRPYkdKdVVteGpiRUpvV2tkU2NHSnRZelpKUTJNMFRVaENORXA1ZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFwMldUTldlbFF5TlZSYVYzaHNXVE5STmtsSVVubGtWMVZ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSWlYyUnNZbTVTZWt4WVRuTmhWMUpzWTJsamNFeHRPWFZMUTJSb1dtNVNiR05yVG05WlZ6VnVXbE5qYzBsSFdqRmliVTR3WVZjNWRVbERhR3hrYlZaMVpFTjNaMk15ZUhCWk1uTnpTVWRPTVdOdVNteGlibEpVWWtkc2ExcFRhMmRsTVhoNVdFYzBka3g1UVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FtSXlOWHBpTW5oc1RHMTRkbHA1YUhwaVIyeHFZWGxyTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVd0TFNGSnZZVmhOY0V4dFduQmliVkZ2U25rMVpsbFhUakJoV0Zwc1NubHJkV050Vm5SaU0xcHNVVEo0YUdNelRXOUtNVGxvV1ROU2NHUnRWVzVMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIyTXllSEJaTW5OMVNraE9jMkZYVW14ak1YUnFaRmhLZVZwWE5UQlZNbmh3V2tkV1pFdFROV2hhUjFKRVlrZEdlbU41WjI1WU1rWnFaRWRzTWxwVFkzQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZekpXTUZGWFpHeGlibEo2VlVoS2JHTXlWblZrUjBZd1lWYzVkVXREYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNSEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWd3WjFwWGVIcGFVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlExRnZTbmsxY1dONU1XaGFNbFoxWkVoTmRHTXllSEJhUjFaNVRHNU9jMkZYVG5KTVYyeDFZVmhTY0ZsWGVIQmxiVlpyU25scmRXTXllSEJaTW5OdlNqTldkV015ZUhCWk1uTnVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbllWYzFjR1JGUm01YVZ6VXdZekZDZVZwWVRteGlibEpvWkVkc2RtSnBaM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VneFkyTnNlSFZZU0VwalltbEJaMGxEUW0xa1Z6VnFaRWRzZG1KcFFuQmliV3d3VVZka2JHSnVVbnBWU0Vwc1l6SldkV1JIUmpCaFZ6bDFTME5yWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUjJ4dFNVTm5hMHRJWkhCaWJWSjJaSGxyZFdJelZqQmFXRXBZWVZkU01HRkRaM0JKUkRRNVNVZEdkMk5GVG5aaWJWcHdXbmsxYVdOdFZtaGhNMEoyWVZjMU1FeHRNV3RMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUZ2U25rMWNXTjVNV2hhTWxaMVpFaE5kR015ZUhCYVIxWjVTVU0xYUZveVZuVmtTRTEwWXpKNGNGcEhWbmxZTVRsd1pFZFdkRXA1YTNWaU1qUnZTakpPYzJGWFRuSktlWGRuV201V2RWa3pVbkJpTWpSblMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLUTJnd1lVZHNla3RUTlhkWldFcHNZbTVSYjB0VE5XMWhWelZyUzBOamRWZ3lSbXBrUjJ3eVdsTmpjRXh1U214aVZ6a3lXbFZPYzFsWVRucExRMlJtV1ZkT01HRllXbXhLZVdzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmEwdElVbTloV0Uxd1RHMUdhMXBGVG5OWldFNTZTME5rWmxsWFRqQmhXRnBzU25sck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGFXRkpDV2pKV2RXUklUbEZqYlZaNldsYzFNRmxZVW5CaU1qUnZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RtVm5oNVdFYzFZMk5zZUhWSlEwRm5TVWRhTVdKdFRqQmhWemwxU1VoT2JHUkZSbTVhVnpVd1l6RkNlVnBZVG14aWJsSm9aRWRzZG1KcFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkNjRnBwUVc5S1EyZHVURzF3ZWt4WFJtNWFWelV3WTNreGVtSkhiR3RhV0VsdVMxTTFjMXBYTlc1a1IyZHdTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpHMUdlVWxEVW1oYU1sWjFaRU5CT1VsRFVXOUtlVFZ4WTNreGFGb3lWblZrU0UxMFl6SjRjRnBIVm5sSlF6Vm1XVmRPTUdGWVdteEpRelZ4WTNreGFGb3lWblZrU0UxMFl6SjRjRnBIVm5sWU1UbDZZVWM1ZVdSRFkzQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpKWldFbG5Ta2RhTVdKSGQyZFFVMEZyUzBOamRXRnVUWFJaVjJSc1ltNVNla3hZVG5OaFYxSnNZMnc1WmxwdVZuTmlRMk53VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRnJXbTVXYzJKRE5XMWhWelZyUzBOamRXRnVUWFJaVjJSc1ltNVNla3hZVG5OaFYxSnNZMnc1WmxwdVZuTmlSamxtWVZjeGJrcDVhM1ZaV0ZJd1kybG5ibU16U21wS2VYZG5Ta2RHYmxwWE5UQk1iVkpvWkVkRmIwb3lSbTVhVnpVd1RGZHNkRnA1WTNCTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RLUjFveFlrZDNkVnB0YkhWYVEyZHVURzF3ZWt4WFJtNWFWelV3WTNreGVtSkhiR3RhV0VwbVdESmFNV0pIZUdaWU1qVm9ZbGRWYmt0VE5UQmFXR2d3UzBOU2FGb3lWblZrUXpWcldWaFNhRXREWkdoYU1sWjFaRU14ZFZsWE1XeEtlV3R3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXlXVmhKWjJOSGFIWmliVlZuVUZOQmExbFhaR3hpYmxGMVdrZEdNRmxUWjI1WlYyUnNZbTVSZEdOSGFIWmliVlZ1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta2RhTVdKSGQzVmFiV3gxV2tObmJreHRjSHBNVjBadVdsYzFNR041TVhwaVIyeHJXbGhLWmxneVdqRmlSM2htV0ROQ2IySXlOV3hKUjBWdVMxTTFNRnBZYURCTFNFSnZZakkxYkV0VE5XaGtTRko1UzBOa2IyTnRWbTFLZVhkblNqTlNiR0pFYjI1SlEzTm5ZMGRvZG1KdFZYVmpiVlozWWtkR2FscFRaM1pYZVRGaldFaE5iMHRXTUhaYWVYZG5TbmxqY0V0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlJ6Rm9ZVmQzWjFCVFFXdFpWMlJzWW01UmRWcEhSakJaVTJkdVdWZGtiR0p1VVhSaVYwWndZa05qY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJhMXB1Vm5OaVF6VnRZVmMxYTB0RFkzVmhiazEwV1Zka2JHSnVVbnBNV0U1ellWZFNiR05zT1daYWJsWnpZa1k1Wm1KWFJuQmlRMEpvU25scmRXUkhWalJrUTJoMFdWZHNjMHRUTldoa1NGSjVTME5rYjJOdFZtMUtlWGRuU2pJeGFHRlhlREJpZW05dVNVTnpaMkpYUm5CaVEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Zwb1kybENNV050ZDJkUVUwRnJXVmRrYkdKdVVYVmFSMFl3V1ZObmJsbFhaR3hpYmxGMFpGaEtjMHA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERVbTFrVjNoelRHMWFjR0p0VVc5S2VUVnhZM2t4YUZveVZuVmtTRTEwWXpKNGNGcEhWbmxZTVRsdFpGZDRjMWd4T1RGamJYZG5XVk5qY0V4dFJqQmtTRWx2U2pKb2VWcFhXVzVNUTBJeFkyMTNjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmEwdERZM1ZoYmsxMFdWZGtiR0p1VW5wTVdFNXpZVmRTYkdOc09XWmtXRXB6U25scmRWbFlVakJqYVdkdVlVaEtiRnBwWTNOSlNGWjVZa05yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RtVm5oNVdFYzBaMGxEUVdkbVZuaDVXRWMxWTJOc2VIVkpRMEZuU1VkYU1XSnRUakJoVnpsMVNVZHNkV0ZZVWs1YVZ6VXhTME5yWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTFGdlNuazFjV041TVhSYVZ6VXhURmhTZGxveVpITmFXRWx1UzFNMWRtSnBaMjVaTW5od1dUSnpia3hEUW0xa1Z6VnFaRWRzZG1KcFFXOWFVMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSnNURzVDZVZwWVdteGlibEpGV2xkYWFHUlhlREJMUTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRnBvWTJsQ2IyTnRWbTFKUkRCblNrTm9NR0ZIYkhwTFV6Vm9aRWhTZVV0RFpHOWpiVlp0U25sck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5SYjBwNU5YRmplVEYwV2xjMU1VeFlVblphTW1SeldsaEtZbUZJU214YWFqRmpTV2xqWjB0NVFtOWpiVlp0U1VOelowb3hkMmxZVTJOd1RHNVNkbG95WkhOYVZVNXpXVmhPZWt0RFpHWlpWMDR3WVZoYWJFcDVhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOWhTRXBzV21scmRXUkhPVzVhTW5oc1VUSjRhR016VFc5S01UbG9XVE5TY0dSdFZXNUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1EyZHVURzF3ZWt4WE1XeGlibFYxV0RKR2FtUkhiREphVTJOd1RHMTRiR0p0WkRCaFEwRTVVRk5CZDBsRU9HZEtRMmR1VEcxd2VreFhNV3hpYmxWMFlqTmFiR050ZUdobFUyTndURzFvY0ZwSFZXOUxVMEUyU1VOUmIwcDVOWEZqZVRGMFdsYzFNVXhYT1RKYVdFcHpXVmhyYmt0VE5YcGhSemt6UzBOck4xaElTbU5pYVVGblNVTkJaMGxEUVdkbVUyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowcERaMjVNYlhCNlRGY3hiR0p1VlhSaU0xcHNZMjE0YUdWVFkzQk1iVGwxUzBOa2FtSkhiR3BoZVdOelNVZGFNV0p0VGpCaFZ6bDFTVU5vYkV0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEVVc5S2VUVnhZM2t4ZEZwWE5URk1XRkoyV2pKa2MxcFlTWE5KUXpWeFkza3hkRnBYTlRGS2VXdDFZMjFXZEdJeldteFJNbmhvWXpOTmIwb3hPV2haTTFKd1pHMVZia3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowcERhREJoUjJ4NlMxTTFiMkZYVW14TFEyeGpZMng0ZFVsRFFXZEpRMEZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRnJTME5qZFdGdVRYUmlWMVoxWkZNeGVscFhUblppYlZGMFpFYzVibG95ZUd4amFXTndURzA1ZFV0RFpHcGlSMnhxWVhsamMwbEhXakZpYlU0d1lWYzVkVWxEYUd4TFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjFWMVkwaEtiR1J0Vm5Wa1JWSnNXbTFHTVdKSVVXOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1EyZ3dZVWRzZWt0VE5UQmlNbVJ1WWtkV1JHSkhSbnBqZVdkdVdESkdhbVJIYkRKYVUyTndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSaVYxWjFaRk14ZWxwWFRuWmliVkZ1UzFNMU1HSXlaRzVpUjFaRVlrZEdlbU41WjI1WU1rWnFaRWRzTWxwVFkzQlBNWGg1V0VjMFowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjJaV2VIbFlSelZqWTJ4NGRVbERRV2RKUjFveFltMU9NR0ZYT1hWSlIyeDFZVmhTVGxsWVRuSkxRMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEVVc5S2VUVnhZM2t4ZEZsWVRuSllNVGt3V2xkM2JrdFROWEJpYmtJeFpFY3hhR015YzI5bE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRblJaV0U1eVQybEJia3Q2YTJkTFJHczFUMU5yWjA5VWF6Vk1WR3MxVEZSck5Vb3hlSGxZUnpSblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbEZiSFZqU0ZZd1lsZEdlbUY1Tld4bFNGSnNZbTFTUW1KSGJHaGpNbFo2UzBoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TakkxTVdKWFZubGhWMDF1VDJsQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtaGtXRkoyVmxjMWRGbFlUbkpQYVVJd1kyNVdiRXhHZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RqTW1oMlpEQXhhR015ZEZCaWEyaDJaRzFXZVU5cFFtMVpWM2g2V2xONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVNtaGFSMncwVlVjNWNHSnVVVFpKUm5kcFRFWjNhVXhHZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RhTTBwMlpGaENWRnBZUW1oamJVWXdZak5KTmtsR2QybEpSbmRwVEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwSGJHNWhXRko2VDJsQmQweEdlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpWM2h6WWpOa1RtRlhOVEZqZW05bldtMUdjMk15VlhOWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKb1pGaFNkbEl6U25aa1dFRTJTVWhTZVdSWFZYTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjVZVmRrYjJSRlJuTmhWMlIxVDJsQ2JWbFhlSHBhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoV2RXSlhSbnBoTUVaNlZHNVdkRmx0Vm5sUGFVSXdZMjVXYkZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJhMHREWTNWaGJrMTBZbGRHZW1FeE9XWmlibFowV2xoS2NGbDVZM0JNYld4MVkwaFdNR0pYUm5waGVXaGpTVzAxTVdKWFZubGhWMDVqU1dsck4xaElTbU5pYVVGblNVTkJaMGxEUVdkS1EyZHVURzF3ZWt4WE1XaGpNblJtV0RKT01XTnVTbXhpYlU0MVNubHJkV0ZYTlhka1dGSjBXVmhPY2t0R2QybGlibFowV2xoS2NGa3hkMmxNUTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRTR4V20xYWNHVkViMmRLT0V0bk1GbEVVbWM1UTNoTWFXUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRnJTME5qZFdGdVRYUmlWMFo2WVRFNVptTXpSakZaV0Vwc1NubHJkV0ZYTlhka1dGSjBXVmhPY2t0R2QybGlibFowV2xoS2NGa3hkMmxNUTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTRTR4V20xYWNHVkViMmRLT0V0bk1FeDZRM05wWkdOamJIaDFTVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVd0TFEyTjFZVzVOZEdKWFJucGhNVGxtWXpOR01WbFlTbXhZTWxwd1lraFNiR05wWTNCTWJXeDFZMGhXTUdKWFJucGhlV2hqU1cwMU1XSlhWbmxoVjA1alNXbDNaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VtUlhXbTFoV0djMlNVTm1RMjlPUXpoM2NrbHVURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBJeFltMHhhR015ZEVKak1EVXhZbGRLYkdOcWIyZGFiVVp6WXpKV1kyTnNlSFZKUTBGblNVTkJaMGxEUWpsTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQmEwdERZM1ZoYmsxMFlsZEdlbUV4T1daWk0xWjVZMjFXZFZremJHWmFiV3h6WkVkV2VVcDVhM1ZoVnpWM1pGaFNkRmxZVG5KTFJuZHBZbTVXZEZwWVNuQlpNWGRwVEVOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhPTVZwdFduQmxSRzluU2poTFp6QlpSRkpuT1VONFRHbGpjMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoV2RXSlhSbnBoTUVaNlZHNVdkRmx0Vm5sUGFVSnRXVmQ0ZWxwV2VIbFlSelJuU1VOQlowbERRV2RKU0RCd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFVXOUtlVFZ4WTNreGRGbFlUbkpZTVRsb1dqSlZia3RUTlhCaWJrSXhaRWN4YUdNeWMyOVlRMHAxWkZjeGJHTnRiR3BZUTBselNVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWXpOV2JWcHRiRFJQYVVGdWQzRkVVWFU1UXpFd1dVbHVXRWhLWTJKcFFXZEpRMEZuU1VOQloyWlRhemRZU0VwalltbEJaMGxEUVdkSlEwRm5Ta05uYmt4dGNIcE1WekZvWXpKMFpsZ3pRbXhqYlU1c1ltNVJia3RUTlhCaWJrSXhaRWN4YUdNeWMyOVlRMHAxWkZjeGJHTnRiR3BZUTBselNVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWXpOV2JWcHRiRFJQYVVGdVNsTmtZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJhMHREWTNWaGJrMTBZbGRHZW1FeE9XWlpNMVo1WTIxV2RWa3phM05KUXpWeFkza3hkRmxZVG5KWU1UbDZZMWhXYUdOdFZYTkpRelZ4WTNreGRGbFlUbkpZTVRsM1dsaEthbHBYTlRCS2VXdDFZakkwYjBveVNuTmtXRWx1VEVOQ2JXUlhOV3BrUjJ4MlltbEJiMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERPSFpKUnpWc1dsZFJaMXB0T1hsSlNFcHNZbGM1TWxwVFFucGtWMXB0WVZob1kyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjJGSVVqQmpTRTAyVEhrNWJtRllVbTlrVjBsMVdUSTVkRXd4U25aWmJXeDFVMGRXZVZsdE9UQmplVGxLWW01Q01XUkhNV2hqTW5OMllWaE9lbVJYVm5wTWVrVXhUbFJHWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpHMUdlVWxJV1dkUVUwRnJTMGhTYjJGWVRYQk1ibHBvWWtObmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DY0ZwcFFXOWthVUU1VUZOQmQwbEllRGhKU0ZsblVGUXdaMHA1WTNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTlJiMlJIYUhCamVXdDFaRzFHYzB0RFkyNUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkbVZuaDVXRWMwWjBsRFFXZEpRMEZuU1Vnd2NFOHhlSGxZUnpSblNVTkJaMlpXZUhsWVJ6VmpZMng0ZFVsRFFXZEpSMW94WW0xT01HRlhPWFZKUjJ4MVlWaFNVV0l6UWpGalEyZHdTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRakpaV0VsbllqTkNNR0ZYT1hWamVVRTVTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbldXMUdlbHBWVG5OWldFNTZUMmxCYmxnelFuWmpTRlozU25sNFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5XVmhXTUdJd1duWlpNMVo2VDJsQ2JWbFhlSHBhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZFpibEoxVmtoQ2MwOXBRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo2WWxkR2MySkZTakJpYW05blNucDRlbU5IUm5WSlIxSm9aRWRGZEZwdFJuVlpNMnhwWWpObmRGa3llSFpqTWxWbldUSjRhR016VFRsWVEwcHRXVmMxYW1WWFNuWmxRekZxWWtjNWVscFRNWHBpVjBaellrWjNhVkJxZUhwalIwWjFTVWRPYzFsWVRucFFWbmRwWWtkc2RXRXhkMmxRZEVOWU1FeEVVWFYwUjBFd1dYWlNaM1JIVFZCRE9YcGpSMFoxVUdwM2RtTXpRbWhpYWpSdVRFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1VEVaNGVWaEhOR2RKUTBGblNVTkJaMGxJTURkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU2tObmJreHRjSHBNV0VKMlkwaFdkMHA1YTNWaU1qUnZTakpPYzJGWFRuSktlWGRuV201V2RWa3pVbkJpTWpSblMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmEweHRXbWhpYlU0MVdXMDVORXh0VG5OaU0wNXNTME5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RtVTJ0MVdtMUdkVmt6YkdsaU0yZHZZak5DTUdGWE9YVmplV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMkZYV1dkTFNHUndZbTFTZG1SNU5YTmlNazVvWkVkc2RtSnBOVzlaV0U1dlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRV3RaTWpVd1NVUXdaMHBEYUROaFZ6VnJZak5qZFdKSE9XcFpXRkp3WWpJMGRXRkhSbnBoUTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VObmExa3lOVEJNYlhoc1ltMWtNR0ZEUVcxS2FVRnJXVEkxTUV4dGFHaGpNRTV6V1ZoT2VrdERaSGRpTTBJeFkwTXhhbUp1VVc1TFUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMHBETlcxWlZ6VnFaVmRLZG1WRE5YWmpSMVoxUzBOU2FtSnVVWE5KUnpsM1pFZHNkbUp1VFhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxZU0VwalltbEJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuWmxaNGVWaEhOV05qYkhoMVNVTkJaMGxIV2pGaWJVNHdZVmM1ZFVsSGJIVmhXRkpVV2xkNGJGa3pVVzlMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjB4NU9HZGpNbFp6V2xkT01FMXNlSGxZUnpSblNVTkJaMGxEUVdkSlExRjFXbTAwZFdNeVZuTmFWMDR3VFdrMWExcFhXbWhrVjNnd1kzazFlbHBZVVc5WVEwb3dZVWRXZEZwV2QybE1RMEpqU1cxT01XTXpVblppVm5kcFMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXdE1iVnAxVEc1T2JHSkhWbXBrUkVsMVdrZFdiVmxZVm5Oa1NFMTFZekpXTUV0R2QybGlWMngxWVZjeE1XSldTbXhqTTFaelpFaE9SMkl6U2xSYVYwWjVXVEpvWTBscGQyZFRWelZ0WVZjMWNHUklhM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5SYjBwNU5YRmplVEY2V2xkNGJGa3pVWGxLZVd0MVl6SldjMXBYVGpCTmFXZHdUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERVVzlrTW14MVdrYzVNMHRUTlhaaWFXZHVZMjFXZW1GWWNHeEtlWGRuV201V2RWa3pVbkJpTWpSblMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmEwdERZM1ZoYmsxMFl6SldjMXBYVGpCTmFXTndURzVPYkdKSFZtcGtSRWx2UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpsTFZIUmpZMng0ZFV4NU9HZEpRMEZuU1VOQlowbERVVzlLZVRWeFkza3hlbHBYZUd4Wk0xRjVTbmxyZFdNeVZuTmFWMDR3VFdsbmJtSXpRbXhpYVdOd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFVXOVlRMGwxWVc1TmRGbFhaR3hpYmxGMFl6SldhR050VG05WVEwbHdURzVPYkdKSFZtcGtSRWx2WlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXdZVWRXZEZwVWIyZEtNa1p1V2xjMU1HTjVZM05ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVpIQmFTRkp2VDJsQmJrMVVRWGRLVTJOeldFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSM2hvWW0xa01WbFhaR3hQYVVJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NHSnVRakZrUmxKMllqRk9iMkl6U2pCUGFVSnRaRmMxYW1SSGJIWmlhVUZ2V1ZOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVKalNYUkRaakJNTjFGMGRFTjNNRXgyVW1jNVF6VXdXVWhTWjNSRGQweERSRkZ6ZEVONU1FeFlVWFJPUXpRd1dVeFJkRk5DWTBscFFYSkpRMmhvVEcweGNHSnRiSFJrVnpCblRGTkNhRXh0YkhWalNGWXdURzE0YkdKdFpEQmhRMnRuUzNsQ1kwbHBSRkYxVGtNM01FeG5aekJNU0ZGMmRFTTNNRmw2VW1sT1F6RkpUa2RDTUV4cVVYWk9RM2t3VERkUmRUbERLekJNU21OSmJIaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5XVmR3YUdWRWIyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aRmhLYzA5cFFtTkpiV2d3WkVoQ2VrOXBPSFpaV0VKd1RHMHhOV0Z1VG5aaWFUVnFZakl3ZGxsdGJIVmplVGwyWVROc01tRldkMmxNUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV2tkR01GbFdValZqUjFVMlNVTmtjV015T1hWS2VYaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZFNiR0pIUmpWUGFVRjVUbFJCYzFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW10WldGSm9UMmxDYldSWE5XcGtSMngyWW1sQmIyTkhSbmxaVnpGNlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMVJ2WjJOSFJubFpWekY2VEc1U2JHTnRNSE5KUXpoMlNVaE9iRmxZU21waFEwSXdXbGhLZEZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFJtcGtSMngyWW1wdlowb3lSbTVhVnpVd1dETk9iRmxZU21waFEyUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpsUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElRbmxpTWs1c1l6Tk9VMXBZVGpGaVNGSjZUMmxDYldSWE5XcGtSMngyWW1sQmIxcEhSakJaVTJ0blpURjRlVmhITkhaTWVVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbldUSTVkV015T1hOYVV6VnpZakpqYjFwSFJqQlpVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtiVVo1U1VoS2JHTXpWbk5rU0UxblVGTkJhMHh0TVdoalEyaHJXVmhTYUV4RFFtMWtWelZxWkVkc2RtSnBRVzlrYlVaelpGZFZjMGxIZEd4bFUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFFMlNVZDBiR1ZUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhTYkdWSVVUWkpTRnBvWWtoV2JFeHVRbWhhTWxZd1lWaFNjMXBUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRHYmxwWE5UQlBhVUl5V1ZkNE1WcFdlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamxQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNSEJQTVhoNVdFYzBka3g1UVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RaTWpsMVl6STVjMXBUTlhOaU1tTnZZMjFXZW1SWGVEQmplV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RqYlZaNlpGZDRNR042YjJkamJWWjZaRmQ0TUdONWVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVUzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZE9hRmt5YUd4UGFVSXdZMjVXYkZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3djMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2JHSllRbk5aV0ZKc1ZXMVdlbVJYZURCUGFVSnRZak5LZEZsWVVsTmFXRTR4WWtoUmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhTYkdKWVFuTlpXRkpzVlRKV2MxcFhUakJoVnpsMVQybENiV0l6U25SWldGSlVXbGQ0YkZrelVuQmlNalJ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIxWjZXVEpHZDFwVk1XaGpiWFF4WTBSdloxcHVWblZaTTFKd1lqSTBaMHRITVdoamJYUXhZME5yWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSE1XaGpiWFF4WTBSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5abE4zWjB4NU9HZGlSMVl3U1VjNU1XTnBRbXBrV0U0d1lqSXdaMXB0T1hsaVYwWXdaRWRXZVVsSVpIWmpiWFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaVYyeDFZVmN4TVdKVmJIVmpTRll3VkVkV2RWb3pVbTlQYVVGNlRFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEowV1Zob2NHSllWblJWTWxaeldsZE9NR0ZYT1hWVVIxWjFXak5TYjA5cFFYaE1Sbmg1V0VjMFowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpSMW94WW0xT01HRlhPWFZKUjFwMlkyMHhhR1JHU214ak0xWnpaRU5vY0dSSFZuUkxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5vY0dSSFZuUk1iWGgyV1ZkU2NHSnRZM0JKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVGdU1Fd3ZVWFowUXpRd1dVaFJkWFZMUVhCcFl6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVTmpPRnBIYkRKSlIwNXpXVmhPZWxCV2QybGpNbFp6V2xkT01FMXBNWGxhV0U0eFlraFJkRmxYWkd4aWJsSmpTV28wT0dNelVubGlNalZ1VUdsalowc3hlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc01GcFhNSFZaVjJSc1ltNVJkV05IUm01YVdGSndaRWQ0YkVsRGMyZEtlbmQyWXpOU2VXSXlOVzVRYW5ocFkybzBia2xEYzJkaFdGSnNZbE0xYUZveVZuVmtRelV5V1ZkNE1WcFRRWEpKUTJNNFRESlNjR1JxTkc1UE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VneFkyTnNlSFZKUTBGblNVTkJaMGxEUW0xa1Z6VnFaRWRzZG1KcFFtMWlNMHAwV1ZoU1ZGcFhlR3haTTFKd1lqSTBiMkZZVW14aVUydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkaFdGSnNZbE0xYUZveVZuVmtRelYzV1Zka2JHUkhiREJpUjFVM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJaV2VIbFlSelJuU1VOQlowbERRV2RKUTFGdlNuazFjV041TVdoYU1sWjFaRU14ZWxwWFJubFpNbWR1UzFNMWRtSnBaMjVqTWxaeldsZE9NRTFxY0hwYVYzaHNXVE5SYmt4RFFtMWtWelZxWkVkc2RtSnBRVzlhVTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloxcEhSakJaVTBFNVNVZFZkV05IUm5sWlZ6RjZURzFTYUdSSFJUZFlTRXBqWW1rNGRrbERRV2RKUTBGblNVTkJaMGxEUVdkWk1qbDFZekk1YzFwVE5YTmlNbU52V2tkR01GbFRhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVpIQmliVkoyWkhrMWMySXlUbWhrUjJ4MlltbEJPVWxIVW1oa1IwVjFXVmRrYkdKdVVYVmtXRXB3V0VoS1kySnBRV2RKUTBGblNVTkJaMlpUYXpkWVNFcGpZbWxCWjBsRFFqbFlTRXBqWW14NGVWaEhOR2RKUTBGbldtNVdkVmt6VW5CaU1qUm5ZVmMxY0dSR1dtaGlSMnhyV1ZoU2JFdERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5SZFdSdFJuTmhWMUpvWkVjNWVVeHRSbXRhUlRGc1pFZG9kbHBEYUdOSmJrSnZZakkxYkZoRFNYTkpSMW94WW0xT01HRlhPWFZKUTJneVdWZDRNVnBUZDJkYVYzaHNZbGRXZFdSRGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjJSSGFIQmplVFYyWTBoU2NHSXlOV2hpUTJoc1lrZFdkRnBYTlRCTFUwSTRaa05CZGxoc2VHTkxNWGhqV2taNFkyTXhlR05MUm5oaldraHplbVpXZUdOTFZuaGpZekY0WTFwSWMzcG1VekZqV0VkU04wMXVNSFJZUm5oclpYcEtPVXBET0hWa1IxWjZaRU5vTWxsWGVERmFVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMlpUZDJkWVEwcFJZa2RXYUdNeVZXZGpNMEpzV1RKc2JXVlRRbWhKU0Zwb1lrZHNhMGxITVhaWmJXeHpXbE5DZFdSWE1XbGFXRXBqU1dsck4xaElTbU5pYVVGblNVTkJaMGxEUVdka2JVWjVTVWM1ZDJSSGJIWmliazFuVUZOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRXZVdOdE9YbFZSM2hvV1RKV2RGcFhOVEJQYVVKdFpGYzFhbVJIYkhaaWFVRnZXbGhLZVdJelNYTkpSMVp6V2xjeGJHSnVVWEJKU0hRNVRFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1WkZkNGJHTjZiMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTBkb2RtSnRWVFpKUm5kcFkwZG9kbUp0Vm1OSmJIaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxZU0VwalltbEJaMGxEUVdkSlEwRm5abFIwWTJOc2VIVkpRMEZuU1VOQlowbERRV3RMUTJOMVlXNU5kR1J0Um5OaFYxSm9aRWRWYmt0VE5XeFpWMDV2UzBkYU1XSnRUakJoVnpsMVNVTm5jRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowcERhREJoUjJ4NlMxTTFNbGxYZUhCYVIwWXdXbE5vZG1OSVVuQmlNalY2UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpsTFZIUmpZMng0ZFVsRFFXZEpTREZqWTJ4NGRWaElTbU5pYVVGblNVTkNiV1JYTldwa1IyeDJZbWxDY0dKdGJEQlZiVlpvWWtoU05WSnRiSE5rUjFaNVkzbG5jRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZyUzBOamRXRnVUWFJhYld4elpFZFdlV041TVhsYVYwWnpaRWhyZEdSSWJIZGFVMk53VEcwNWRVdERaR3BpUjJ4cVlYbGpjMGxIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1EyZHVURzF3ZWt4WFduQmlTRkpzWTI1TmRHTnRWbWhpU0ZJMVRGaFNjR1JIZUd4S2VXdDFaRWRXTkdSRFoydExTRkp2WVZoTmNFeHRVbWhrUjBWdlNqSmFjR0pJVW14amJrMTBaRWRzTUdKSFZXNUxVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMlpUYXpkWVNFcGpZbWxCWjBsRFFqbFlTRXBqWW14NGVWaEhOR2RKUTBGbldtNVdkVmt6VW5CaU1qUm5ZVmMxY0dSR1FtaGpNMDR6WWpOS2EwdERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWRzYlVsRFoydExRMk4xWVc1TmRHTkhSbnBqTTJSMlkyMVJia3RUTlhOYVZ6VnVaRWRuWjFCVU1EbEpSRUZ3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVlBNWGg1V0VjMFowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFYWk1lVUp2WkVoU2QyTjZiM1pNTW1Sd1pFZG9NVmxwTldwaU1qQjJXa2hLZG1OSFNuWmxRemsyWlVkT01sbHROV05qYkhoMVNVTkJaMGxEUVdkSlEwRnJURzFHY1ZsWVoyOWxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpGamJYYzJTVVozYVV4cE9YRmplVGx6WVZkS2Vrd3pjRFJaTTFwcFltazFjV014ZDJsTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbXRaV0ZKb1ZraHNkMXBVYjJkWVEwcDZXVE5LY0dOSVVtTkphWGhqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkWk1rWnFZVWRWTmtsSVVubGtWMVpqWTJ4NGRVbERRV2RKUTBGblNVTkNPVXRXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RNYlZKMlltMVZiMXB1Vm5WWk0xSndZakkwWjB0SVRtcGpiV3gzWkVOM1oyUkhWalJrUms0d1dWaFNNV041YTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIYkhWaFdGRnZTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTUhCWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGMVdtMUdjR0pEYUcxa1Z6VnFaRWRzZG1KcFFXOWhia1kwWVVoSmMwbElUbXhrU0ZKd1ltMWtla3hEUW14bFIwNXNZMGhTY0dJeU5IQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtcGlNalY2WWpKNGJFeHRlSFphZVdkdVVsaEtlV0l6U1dkaVJ6bG9Xa2RzZFZwNVFqWmxSMDR5V1cwMGJrdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTREJ3VHpGNGVWaEhOV05qYkhoMVNVTkJaMGxEUVdkSlEwSnRaRmMxYW1SSGJIWmlhVUp3WW0xc01FdERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXdExRMk4xWVc1TmRHTkhSbnBqTTJSMlkyMVJia3RUTlhaaWFXZHVZVEpXTldSWVFXNU1RMEp0WkZjMWFtUkhiSFppYVVGdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVGdlpFaHNkMXBYT1cxSlEyZzJaVWRPTWxsdE5IQkpSREE1VUZOQmJtUlhOV3RhVjFwd1ltMVdhMHA1YTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbXAwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0Zwb1kybENNbGxYZDJkUVUwRnJTMGhTYjJGWVRYQk1ibHBvWWtObmNFeHVVbmxoVnpCdlMxTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk50Vm5wSlJEQm5aVzVvYW1SdFNuVkxTRnBvWWtOcmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhUblZrUTBFNVNVTlJiMlJIYUhCamVXdDFZekpzYVdKSGJIVmFNMDF2U25rMWNHSnVRakZrUXpGdldsZDRkMHA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKcVltNVJkV050Vm5SaU0xcHNVVEo0YUdNelRXOUtNVGgzU1VZNGVFbEdPSGxKUmpoNlNVWTRNRXA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMlJ0Um5OTWJYaHNZbTFrTUdGRGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRuVmtRelZvV2tkU1JHSkhSbnBqZVdkdVdIbGpaMHQ1UW5sYVdFMTFZekpPZG1OdFZYQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5IWk1lVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW1waU1qVjZZako0YkV4dGVIWmFlV2g1V2xoTmRXTXlUblpqYlZWd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05uYmt4dGNIcE1XRUpvWXpOT00ySXpTbXRLZVd0MVlUSldOV1JZUVc5TFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ09WaElTbU5pYVVGblNVTkNPVmhJU21OaWJIaDVXRWMwWjBsRFFXZGFibFoxV1ROU2NHSXlOR2RoVnpWd1pFWktiR1J0Ykd4a00wNVVZa2RzYTFwWVNXOUxVMEkzV0VoS1kySnBRV2RKUTBGblNVTkJaMlJ0Um5sSlExSjZZa2RzYTFwWVNXZFFVMEZyUzBOamRXRnVUWFJqTW5od1drZFdlVXhZU214a2JXeHNaRE5OYmt0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGcll6SjRjRnBIVm5sTWJrNXpZVmRPY2t0SWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMXBIT1RCamVtOW5aRWhLTVZwVGVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMWxZU25saU0yUjZUMmxDYlZsWGVIcGFVM2hqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaFZ6VnRZVmMxY0dSSFZUWkpTRko1WkZkVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhPYzJGWFVteGpNVkoyVlRKb2RtUjZiMmROZVhoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGFiVGxxWkZoT1VHSnNUbXhpUjFacVpFUnZaMlJJU2pGYVUzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RaVjFKb1kwaFNjR1J0VmtsYVYyeHVZVWhSTmtsSVVubGtWMVZ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIxSjJaRWhPUkdKSFJucGplbTluU2pOT2MyRlhUbkpNVjFKMlpFaE5aMWd5U25CYWVXTnpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Vwc1l6TkNkbUp1VG5Ca2JWVTJTVVowWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhV050Vm1oaE0wSjJZVmMxTUU5cFFtaGpTRUpFWWpJMWJXRlhZM1ZaYmtwc1dWZDBkMkl5YkhWa1F6VnpXbmw0WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjZXbGhTTUdGWE5XNWplbTluWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VtSkhiR3RhV0U1VllqRk9iMkl6WXpaSlJFWmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpsWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJNVdFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSakZqWTJ4NGRVbERRV2RKUTBGblNVTkNPVXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEl5V1ZoSlowcEhTbkJhZVVFNVNVTlJiMHA1TlhsYVdGcHdXbGhrZWxneE9YTmhXRTR3VEd3NWFXRlhZMmRNYmtwc1pHMXNiR1F6VG1aWU1uaHdZek5TWmxneWJEQmFWekJ1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpKWldFbG5XVE5XZVdOdFZuVmtRMEU1U1VSQk4xaElTbU5pYVVGblNVTkJaMGxEUVdkaFYxbG5TME5TYVdGWFkzVmlSMVoxV2pOU2IwbERXVzFKUTFKNllrZHNhMXBZU1hWaVIxWjFXak5TYjB0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJVG14a1JVcHdXbmxuY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJhMk15ZUhCYVIxWjVXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkTWJUbDFTME5rYVZwWFduWmpiVlpFWVVkR2RWb3lWVzVNUTBKdFpGYzFhbVJIYkhaaWFVRnZXbGhhYkdKdVVYTkpTRTV6WVZkT2NreERRbXBrV0VwNVdsYzFNRlV5ZUhCYVIxVnpTVWMxYkdWSVVsUmlSMnhyV2xOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVGdldUTldlV050Vm5Wa1JrNXpZVmRTYkVsRFJUbEpSelZzWlVoU1ZHSkhiR3RhVTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkWk1uaHNXVmhLUTJGWFkyOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FtUllTbmxhVnpVd1NVUXdaMWt6Vm5samJWWjFaRVpPYzJGWFVteFBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSU1IQllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjB4dE9YVkxRMlJvV201U2JHTnJUbTlaVnpWdVdsTmpjMGxIV2pGaWJVNHdZVmM1ZFVsRGFHeGtiVloxWkVOM1oyTXllSEJaTW5OelNVZE9NV051U214aWJsSlVZa2RzYTFwVGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIxa3pWbmxqYlZaMVpFWk9jMkZYVW14SlEwVTVTVWRPTVdOdVNteGlibEZ3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0U1c1pFVktjRnA1WjNCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSTVXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVUyczNXRWhLWTJKcFFXZEpRMEZuU1VOQloyWldlSGxZUnpSblNVTkJaMGxEUVdkSlIxb3hZbTFPTUdGWE9YVkpSMDV6V2xkR2VWRnRiRzVMUTJ0blpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyV1cxc2JreHRXbWhhUjFaUVpGaFJiMHRUTld4aVdFSXdaVk5uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5DYldSWE5XcGtSMngyWW1sQ2VscFlVa05oVjJOdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIwcDVOWEZqZVRGNllrZHNhMXBZU1hSamJWWXlZVmRXTTJONVFYVmpNbmh3V1RKemRGa3pWbmxqYlZaMVpFTkJkV050VmpKaFYxWXpZekU1Wm1KSGJIcGtSamxtWVZoU2JHSldPV1poVnpWMVdsaEpia3RUTldwaVJ6bDFXbE5uY0V4dFJuZGpSMVoxV2taU2RrdERVbWxoVjJOd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZyV1cxc2JreHRXbWhhUjFaS1ltbG5jRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmExbHRiRzVNYmtKb1kyMVdkV1JEWjNCTWJVNTZZM2xuYm1GSFZuQmFNbWd3U25sM1owcEhTbkJhZVRWMlpGaFNiR05yYUd4aFYyUnZaRU5vTUdOdVZteExVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMlpXZUhsWVJ6Um5TVU5CWjJaV2VIbFlSelZqWTJ4NGRVbERRV2RKUjFveFltMU9NR0ZYT1hWSlIyeDFZVmhTVTFwWFJuTmtTR3R2UzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkaFZ6VndaRU5uY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTFGdldrYzVhbVJYTVd4aWJsRndURzA1ZFV0RFpIZGFSemwzV1Zka2JGZ3llSFpaVjFGdVRFTkNiV1JYTldwa1IyeDJZbWxCYjFwVGQyZFpNamwxV20xc2JreERRbmxhV0U1M1lqSTFlbHBUYTJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbkJpYld3d1MwTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1VMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMHBEYUd0aU1rNHhZbGRXZFdSRGEzVmlNalJ2U2pJeGVscFVTbVppUnpsb1drTmpjMGxIV2pGaWJVNHdZVmM1ZFVsRGFHeE1RMEpyV1ZoU2FFdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSGJIVmhXRkZ2UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpsTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ2JXUlhOV3BrUjJ4MlltbENjR0p0YkRCTFEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSamJWWm9Za2hTTlV4WGVIQmpNMUYwWXpKNGNGcEhWbmxYTWxKb1pFZEZkR0ZYTlhCa1JERmpTVzFhYUdKSVRteFlRMHBrU25scmRWcFhSbXBoUTJodFpGYzFhbVJIYkhaaWFVRnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpKWldFbG5Ta2hTZGxveVpITmFXRXA2U1VRd1owcERhREJoUjJ4NlMxTTFiV0ZYTld0TFEyTjFZVzVOZEdOdFZtaGlTRkkxVEZkNGNHTXpVWFJqTW5od1drZFdlVmd4T1hCaVYyTjBaRE5LYUdOSVFteGphV053VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJSdFJubEpRMUpxWWpOV2RXUkhWbmxKUkRCblNrTm9NR0ZIYkhwTFV6VnRZVmMxYTB0RFkzVmhiazEwWTIxV2FHSklValZNVjNod1l6TlJkR015ZUhCYVIxWjVXREU1YW1JelZuVmtSMVo1U25sck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXdGtSemx1V2pKNGJHTnVUWFZhVjBacVlVTm9iV1JYTldwa1IyeDJZbWxCYjJGVGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOWtSMmh3WTNscmRXSXlORzlLTWpGMlpGaE9iR0l6V214amFXTnpTVWRhTVdKdFRqQmhWemwxU1VObmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RLU0ZKMldqSmtjMXBZU25wTWJrcHNZbGM1TWxwVlRuTlpXRTU2UzBOa1psbFhUakJoV0Zwc1NubHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVVc5a1IyaHdZM2xyZFZsWFVtdFJNbmhvWXpOTmIwb3hPV2haTTFKd1pHMVZia3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkS1IwNTJaRmMxTUZwWVNYVmtSMVkwWkVOb2NFbERjMmROVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUZ2WkVkb2NHTjVhM1ZhUjBZd1dWTm5ibUZYTlhCa1EyTnpTVU5rTUdOdVZteEtlV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbElNV05qYkhoMVNVTkJaMGxJTVdOamJIaDFXRWhLWTJKcFFXZEpRMEp0WkZjMWFtUkhiSFppYVVKd1ltMXNNRlZ0Um5WYU1sVnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RLUTJkdVRHMXdla3hZU21oaWJXUnNTbmxyZFZwWFJtcGhRMmh0WkZjMWFtUkhiSFppYVVGdllWYzFhMXBZWjNOSlIxWnpXbGN3Y0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlNFNXpZVmRTYkdOcFFUbEpRMUZ2V2xkNGJHSlRhM1ZhYld4MVdrTm5ia3h0Y0hwTVdFcG9ZbTFrYkZneE9UQlpXRXB1V2xoUmJrdFdjM2RZVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RoVnpWM1pGaFNla2xFTUdkS1EyaHNZa2RXZEV0VE5XMWhWelZyUzBOa2NHSnVRakZrUTJOd1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjFwNVlqSXdaMUJUUVd0aFZ6VjNaRmhTZWt4dFduQmpiazR3UzBOc1lrMUdNSE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyUkhPR2RRVTBGcllWYzFkMlJZVW5wTWJYaG9Zek5SYjB0V2MzZFlWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaFYxbG5TMGhPYzJGWFVteGphVUZ0U21sQ2JXTnRPWFJKUTFsdFNVaFNka3RUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeVdWaEpaMkpYYkhWSlJEQm5ZMGRHZVdNeVZrcGlibEZ2V201S2RtSlROVEpaVjNneFdsTnJaMlpJZDJkTlEzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZbGRHTkVsRU1HZGpSMFo1WXpKV1NtSnVVVzlrUnpoMVpHMUdjMlJYVlhCSlNIZzRTVVJCTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5WaU1WWndWVEo0Y0ZwSFZubE1iVTU1V2xkR01GcFRhSHBpUjJ4cldsaEpjMGxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNlbVJIUm5sa1JHOW5WekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZEdGWE5ITllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSekZvWlVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSakJ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNamwxWW0xV2FtUkViMmRrU0VveFdsTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKNVdWYzFibHBVYjJkbE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRnVZbGRzZFVwNmIyZGlWMngxVEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmJtSlhSalJLZW05bllsZEdORmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyWlRhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloyTXlOV2hqUmxwb1lraFdiR041UVRsSlJuUnRZMjA1ZEV4RFFqQmlNVEEzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZW1KSGJHdGFXRWwxWW0wNVZtRldUbk5oVjFKc1kyazFkbUpwWjI1a1dFSnJXVmhTYkVwNWQyZGFibFoxV1ROU2NHSXlOR2RMU0Zwb1lraFdiR041ZDJkaFIwWjFXa2Q0YkV0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJNeU5XaGpSbHBvWWtoV2JHTXhkRzlaVnpWcllrZFdaRXh1V21oaVNGWnNTVVF3WjFSWFJqQmhRelY1WWpOV2RWcERhREpaVjNneFdsaE9ZbUZIUm5WYVIzaHNXRk5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUWpsTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZGFlV0l5TUhWWlYxSnJVbGhhYkdKdVVrMWhXRTR3V2xjMWJHTnBaMjVaTW1ob1ltMWtiRXA1ZDJkYWJsWjFXVE5TY0dJeU5HZExRMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRTV6WVZkU2JHTnBOWFZpTVZad1ZUSjRjRnBIVm5sTWJrNXNaRU5vWW1SSGFIQmplVFV5V1ZkNE1WcFRkMmRpYmxaellrWXdjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ01HSjVOV2hhUjFKR1pHMVdkV1JGZUhCak0xSnNZbTFXZVV0RFpHcGhSMFoxV2pKVmJreERRbTFrVnpWcVpFZHNkbUpwUVc5TFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkak1uaHdXa2RXZVV4dE5YWldWMnhVWWtkc2ExcFlTWFZqTWxZd1MwWjBkV1JYZUhOTVEwSXdZVWRzZWt4dVdtaGlTRlpzV0ZOck4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRFoydExSMVp6V2xjd2NFeHRhR2hqTUU1eldWaE9la3REWkhGamVURnFZVWRXZW1ONU1YbFpWelZ1V2xOamNFdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTXllSEJhUjFaNVRHMDFkbFpYYkZSaVIyeHJXbGhKZFdJeU5HOUtNbFoxV2tOamMwbEhXakZpYlU0d1lWYzVkVWxEYURKWlYzZ3hXbGhOYzBsSGFHaGliVkp6V2xOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RMUTJSaVltMUdkRnBVTVdOSmJrSjVZVmRPYkZneU1XaGxSbmRwV0ZOamNFeHVVbmxoVjJSdVdsaEpiMG95VG05WlZ6VnVXbE5qY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd3Y0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVZuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRamxZU0VwalltbEJaMGxEUVdkSlEwRm5abE5yTjFoSVNtTmliSGg1V0VjMFowbERRV2RKUTBGblNVTlJiMHA1TlhGamVURjNZVmRPY2xwWVNXNUxVelZzV1ZkT2IwdEhXakZpYlU0d1lWYzVkVWxEYUhCaWJWSnNaVU4zWjFwWGVHeGlVMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXlXVmhKWjJNeWVIQmFSMVo1U1VRd1owcERhR3hpUjFaMFMxTTFiV0ZYTld0TFEyTjFZVzVOZEdOSGJHcGhNbFo1V0RFNU1GbFlTbTVhV0ZGdVMxWnpkMWhUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNjR0p1UWpGa1EwRTVTVU5SYjFwWGVHeGlVMnQxV20xc2RWcERaMjVNYlhCNlRGaENjRmt5ZEd4amJEbG1ZVmMxZDJSWVVXNUxWbk4zV0ZSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmRaWjB0SVRuTmhWMUpzWTJsQmJVcHBRbkJpYmtJeFpFTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RrYlVaNVNVY3hjR0pwUVRsSlNFSm9ZMjVPYkZOWE5UQkxSMngxWTBoV01FeHRaR3hrUlVZd1pFaEtjRmx1VmpCYVUyZHVZbGRzZFVwNWEzQkpTSGc0U1VSQmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhNV2hsUTBFNVNVaENhR051VG14VFZ6VXdTMGRzZFdOSVZqQk1iV1JzWkVWR01HUklTbkJaYmxZd1dsTm5ibUpYUmpSS2VXdHdTVWg0T0VsRVFYTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRnBvWWtOQk9VbElRbWhqYms1c1UxYzFNRXRIYkhWalNGWXdURzVhYUdKSVZteExVMEk0WmtOQ2RHRlhORGRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEoxWWpGV2NGVXllSEJhUjFaNVRHMU9lVnBYUmpCYVUyaDZZa2RzYTFwWVNYTkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGtSMFo1WkVSdloyUnRSbk5NUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhUblppYlRWc1dUTlJOa2xHZERCamJsWnNURU5DYlZsWGVIcGFWakJ6V0VoS1kySnBPSFpKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp0WWpOS2RGbFlVVFpKU0hSalkyeDRkVXg1T0dkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNNR0o2YjJkYWJsWjFXVE5TY0dJeU5HZExTRnBvWWtoV2JFdFRRamRZU0VwalltazRka2xEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDZDFsWVNucGFWV3gxWkVOb01sbFhlREZhVTJzM1dFaEtZMkpwT0haSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpUZUdOamJIaDFUSGs0WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSnRZMjA1ZEU5cFFtMWtWelZxWkVkc2RtSnBRVzlrYlVaelpGZFZjRWxJZEdOamJIaDFUSGs0WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VoYWFHSklWbXhQTVhoNVdFYzBka3g1UVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWTWVUaG5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3djMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkyMUdkVm95VlRaSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Takl4Y0dKcFl6WkpSekZ3WW1sNFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowb3lNV2hsUTJNMlNVY3hhR1ZHZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNSEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWXpKNGNGcEhWbmxNYlRWMlZsZHNWR0pIYkd0YVdFbDFZakkwYjBvelZuZGFSMFl3V2xOamMwbEhXakZpYlU0d1lWYzVkVWxEWjNCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5CaWJrSXhaRU0xTWxsWGVERmFVMEU1U1VoT2MyRlhVbXhqYVRWMVlqRldjRlV5ZUhCYVIxWjVURzFrYkdSRFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOWFWM2hzWWxOcmRWcHRiSFZhUTJkdVRHMXdla3hZUW5CWk1uUnNZMnc1Wm1GWE5YZGtXRkZ1UzFNMU1HTnRiRzVhTWxaNVMwTmthbUZIUm5WYU1sVnVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSXlXVmhKWjJKWFJucGhlVUU1U1Vkc2RXTklWakJNYld4MVkwaFdNR0pYUm5waGVuUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZZbGRHZW1GNVFXMUthVUp3WW01Q01XUkROV3BpUjBaNll6QjRjR016VVhWWk1qbDFaRWRHY0dKdVRXOUtNbkI2VEZjeGFHTXlkR1pZTWtadVdsTmpjRXRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNGcG9ZMmxDZW1SWFdtMWhXR2RuVUZOQ2JscFlVazlrVnpGR1ltMVNjR0p0WTI5alIwWjVZekpXU21KdVVXOWpNbmh3V2tkV2VVeHROWFpXVjJ4VVlrZHNhMXBZU1hWYU1sWXdTME5yY0V4RFFtSktPRXRuTUV4UVVYWjBRekJLZVhkblNqaExaekJNVUZGMmRFTXdNRXhCYmt4RFFXNTNjVVJSZFRsRE1UQlpTVzVZVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVY3hhR015YzNWaU0wSXdZVmM1ZFV0SWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoT01WcHRXbkJsUkc5bll6TldiVnB0YkRSWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RoVnpWM1pGaFJkVmxYVW10U1dGcHNZbTVTVFdGWVRqQmFWelZzWTJsbmJsa3lhR2hpYldSc1NubDNaMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVRuTmhWMUpzWTJrMWRXSXhWbkJWTW5od1drZFdlVXh1VG14a1EyZ3dZVWRzZWt4dVdtaGlTRlpzUzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSU1IQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsWVNFcGpZbWxCWjBsRFFXZEpRMEZuWmxOck4xaElTbU5pYVVGblNVTkNPVmhJU21OaWJIaDVXRWMwWjBsRFFXZGFibFoxV1ROU2NHSXlOR2RoVnpWd1pFVmthR0pIZUd4amJtdHZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RLUTJkdVRHMXdla3hYWkdoaVIzaHNZMjVyZEdKdFJqSktlV3QxWXpKNGNGa3ljMjlsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFtdGlNMUo2VDJsQ2JWbFhlSHBhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZFpXRXA1WWpOa2VrOXBRakJqYmxac1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3WW0xYWNHSnRiREJhVkc5bldtMUdjMk15VlhOWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElUbk5oVjFKc1l6RlNkbFV5YUhaa2VtOW5UbWw0WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbll6SjRjRnBIVm5wV1J6bFVXVE5LZG1KSGR6WkpSRVZ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIxcDJXVE5XZWxReU5WUmFWM2hzV1ROUk5rbElVbmxrVjFWeldFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMFo2VkcxR01sSnRPWGxQYVVGdVRHMXdla3hYWkdoaVIzaHNZMjVzWmxnelRuTmhWMUpzWTJsamMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdNelFuWmliazV3WkcxVk5rbEdkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVROQ2RtRlhOVEJQYVVKb1kwaENSR0l5TlcxaFYyTjFXVzVLYkZsWGRIZGlNbXgxWkVNMWRGcERlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VscFlVakJoVnpWdVkzcHZaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5waVIyeHJXbGhPVldJeFRtOWlNMk0yU1VST1kyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVWXdjMWhJU21OaWFVRm5TVU5CWjBsRFFXZG1VMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMHBEWjI1TWJYQjZURmRrYUdKSGVHeGpibXR1UzFNMWJGbFhUbTlMUjFveFltMU9NR0ZYT1hWSlEyaHdURU5DYkdKRGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpKWldFbG5Ta2hPYzJGWFVteGphVUU1U1VOUmIxcFhkM0JNYlZwd1ltMVJiMHA1TlhGamVURnVXVmQ0YzFwWVNqVllNVGw2WWtkc2ExcFlTVzVMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtiVVo1U1VOU2FtUllTbmxhVnpVd1NVUXdaMHBEYUd4aVEydDFXbTFzZFZwRFoyNU1iWEI2VEZka2FHSkhlR3hqYm14bVdESk9NV051U214aWJsRnVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNraE9jMkZYVW14amFUVjZZa2RzYW1GNWFEZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSnJZak5TZWs5cFFtMVpWM2g2V2xONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFJubGpiVGt6WTNwdloyUklTakZhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vkc2RWcHRiSFZoV0ZKc1QybENNR051Vm14TVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGbll6TmtjR05IVmxWaU1VNXpZVmRTYkU5cFFqQmpibFpzVEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjFsWVRrOVpXRnBIWWpOSk5rbERZM1ZoYmsxMFdqSkdjMkpIVm5sbFV6RjFXVmhaYmt4R2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkamJWWjZZMGM1ZFdNeWJESmFWRzluVnpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV1c1S2JGbFhkSGRpTW14MVpFUnZaMWxZUW5kUk1qbDFXbTFzYmt4dFNubGFWMFp5WTBjNWNHSnVVWFZpVjFGeldFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaE9iR1JJVW5CaWJXUjZUMmxDTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpvWTI1S2RtUXpUVFpKUjFwb1lraE9iRmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNPVmhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbVJNUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1NFNXpZVmRTYkdOcE5YWmlhV2R1V1ZkYU1GcFlTa1JoUjBaMVdqSlZia3hEUW0xa1Z6VnFaRWRzZG1KcFFXOWFXRnBzWW01UmMwbElUbk5oVjA1eVRFTkNhbVJZU25sYVZ6VXdWVEo0Y0ZwSFZYQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TYW1SWVNubGFWelV3VEc1U2JHVklVVzlMZVhScVpGaEtlVnBYTlRCVk1uaHdXa2RWY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkNPVXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUnRSbmxKUTFKellWYzFjbU41UVRsSlExSjZZa2RzYTFwWVNYVmFiV3gxV2tObmJreHVUbk5oVjFKc1QyMDFkbVJEWjNWak1uaHdXVEp6ZEZreWVIWmliVlpyUzFOamNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CYTB0SFZuTkxVelZ0WVZjMWEwdERZM1ZoYmsxMFdqSkdjMkpIVm5sbFZqbG1aRWM1TUZsWGQyNUxVelV3V2xob01FdERVbk5oVnpWeVkzazFjMXBYTlc1a1IyZHdUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGcllrZHNkV0V6VFhWaU1qUnZTakpPYzJGWFRuSktlWGRuV201V2RWa3pVbkJpTWpSdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RNYlZwb1ltMU9OVmx0T1RSTWJUbDNXbGMwYjBsRFVuTmhWelZ5WTNsM1oyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkNGRtSXpRVFpKU0ZKNVpGZFdZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNSE5KUTFKellWYzFjbU41TlhCaWJWSnNaVU5uWjJSSGFIQmplVUZ3U1VOck4xaElTbU5pYkhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUjFwb1lraE9iRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ09VdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwSTVTMVIwWTJOc2VIVkpRMEZuU1VneFkyTnNlSFZZU0VwalltbEJaMGxEUVhaTGFYQmpZMng0ZFVsRFFXZEpRMEZ4U1U1RGF6QlpVRkYyWkVNMk1GbGlVWFZPUjFCSlRrTjVNRXczVVhRNVEza3dXVVJSYzA1SFNqQk1SRkYwWkVkRFNVNURLekJNY2xGMmRFTTVNRmxtVVhOT1F6a3dUR3BSZEZORVVYUk9RemN3V1Robk1FeDZVWFprUXlzd1RHSlJkR1JIUWpCWlRGRnpkRU14TUV3elVYWmtReXN3VEZCUmRtbEVVbWc1UXpRd1dVaFJkVGxEZDBsT1IwSXdUSFpSZG5SRGVUQk1RV2N3VEROUmMwTkVVWFowUjBJd1RETlJkblJEZVRCTVJGRjJaRU0wTUV4blp6QlpabEYxVGtkQ01FeDJVWE5EUkZGMVEwUlJkazVEZHpCWlNGSm5aRU0wTUV4TVVYTkRSRkYyZEVNMk1FdzNVWFprUjBnd1RFUlJkbVJETkRCTWJHTmpiSGgxU1VOQlowbERRWEZKU0VKb1kyMUdkRWxEUW5CVWJsWjBXVzFXZVVsRmJIVmtSMVp1V2xoSlp6QkxabEYxVGtkQ01FeDJVWFpwUkZGMlpFTjNTVTVES3pCWlNGRjJaRU1yTUV4TVVYUlRSRkYxZEVNck1GbE1VWFowUjBFd1REZFJjemxESzBsT1F6a3dXVkJSZEhSRE9UQk1OR2N3V1VoU2FFNURLekJaUkZGMlRrTTBNRmxFVVhaMFEza3dURVJTWjNSSFRVbE9ReXN3VEhKUmRuUkRPVEJaWmxGelRrTTVNRXhxVVhSV2VIbFlSelJuU1VOQlowbERiMmRqUjBaNVdWY3daMGxIUmtaaWJWSndZbTFrZWtsRlJubGpiVVkxU1U1RFl6Qk1SRkpuWkVkQ01FeHFVWE5wUkZKblpFTTNNRXczVVhOcFJGRjFUa00zTUV4blp6Qk1OMUYxZEVNck1Fd3pVbWc1UTNjd1RETlJkVTVETlVsT1F6QXdUSFpTYW5sRVVtZzVRelF3V1VoUmRHUkROMGxEWjNoTVEwRXdURU5CTVV0VGVHTmpiSGgxU1VOQlowbERRWEZKUTBGblNVTkJaMGxEUVdjd1RETlJjMDVETHpCWlJGRjFUa000TUV4WVVtZERRbUpLT1VkUU1FeElVWFU1UXlzd1RISlJkbWxqYzBsRFpsSnFPVU40TUV4MlVYWjBRell3VEVGdVRFTkJiakJaTDFGelpFTTNNRXczVVhWcFpHUllTRXBqWW1sQlowbERRV2RMYVVKNVdsaFNNV050TkdkVk0xSjVZVmMxYmxoSVNtTmlhVUZuU1VOQlowdHBRbU5qYkhoMVNVTkJaMGxEUVhGSlIyZ3daRWhDZWs5cE9IWmhSMFpwWTIxR2IxbFhTbmxNYmtveFRETkNkbU16VVhaTlZFRXhUa1JKTkV3eGVIbFlSelJuU1VOQlowbERiM1pZU0VwalltbEJaMGxEUW0xa1Z6VnFaRWRzZG1KcFFtNWFXRkpQWkZjeFJtSnRVbkJpYldOdllWVTFNV0pYU214amFYZG5XVlZXZFZwSGJIVmFNMDF3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUWpKWldFbG5ZekJXZFZwSGJIVmFlWGRuWVZSMFkyTnNlSFZKUTBGblNVTkJaMGxEUW5CVWJsWjBXVzFXZVVsRU1HZGhWVFV4WWxkS2JHTnBRV3hKUkVWM1RVUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFuQmFhVUZ2WVZVMU1XSlhTbXhqYVVFclVGTkJlRTFUUVcxS2FVSndWRzVXZEZsdFZubEpSSGM1U1VSRk5VdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVRrWmliVkp3WW0xaloxQlRRbWhTVnpWcllWYzFibU14YzNsWVZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQ09VbEhWbk5qTWxWblpURjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3U1VRd1oyRlZOVEZpVjBwc1kybEJiRWxFUlhkUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRbnBrTW13d1dUSm5aMHRIYTNCWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDVvWXpKVlowdEVSWEJQYkhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElUa1ppYlZKd1ltMWpaMUJUUW1oU1Z6VnJZVmMxYm1NeGMzZFlWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVhwMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRtaGpNbFZuUzBSSmNFOXNlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNa1o2V2xOQmIwMTVhelpZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxV1ZoT2JFbERaekJMVkhCalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbnBTVnpWcllWYzFia2xFTUdkWlZWWjFXa2RzZFZvelRtSk5WakEzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpia3BzV1Zkek4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtdGFWMXBvWkZkNE1FOXNlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoT1JtSnRVbkJpYldOblVGTkNhRkpYTld0aFZ6VnVZekZ6ZVZoVWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhsWVJ6Um5TVU5CWjBsRFFXZEpTREZqWTJ4NGRVbERRV2RKUTBGblNVTkNlVnBZVWpGamJUUm5ZekJXZFZwSGJIVmFlblJqWTJ4NGRVbERRV2RKU0RGalkyeDRkVmhJU21OaWFVRm5TVU5DYldSWE5XcGtSMngyWW1sQ2NHSnRiREJUU0d4M1lqTlNiMXBYVFc5TFUwSTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowcERaMjVNYlhCNlRGZG9OV05IT1RCaFIxWnFTbmxyZFZwWFJtcGhRMmh0WkZjMWFtUkhiSFppYVVGdlMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRV3RaTWpsNlpFTkJPVWxEVVc5a1IyaHdZM2xyZFZwdGJIVmFRMmR1VEcxd2VreFhhRFZqUnprd1lVZFdhbGd4T1dwaU0wNHdTbmxyYzFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEk1ZW1SRFFUbEpRMUpxWWpOT01FeHVXbWhpUTJkd1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTFKM1dWaHNkRnBYTlRCVlIxWjVXVEpXZFdSRFFUbEpRMUZ2WkVkb2NHTjVhM1ZhYld4MVdrTm5ia3h0Y0hwTVYyZzFZMGM1TUdGSFZtcFlNVGwzV1Zoc2RGcFhOVEJNV0VKc1kyMU9iR0p1VVc1TFUzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVd0alIwWTFZbGRXZFdSR1RqRmlVMEU1U1VOUmIyUkhhSEJqZVd0MVdtMXNkVnBEWjI1TWJYQjZURmRvTldOSE9UQmhSMVpxV0RFNWQxbFliSFJhVnpVd1RGaE9NV0pUWTNCTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVW5kWldHeDBXbGMxTUZVelZuUlZSMnhxWVRKV2VVbEVNR2RLUTJnd1lVZHNla3RUTlcxaFZ6VnJTME5qZFdGdVRYUmpSMnhxWVRKV2VWZ3hPVEJaV0VwdVdsaFJia3RXYzNkWVUzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVd0WlYyUnNTVVF3WjBwRGFEQmhSMng2UzFNMWJXRlhOV3RMUTJOMVlXNU5kR0ZJYkhkaU0xSnZXbGRPWmxneVJtNWFVMk53VEVaNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUpxWTIxV2EyRllVV2RRVTBGclMwaFNiMkZZVFhCTWJWcHdZbTFSYjBwNU5YRmplVEZ2WlZoQ2RtUkhhR3haTVRsbVdUTktiRnBIYkRCS2VXdHpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkS1NFNXpZVmRTYkdOcFFUbEpRMUZ2WkVkb2NHTjVhM1ZhYld4MVdrTm5ia3h0Y0hwTVYyZzFZMGM1TUdGSFZtcFlNVGw2WWtkc2ExcFlTVzVMVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RoV0ZKc1lsaE5aMUJUUVd0TFNGSnZZVmhOY0V4dFduQmliVkZ2U25rMWNXTjVNVzlsV0VKMlpFZG9iRmt4T1daaFdGSnNZbE5qY0V4R2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TZWxrelNuWmlSM2RuVUZOQmEwdElVbTloV0Uxd1RHMWFjR0p0VVc5S2VUVnhZM2t4YjJWWVFuWmtSMmhzV1RFNVptTXlUbmxpTW5oelNubHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRbmxaV0ZKc1NVUXdaMWN4TURkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERVbkJrUjFaMFkzazFiRmxYVG05TFIxb3hZbTFPTUdGWE9YVkpRMmR3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVNtaGtSMVYxWTBoV2VtRkRhSGRaV0VwNldsVmFjMkl5UmpCTFExRnZaRWRvY0dONWEzVmFiV3gxV2tObmJreHRjSHBNVjJnMVkwYzVNR0ZIVm1wWU1UbDVXVmhTYkVwNWEzVmtSMVkwWkVObmNFeHVTbXhqUjNob1dUSlZiMWhEU1hOWVEwbHpTVVozYVV4c2QybExVMnRuWmtoM1owMURhemRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSU1IQlBNWGg1V0VjMGRreDVRV2RKUTBGblNVTkJaMGxEUVdkSlIwNTJZbTVPZG1KSFZYVmlSemx1UzBoS2FHUkhWWEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqSlpXRWxuWTIxR01GcFZNVVpKUkRCblZ6RXdOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOU2NHUkhWblJqZVRWc1dWZE9iMHRIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhLYUdSSFZrNVNVelYzWkZoT2IwdElRbWhqYms1c1VtMTRkbGxZVVc5S1EyZ3dZVWRzZWt0VE5XMWhWelZyUzBOamRXRnVUWFJoU0d4M1lqTlNiMXBYVG1aWU0wcG9aRWRXVGxKVFkzQk1ibEpzWlVoUmIwdFROWGxhV0VKeldWZE9iRXRHZDJsTVJuZHBURU5DWTBscE5XTkphV3R3U1VoNE9FbEVRWEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVeDVPR2RKUTBGblNVTkJaMGxEUVdkSlEwSnFZakkxZW1JeWVHeE1iWGgyV25sb2VWbFlVbXhVVlZWd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloxa3pTbXhhUjJ3d1NVUXdaMDFFZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyUnRSbmxKUjBadVdsTkJPVWxEVW1oYU1sVjFaRzFHYzB0RGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJV21oamFVSjNXbGhLYWxwWE5UQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVd0Wk1qbDZaRU0xY0dKdVFqRmtSekZvWXpKemIxaERTblZrVnpGc1kyMXNhbGhEU1hOSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaE9NVnB0V25CbFJHOW5TamhMWnpCWlJGSm5PVU40VEdsamMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuWmliVTUyWWxoQ2MxcFlVbXhQYVVKdFpGYzFhbVJIYkhaaWFVRnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEk1ZW1SRFFUbEpRMUZ2WkVkb2NHTjVhM1ZrYlVaelMwTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNraENhR1ZYTVd4aWJsSlVaRmN3ZFdOSVNuWmpRMmR1WWxkR05FcDVkMmRaTWpsNlpFTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNraENhR1ZYTVd4aWJsSlVaRmN4VVdGWFRuSmFXRWwxWW0wNVZtRldUbk5oVjFKc1kyazFNV05IVW1oa1IxWlFZMGhTY0dJeU5YcExTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxR2RWb3lWVFpKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEWkhSaFZ6UnVUMmxCZDB4R2VIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2pJeGFHVkRZelpKUjA1Mll6TlNZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlpXZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTlNkMWxZYkhSYVZ6VXdWVE5XZEV4dVVubGhWMlJ1V2xoSmIwb3lUbTlaVnpWdVdsTmpjRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RtVm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkS1NFSm9aVmN4YkdKdVVsUmtWekIxWWpJMGIwb3lUbTlaVnpWdVdsTmpjMGxIV2pGaWJVNHdZVmM1ZFVsRFozQkpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhDYkdOdFRteGlibEZuVUZOQmEwdElVbTloV0Uxd1RHNWFhR0pEWjNCSlEyOW5UVlJCZDBsRE9HZFpNamw2WkVSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSGJHMUpRMmgzV2xoS2FscFhOVEJKUkRSblRWUkJkMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk5IVm5sWk1sWjFaRU5CT1VsRVJYZE5SSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXdExTRkp2WVZoTmNFeHVXbWhpUTJocVlqTk9NRXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VkT2VWcFhVbkJrUTBFNVNVZE9hR0pIVGtSamJWWnJZVmhSYjFreU9YcGtRM2RuWTBkV2VWa3lWblZrUTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmEyTkhSalZpVjFaMVpFWkNiR050VG14aWJsRjFaRzFHYzB0SVFteGpiVTVzWW01UmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtSMDU1V2xkU2NHUkROVEpaVjNkdldUTktiRnBIYkRCTFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTlNjR1JIVm5SamVUVnNXVmRPYjB0SFdqRmliVTR3WVZjNWRVbERhSEJNUTBKc1lrTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTlJiMXBYZDNCTWJWcHdZbTFSYjBwNU5YRmplVEZ2WlZoQ2RtUkhhR3haTVRsbVdtMXNlV016VVc1TFV6VXdXbGhvTUV0SFduWmpiVEZvWkVaQ2VXRlhUbXhMUTFKM1dWaHNkRnBYTlRCVk0xWjBURzVhYUdKRFozQkxVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEtRMmhzWWtOcmRWcHRiSFZhUTJkdVRHMXdla3hYYURWalJ6a3dZVWRXYWxneE9YZGFXRXAwWWpJMU1HRkRZM0JNYmxKc1pVaFJiMXB0T1hsaVYwWXdWVWhLY0ZreVZXOVpNa1p6V1RGQ2JHTnJNWFppYmxKdlMwZE9lVnBYVW5Ca1EzZG5ZMjFHTUZwV2RIQllVM2RuV1Zka2JFdFRhM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERVVzlhVjNkd1RHMWFjR0p0VVc5S2VUVnhZM2t4YjJWWVFuWmtSMmhzV1RFNVptTkhWbmxpVnpsMVpFZG9UbEpUWTNCTWJsSnNaVWhSYjFwdE9YbGlWMFl3VlVoS2NGa3lWVzlaTWtaeldURkNiR05yTVhaaWJsSnZTMGRPZVZwWFVuQmtRM2RuWTIxR01GcFZNVVpYTW14a1RFTkNhRm95VlhCTFUyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkS1EyaHNZa05yZFZwdGJIVmFRMmR1VEcxd2VreFhhRFZqUnprd1lVZFdhbGd4T1d4Wk1qbDFZakl4TlVwNWEzVmtSMVkwWkVOb2JXSXpTblJaV0ZKUlkyMXNhbHBUYUdwWlYzaHFWVWRXZVZSWE9YVmtSMmR2V1ROS2JGcEhiREJNUTBKNVdWaFNiRmN5YkdSTVEwSm9XakpWY0VsRGIyZE5WRWxuUzJsQ2FGb3lWV2RNVTBKcVdWZDRhbFZIVm5sVVZ6bDFaRWRuYjFrelNteGFSMnd3VEVOQ2VWbFlVbXhVVlZaaVlWWXdjMGxIUm01YVUydG5TMmxCZUUxcFFYRkpSMFp1V2xOcmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1VMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNEQndUekY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclkwZEdOV0pYVm5Wa1JrNHhZbE0xY0dKdVFqRmtSekZvWXpKemIxaERTblZrVnpGc1kyMXNhbGhEU1hOSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaE9NVnB0V25CbFJHOW5TamhMWnpCWlJGSm5PVU40VEdsamMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuWmliVTUyWWxoQ2MxcFlVbXhQYVVKdFpGYzFhbVJIYkhaaWFVRnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05vTUdGSGJIcExVelYzV1ZoS2JHSnVVbnBMUTJOMVlXNU5kR05IYkdwaE1sWjVTbmxyZFZwdGJIVmFRMmR1VEcxd2VreFlRbkJaTW5Sc1kydzVabVJIUm5sYU1sWXdTbmxzWWsxR01IVmliVGxXWVZaT2MyRlhVbXhqYVRWNldsaFJiMHBEYURCaFIyeDZTMU0xTWxsWGQyOUxVMnMzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DT1ZoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQmEyTkhSalZpVjFaMVpFWk9NV0pUTlRCamJXeHVXakpXZVV0RFpHcGhSMFoxV2pKVmJrdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwSFJtNWFVelYyWW1sbmJsa3lhR2hpYldSc1NubDNaMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5XVmRrYkVsRU1HZEtSMFp1V2xNMU1sbFhkMjlMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOU2NHUkhWblJqZVRWc1dWZE9iMHRIV2pGaWJVNHdZVmM1ZFVsRGFIQk1RMEpzWWtOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIxcFhkM0JNYlZwd1ltMVJiMHA1TlhGamVURnZaVmhDZG1SSGFHeFpNVGxtWTBkV2VXSlhPWFZrUjJkdVMxTTFNRnBZYURCTFIxcDJZMjB4YUdSR1FubGhWMDVzUzBkT2FHSkhUbEZhV0VwT1lqSTFNR0ZEYUdwamJWWnJZVmhSYzBsSVNtaGtSMVppWVZZd2MwbEhSbTVhVTJ0d1MxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwZFdjMHRUTlcxaFZ6VnJTME5qZFdGdVRYUmhTR3gzWWpOU2IxcFhUbVpZTTBKc1kyMHhkbUp1VW05VVZWVnVTMU0xTUZwWWFEQkxSMXAyWTIweGFHUkdRbmxoVjA1c1MwZE9hR0pIVGxGYVdFcE9ZakkxTUdGRGFHcGpiVlpyWVZoUmMwbElTbWhrUjFaT1VsWjBjRmhUZDJkWlYyUnNTMU5yY0U4eGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5SYjFwWGQzQk1iVnB3WW0xUmIwcDVOWEZqZVRGdlpWaENkbVJIYUd4Wk1UbG1XbGRPZG1KdE9YUmxVMk53VEc1U2JHVklVVzlhYlRsNVlsZEdNRlZJU25CWk1sVnZXVEpHYzFreFFteGphekYyWW01U2IwdEhUbmxhVjFKd1pFTjNaMk50UmpCYVZuUndXRk4zWjFsWFpHeExVMEZ4U1VSRmVVbERiMmRaVjJSc1NVTXdaMWt5Um5OWk1VSnNZMnN4ZG1KdVVtOUxSMDU1V2xkU2NHUkRkMmRqYlVZd1dsVXhSbGN5YkdSTVEwSm9XakpWY0VsRGIyZE5WRWxuUzJsQ2FGb3lWWEJMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1Vnd2NFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5DT1V0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMHBJVG1wamJUbHpZa00xYldGWE5XdExRMk4xWVVoc2QySXpVbTlhVjA1bVdESjRjR016VW1aWU1td3dXbGN3Ymt0VE5XeFpWMDV2UzBkYU1XSnRUakJoVnpsMVNVTm9jRXRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwaFNiMkZZVFhCTWJWcHdZbTFSYjBveVJXNUxVelYyWW1sbmJsa3llSEJaTW5OdVRFTkNiV1JYTldwa1IyeDJZbWxCYjFwVGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFZYVmpTRXBzWkcxV2RXUkZVbXhhYlVZeFlraFJiMHRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMk15ZUhCYVIxWjVURzVPYzJGWFRuSkxRMlI2WWtkc2FtRXdaSFpXUnpodVRFTkNjRXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RCd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5USGs0WjFwdGJITmtSMVo1WTNsM1p6Qk1jbEZ6VGtNeU1FeFVVbWs1UXpWSlRrZENNRXhZVVhVNVF6RXdUSEpTWjJsRVVtaE9RelF3VEhaU2FrNUhRekJaUkZKbk9VTXhNRmxKWnpCTU4xSm5kRU13TUV4WVVYVTVSMDB3VEROUmRteDRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloyTXpValZpUjFWblVGTkNZbGhVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowcERhREJoUjJ4NlMxTTFiV0ZYTld0TFEyTjFZVzVOZEdGSWJIZGlNMUp2V2xkT1psZ3lXbkJpU0ZKc1kybGpjRXh0Vm1oWk1tZHZXbTVXZFZrelVuQmlNalJuUzBOcloyVXhlSGxZUnpSblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtiVVo1U1VkYVQxbFhNV3hKUkRCblNrTm9NR0ZIYkhwTFV6VnJXVmhTYUV0RFpHOWxXRUoyWkVkb2JGbDVNVzFoVjNnd1dsaEpia3RUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkWk1uaG9Zek5PVDFsWE1XeEpSREJuU2pKYWNHSklVbXhqYVRCdVNVTnpaMXByTldoaVYxVTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNlbVJJYkhOYVV6VjNaRmhPYjB0RFkzVktlVUZ5U1VkT2MxbFlUbnBVYlVaMFdsTkJja2xEWkRkYVIyeDZZMGQ0YUdWVWNIVmlNalZzU1VOR2NHSllRblpqYmxKb1ltNVNPVXA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBJeVdWaEpaMHBIVG05YVYwNXlXVzA1TkZwWVRXZFFVMEZyUzBoU2IyRllUWEJNYlZwd1ltMVJiMG95YkhWalNGWXdWek5TTldOSFZUbFpNbWhzV1RKMGFXSXphR1JLZVdzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQmExa3lhR3haTW5ScFlqTm9iR041TlhaaWFXZHVXVEpvYUdKdFpHeEtlWGRuV201V2RWa3pVbkJpTWpSblMwTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVaGFhR05wUVd0Wk1taHNXVEowYkZwRFFUbEpRMUpxWVVkV2FtRXlTblpsUjFaNlRHMWFjR0pJVW14amFXZHVUMjFPYjFwWFRuSmFWMUZ1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIwcEhUbTlhVjA1eVdsZFJkV0pIVm5WYU0xSnZTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFVuQmtSMVowWTNrMWVWcFhNWFprYlZaRVlrZEdlbU41YUdwaVIwWjZZekExYUdKWFZYQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloxcHBRVGxKUm5Sa1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJhMWt5YUd4Wk1uUnNXa00xYkZsWFRtOUxSMW94WW0xT01HRlhPWFZKUTJkd1NVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIxbDFZMGhXZW1GRFoyNVBiVFYyWkVOb1lscEhSakJaVXpGdFlWZDRNRnBZU1hSS2VVRnlTVU5SYjJSSGFIQmplV3QxWkcxR2MwdERhMmRMZVVGdVdGTnJia3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkbVUyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5TY0dSSFZuUmplVFZ0WVZkNE1GcFlTVzlLZVRWeFkza3hiMlZZUW5aa1IyaHNXVEU1Wm1GWVVteGlVMk5uUzNsQ2JVeHRjSFpoVnpSdlNubGpjRXRUTldoYVIxSkVZa2RHZW1ONWFHcGlSMFo2WXpBMWFHSlhWWEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElNR2RhVjNoNldsTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVW5Ca1IxWjBZM2sxZVZwWE1YWmtiVlpFWWtkR2VtTjVhR3BpUjBaNll6QTFhR0pYVlhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RCd1R6RjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05uYmxCSVRqQmxWM2hzVUdsalowdDVRbnBrU0d4eldsTTFjV0l5YkhWTFEyTnVTMU5CY2tsRFl6aE1NMDR3WlZkNGJGQnBZM0JNYlVaM1kwZFdkVnBHVW5aTFEyUnZXbGRHYTBwNWJHTmpiSGgxU1VOQlowbERRV2RKUTBJNVMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFtMWtWelZxWkVkc2RtSnBRbXBaVjNocVZVZEdOV0pYVm5Wa1EyaHFZak5PTUV4RFFuZGFXRXBxV2xjMU1FdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ1RsbFlVbTlNYlU1c1lWZDNiMWt5T1hwa1EwRnhTVWhDYkdOdFRteGlibEZuVEhsQmVFMUVRWEJQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRbTFrVnpWcVpFZHNkbUpwUW1wWlYzaHFVVE5LYkZwSGJEQkxSMDUyWXpOUmMwbElRbXhqYlU1c1ltNVJjRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVZE9kbU16VVdkTVUwSk9XVmhTYjB4dFRteGhWM2R2V1RJNWVtUkRRWEZKU0VKc1kyMU9iR0p1VVdkTWVVRjRUVVJCY0U4eGVIbFlSelJuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5DYldSWE5XcGtSMngyWW1sQ2FsbFhlR3BWUjFaNVZGYzVkV1JIWjI5Wk0wcHNXa2RzTUV4RFFubFpXRkpzVEVOQ2FGb3lWWEJKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbEZNV2hrUjJkMVdUSldjR0pEYUdwamJWWnJZVmhSWjB0cFFXOUxTRXBvWkVkVloweDVRWGhOYWtGM1RHcEJjRWxET0dkTFJFVjFUVU5CZEVsRk1XaGtSMmQxWTBjNU0wdEVSWFZOUTBGeVNVaEthR1JIVldkTWVVRjRUV3BCZDB4cVFYTkpRekJ2V1Zka2JFbERiMmROVkVsd1MxTnJjRXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEk1V0VoS1kySnBRV2RKUTBGblNVTkJaMXB1Vm5WWk0xSndZakkwWjFwdE9YbGlWMFl3VlVoS2NGa3lWVzlqU0Vwd1dUSlZjRWxJZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyTnRWakJrV0VwMVNVaENlV0ZYVG14TWJsSjJWVE5TZVdGWE5XNUxRMnQxWTIxV2QySkhSbXBhVTJkMlRHazVia3hEUW0xa1Z6VnFaRWRzZG1KcFFXOVplWGRuWVZOM1oxbFRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKUjJ0blNtbFpaMWw1UVdoUVZEQm5XRU5KZFZoRFNXZEthVmxuU1ZObmIxbFROWE5hVnpWdVpFZG5aMHhUUW5CTFUwRnNTVVJOY0VsRU9HZEtlVUZ1U1VOeloxbDVRVFpKUjAwM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpTREJ3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZyUzBOamRXRnVUWFJoU0d4M1lqTlNiMXBYVG1aWU0wNXpZVmRTYkdOcFkzQk1iazV6WVZkT2NrdElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwSE9UQmplbTluWkVoS01WcFRlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjFsWVNubGlNMlI2VDJsQ2JWbFhlSHBhVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGhWelZ0WVZjMWNHUkhWVFpKU0ZKNVpGZFZjMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoT2MyRlhVbXhqTVZKMlZUSm9kbVI2YjJkTlUzaGpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqTW5od1drZFdlbFpIT1ZSWk0wcDJZa2QzTmtsRVJYTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIVG14aWJsSnNZMnN4ZGxwSFZUWkpTRko1WkZkVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRPYkdKdVVteGpiRUpvV2tkU2NHSnRZelpKUTJONFRsaENORXA1ZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxcHRPV3BrV0U1UVlteE9iR0pIVm1wa1JHOW5aRWhLTVZwVGVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMkpYT1dsaFYzaHNVbTFzZVdNelVUWkpTRko1WkZkVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdNelFuWmliazV3WkcxVk5rbEdkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFtbGpiVlpvWVROQ2RtRlhOVEJQYVVKb1kwaENSR0l5TlcxaFYyTjFXVzVLYkZsWGRIZGlNbXgxWkVNMWRGcERRWFJKUkVWeldFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RqTWxZd1pFZHNkVm96VFRaSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Xa2M1TUdONmIyZGFiVVp6WXpKVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbEhXbWhhUjFVMlNVaFNlV1JYVlhOWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIxSjVXVmRrYmxsWFNuTmFWRzluV20xR2MyTXlWWE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjA1c1ltNVNiR05zUW1oYVIxSndZbTFqTmtsRFkzZGpTR2R1V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKa1dFaEtZMkpwUVdkSlEwRm5TVU5CWjJaVGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNrTm5ia3h0Y0hwTVYyZzFZMGM1TUdGSFZtcFlNVGw2WVVjNU0weFhTakJpYVdOd1RHMDVkVXREWkdwaVIyeHFZWGxqYzBsSFdqRmliVTR3WVZjNWRVbERhR3hMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMVYxWTBoS2JHUnRWblZrUlZKc1dtMUdNV0pJVVc5TFZIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RrYlVaNVNVTlNNRWxFTUdkS1EyZ3dZVWRzZWt0VE5YZFpXRXBzWW01U2VrdERZM1ZoYmsxMFlVaHNkMkl6VW05YVYwMXVTMU0xYldGWE5XdExRMk4xWVc1TmRHRkliSGRpTTFKdldsZE9abGd6VG05aU0yTjBaRWRHZVZveVZqQktlV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVU5uYTJSRE5YTmFWelZ1WkVkbmNFbElkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRnBvWTJsQ2RscHRXbnBhV0ZGblVGTkJhMlJETlhaYWJWcDZXbGhSYjB0VE5UQmlNMEZuVEZOQk1FMUVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VObmEwdERZM1ZoUjFab1drZFdlVmd4T1hSWlYyeDFTbmxyZFZrelRucExRMlIzWWpOT2NHUkhiSFppYVdOd1NVUXdPVkJUUVc1YWJXdzBXbGRSYmt0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjJJeVdtMWpNbFl3U1VNd09VbERVVzlLZVRWdldsZEdhMXBZU21aWU1qRm9ZVmMwYmt0VE5YWmtXRkpzWTJ0b2JHRlhaRzlrUTJnd1kyNVdiRXRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0RGalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIwb3lhREJpVjNkelNVZEtkbHBJYTI1TFV6Vm9ZbTFzZEZsWVVteExTSFI2V1ROS2RtSkhlRlZpTTBFMlNVYzViVnB1VG14a1NEQnpTVVJOZDAxRGF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEk1UzFSMFkyTnNlSFZKUTBGblNVZ3hZMk5zZUhWWVNFcGpZbWxCWjBsRFFtMWtWelZxWkVkc2RtSnBRbkJpYld3d1VrZEdNRnBZUW5CWk1uUnNZMmxuY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBJeVdWaEpaMXBIUmpCYVdFSndXVEowYkdOc1duQmpNbXhwWWtkVloxQlRRbTFaVjNoNldsUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqSlpXRWxuV1RJNWRHSlhPWFZVTTBJd1lWYzVkV041UVRsSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqUnpsNllWaFNjR0l5TkRaSlEyUXdZak5CWjJKSFZtMWtRMk56V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlJ6bDFWVEpvZG1SNmIyZGFibFoxV1ROU2NHSXlOR2RMUjJ4MVl6TlJjMGxIUm5WaFZ6Rm9aRWRzZG1KclRuWmlXRUp6V2xoU2JGcERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWlowdEhSblZoVnpGb1pFZHNkbUpyVG5aaVdFSnpXbGhTYkZwRGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFVtaGtSMVozWVZkT2NscFlTbGRoV0U1d1dXMTRiRWxFTUdka1NFb3hXbFIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyWlRlR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJJeU5VbGhWMUpzVDJsQ2JXUlhOV3BrUjJ4MlltbEJiMkZYTlhwa1EzZG5XVmMxY0dKWFJqQmhWemwxVVRJNWRHTkhlR3hrUjFaclMxTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbkJhYVVGdldWYzFjR0pYUmpCaFZ6bDFVVEk1ZEdOSGVHeGtSMVpyUzFOQ04xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuV2tkR01GcFlRbkJaTW5Sc1kyeGFjR015YkdsaVIxVm5VRk5DYlZsWGVIcGFWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWWpJMVZGcFhlR3haTTFFMlNVZGFNV0p0VGpCaFZ6bDFTVU5vYldJelNuUlpXRkl3V2xkU1JWbFlVbXhNUTBKcldWaFNiRXhEUW5CaWJrNHdTMU5DTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5CaWJrNHdUR2xTYkdKRE5UQmpiV3h1V2pKV2VVdERaR3BoUjBaMVdqSlZia3RVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloyWldlSGxZUnpSblNVTkJaMGxEUVdkSlNEQTNXRWhLWTJKcFFXZEpRMEZuU1VOQlowcERaMjVNYlhCNlRGZFNhR1JIVmpCaFZ6RnNZMGRzYW1FeVZubEtlV3QxV2tkR01GcFlRbkJaTW5Sc1kybG9VRmx0Y0d4Wk0xRjFXVmhPZW1GWFpIVkxTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkaVYyeDFVa2RHTUZwVWIyZGliVll6U1VWU2FHUkhWVzlMVTNoalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtSMngwV2xoQ2NGa3lkR3hqYW05blpFaEtNVnBUZUdOamJIaDFTVU5CWjBsRFFXZEpRMEZuU1VOQloxcEhSakJhVmxKd1lsZFdWRnBZUW1oamJVWXdZak5KTmtsRFkzTkpRMk56V0VoS1kySnBRV2RKUTBGblNVTkJaMlpUZDJkWk1qbDBZbGM1ZFZRelFqQmhWemwxWTNscmNFOHhlSGxZUnpSblNVTkJaMGxEUVdkSlExRnZTbmsxY1dONU1XdFpXRkpzWTBkc2FtRXlWbmxNV0Vwb1ltMWtiRXA1YTNWYVYwWnFZVU5vYldSWE5XcGtSMngyWW1sQmIxcFhkM0JKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZGtiVVo1U1VjeGNHSnBRVGxKUnpWc1pIbENSVmxZVW14TFExRnZaRWRvY0dONWEzVmFSMFl3V1ZObmJtSlhiSFZLZVd0d1NVaDRPRWxITlRGaVIzZHpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaVYwWTBTVVF3WjJKdFZqTkpSVkpvWkVkVmIwcERhREJoUjJ4NlMxTTFhMWxZVW1oTFEyUjBXVmhuYmt0VGEyZG1TSGRuWW0xV00wbEZVbWhrUjFWdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tOb01HRkhiSHBMVXpWcldWaFNiR05IYkdwaE1sWjVTMFU1YVdGdFZtcGtRelZvWXpOT2NGb3lORzlsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWWxkc2RWSkhSakJhVkc5bllsZHNkVXhHZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RpVjBZMFVrZEdNRnBVYjJkaVYwWTBURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk50Um5WYU1sVTJTVWhTZVdSWFZYTllTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjBaRmQ0TUdGWVFuTmFWVkpvWkVkV2VsVXlWbmRaV0Vwb1pFYzVlVTlwUVc1SlF6Qm5Tbmw0WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsTjNaMWt5T1hSaVZ6bDFWRE5DTUdGWE9YVmplV3R3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSXlXVmhKWjFwSFJqQmFXRUp3V1RKMGJHTnBRVGxKUTFGdlpFZG9jR041YTNWYVIwWXdXVk5uYmxwSFJqQmFXRUp3V1RKMGJHTnBZM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFtdFpXRkpzWTBkc2FtRXlWbmxNYms1c1lrZFdhbVJGVW1oa1IxVnZWekl4Y0dKcGQyZGlWMFkwV0ZOck4xaElTbU5pYVVGblNVTkJaMGxEUVdkbVUyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowcERaMjVNYlhCNlRGZFNhR1JIVmpCaFZ6RnNZMGRzYW1FeVZubE1RMEYxWVc1TmRGcEhSakJhV0VKd1dUSjBiR05wTVhsWlZ6VnVXbE5qY0V4dE9YVkxRMlJxWWtkc2FtRjVZM05KUjFveFltMU9NR0ZYT1hWSlEyZHdTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGbllWZFpaMHRIVW1oa1IxWjNZVmRPY2xwWVNsZGhXRTV3V1cxNGJFdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEl5V1ZoSloxcEhSakJhV0VKd1dUSjBiR05wUVRsSlExRnZTbmsxY1dONU1XdFpXRkpzWkVkc2RGcFlRbkJaTW5Sc1kybDNaMHh0Y0hwTVYxSm9aRWRXZDJGWFRuSmFXRWwwWTIxR2RWb3lWVzVMVXpWcldWaFNhRXREWkd0WldGSnNZMGRzYW1FeVZubEtlV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYTFsWVVteGpSMnhxWVRKV2VVeHRhSEJhUjFWdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxaNGVWaEhOR2RKUTBGblNVTkJaMGxJTUhCUE1YaDVXRWMwWjBsRFFXZG1Wbmg1V0VjMVkyTnNlSFZKUTBGblNVZGFNV0p0VGpCaFZ6bDFTVWRzZFdGWVVsUlpNMHAyWWtkNGFWbFlTVzlMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBwRFoyNU1iWEI2VEZoT2FtTnRPWE5pUjBwb1kybGpjRXh1VG1wamJUbHpZa2RLYUdOcFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVaGFhR05wUWpOSlJEQm5Ta05vTTJGWE5XdGlNMk53VEcwNU1XUkhWbmxXTW14clpFZG5iMHRVZEdOamJIaDFTVU5CWjBsRFFXZEpRMEp3V21sQmIyUjVRVGhKUjBaM1kwVk9kbUp0V25CYWVUVnBZMjFXYUdFelFuWmhWelV3VEcweGEwdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOUtlVFZ4WTNreGVsa3pTblppUjNocFdWaEpkR015TUc1TFV6VjZXVE5LZG1KSGVHbFpXRWx2UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05uYmt4dGNIcE1XRTVxWTIwNWMySkhTbWhqYVRGNllsTXhkRnBEWTNCTWJrNXFZMjA1YzJKSFNtaGphV2R3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxJTVdOamJIaDFTVU5CWjBsRFFXZEpRMEp3V21sQmIyUjVRVGhKUjBaM1kwVk9kbUp0V25CYWVUVnBZMjFXYUdFelFuWmhWelV3VEcxNGJrdFRRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFVXOUtlVFZ4WTNreGVsa3pTblppUjNocFdWaEpkR015TUhSaVYxRnVTMU0xZWxrelNuWmlSM2hwV1ZoSmIwdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwSTVXRWhLWTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0dOblVHb3daMWxZUW5kUk1qbDFXbTFzYmt4dFNubGFWMFp5WTBjNWNHSnVVWFZpVjFGblNtbFpaMlI1UVRoSlIwWjNZMFZPZG1KdFduQmFlVFZwWTIxV2FHRXpRblpoVnpVd1RHMTRia3RUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERVVzlLZVRWeFkza3hlbGt6U25aaVIzaHBXVmhKZEdKWFVXNUxVelY2V1ROS2RtSkhlR2xaV0VsdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbFlTRXBqWW1sQlowbERRV2RKUTBGbllWZFpaMHRJWTJkUWFqQm5XVmhDZDFFeU9YVmFiV3h1VEcxS2VWcFhSbkpqUnpsd1ltNVJkV0pYVVhCSlNIUmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RLUTJkdVRHMXdla3hZVG1wamJUbHpZa2RLYUdOcE1YUmFRekZ6V25samNFeHVUbXBqYlRsellrZEthR05wWjNCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VneFkyTnNlSFZKUTBGblNVTkJaMGxEUW5CYWFVRnZaSGxCSzFCVFFtaGpTRUpFWWpJMWJXRlhZM1ZaYmtwc1dWZDBkMkl5YkhWa1F6VnpXbmxyWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJhMHREWTNWaGJrMTBZekpPZVdJeWVITlpiVVo1VEZkNGJrcDVhM1ZqTWs1NVlqSjRjMWx0Um5sTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQloyWldlSGxZUnpSblNVTkJaMGxEUVdkSlExRnZaREpzZFZwSE9UTkxVelYyWW1sbmJtTnRWbnBoV0hCc1NubDNaMXB1Vm5WWk0xSndZakkwWjB0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZTa05vTTJGWE5XdGlNMk53VEcwNU1XUkhWbmxXTW14clpFZG5iMHRUUVRoSlIwWjNZMFZPZG1KdFduQmFlVFZwWTIxV2FHRXpRblpoVnpVd1RHMHhhMHRUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSak1rNTVZako0YzFsdFJubE1XRTUwU25scmRXTXlUbmxpTW5oeldXMUdlVXREYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNR2RhVjNoNldsTkNOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV3RMUTJOMVlXNU5kR015VG5saU1uaHpXVzFHZVV4WVRuUktlV3QxWXpKT2VXSXllSE5aYlVaNVMwTmthMXBZVGpCamJUazFTbmxyTjFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWVZkWlowdERVVzlrTW14MVdrYzVNMHRUTlhaa1dGSnNZMnhrY0ZwSVVtOUxRMnRuVUdvd1oxbFlRbmRSTWpsMVdtMXNia3h0U25sYVYwWnlZMGM1Y0dKdVVYVmlWMUpqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXMUthVUZyUzBoa2NHSnRVblprZVd0MVlqTldNRnBZU2xoaFYxSXdZVU5uY0VsRWQyZFpXRUozVVRJNWRWcHRiRzVNYlVwNVdsZEdjbU5IT1hCaWJsRjFZa2RqY0VsSWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlExRnZTbmsxY1dONU1YcFpNMHAyWWtkNGFWbFlTWFJpVjFGdVMxTTFlbGt6U25aaVIzaHBXVmhKYjB0VWRHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMlpUUW14aVNFNXNTVWgwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVVc5S2VUVnhZM2t4ZWxrelNuWmlSM2hwV1ZoSmRHSlhVVzVMVXpWNldUTktkbUpIZUdsWldFbHZTakpTYkdNelVubGlNMnR1UzFSMFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5abFo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKd1dtbEJiMlI1UVRoSlIwWjNZMFZPZG1KdFduQmFlVFZwWTIxV2FHRXpRblpoVnpVd1RHMTRia3RUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSak1rNTVZako0YzFsdFJubE1XRTUwVEZjeGEwcDVhM1ZqTWs1NVlqSjRjMWx0Um5sTFEyczNXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0RCbldsZDRlbHBUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGclMwTmpkV0Z1VFhSak1rNTVZako0YzFsdFJubE1XRTUwVEZjeGEwcDVhM1ZqTWs1NVlqSjRjMWx0Um5sTFEyUnJXbGhPTUdOdE9UVktlV3MzV0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RoVjFsblMwTlJiMlF5YkhWYVJ6a3pTMU0xZG1SWVVteGpiR1J3V2toU2IwdERhMmRRYWpCbldWaENkMUV5T1hWYWJXeHVURzFLZVZwWFJuSmpSemx3WW01UmRXSlhVWEJKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIwcDVOWEZqZVRGNldUTktkbUpIZUdsWldFbDBZbGRSZEdKSFkyNUxVelY2V1ROS2RtSkhlR2xaV0VsdlMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWmxOQ2JHSklUbXhKU0hSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIwcDVOWEZqZVRGNldUTktkbUpIZUdsWldFbDBZbGRSZEdKSFkyNUxVelY2V1ROS2RtSkhlR2xaV0VsdlNqSlNiR016VW5saU0ydHVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblpsWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIwcERhRE5oVnpWcllqTmpjRXh0T1RGa1IxWjVWakpzYTJSSFoyOUxVMEVyVUZOQ2FHTklRa1JpTWpWdFlWZGpkVmx1U214WlYzUjNZakpzZFdSRE5YTmFlV3RuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwRFoyNU1iWEI2VEZoT2FtTnRPWE5pUjBwb1kya3hjMXA1WTNCTWJrNXFZMjA1YzJKSFNtaGphV2R3VHpGNGVWaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwSTVTVWRXYzJNeVZXZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Ta05uYmt4dGNIcE1XRTVxWTIwNWMySkhTbWhqYVRGeldubGpjRXh1VG1wamJUbHpZa2RLYUdOcFoyNWFSMVo2WkVoS2RtVlRZM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFqbFlTRXBqWW1sQlowbERRV2RKUTBGblpsTnJOMWhJU21OaWFUaDJTVU5CWjBsRFFXZEpRMEZyUzBOamRXRnVUWFJqTWs1NVlqSjRjMWx0Um5sTVYyaDJaRU5qY0V4dVRtcGpiVGx6WWtkS2FHTnBaM0JQTVhoNVdFYzBaMGxEUVdkbVZuaDVXRWMxWTJOc2VIVkpRMEZuU1VNNGNVdHNlSGxZUnpSblNVTkJaMGxEYjJjd1NpOVNaMDVES3pCTWNsSm5Ua2RFTUZsTVVYVjBRM2RKVGtNdk1FdzBaekJaU0ZKblpFZE1NRXgyVVhWMFF6RkpUa013TUV3MFp6QlpNMUYxT1VNeE1FeDZVWFJrUXprd1dVeFJjMFo0ZVZoSE5HZEpRMEZuU1VOdmRsaElTbU5pYVVGblNVTkNiV1JYTldwa1IyeDJZbWxDY0dKdGJEQlZNazU1WWpKNGMwdERhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5SYjBwNU5YRmplVEY2V1ROS2RtSkhkMjVMVXpWMlltbG5ibGt5ZUhCWk1uTnVURU5DYldSWE5XcGtSMngyWW1sQmIxcFRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFteE1ia0o1V2xoYWJHSnVVa1ZhVjFwb1pGZDRNRXREYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElXbWhqYVVGclpFZEdlVm95VmpCSlJEQm5Ta05uYTB0SVVtOWhXRTF3VEcxR01HUklTVzlLTW1oNVdsZFpia3RUYXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKUTJkclpFZEdlVm95VmpCTWJYaHNZbTFrTUdGRGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aRzFHZVVsSE9XMWFiazVzWkVOQk9VbERVakJaV0VwdVdsaFJkV0l5V20xak1sWXdTME5yZFdSSE9YZEpRekJuVGtSQk4xaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFuQmFhVUZ2U2tObmJreHRhR3haVjFKc1kydzVabUpYUm5CaWFXTndURzFPZW1ONVoyNWpSemw2WVZoU2NHSXlORzVMVTBFNVVGUXdaMG95V25CbFIxWnJTbmxyWjJVeGVIbFlSelJuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWM1YlZwdVRteGtRMEYwVUZOQmEwdERZM1ZoUjFab1drZFdlVmd4T1hSWlYyeDFTbmxyZFdJelZqQmFXRXBKV2xkc2JtRklVVzlrU0VveFdsTnJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamxZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEp3V21sQmIwcERaMjVNYldoc1dWZFNiR05wWTNCTWJVNTZZM2xuYm1OSE9YcGhXRkp3WWpJMGJrdFRRVGxRVkRCblNqSmFjR1ZIVm10S2VXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlJ6bHRXbTVPYkdSRFFYUlFVMEZyUzBOamRXRkhWbWhhUjFaNVNubHJkV0l6VmpCYVdFcEpXbGRzYm1GSVVXOUxWSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWd4WTJOc2VIVkpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEVVc5S01tZ3dZbGQzYzFsdE9XdGxVMk53VEcxR2RXRlhNV2hrUjFWdlpUTk9hbU50T1hOaVJsSjJZMFJ2WjJJeVdtMWpNbFl3WmxOM1owMTZRWGRMVkhSalkyeDRkVWxEUVdkSlEwRm5TVU5CWjBsRFFXZG1Wbmg1V0VjMFowbERRV2RKUTBGblNVZ3djRTh4ZUhsWVJ6Um5TVU5CWjJaV2VIbFlSelJuU1VOQloxcHVWblZaTTFKd1lqSTBaMkZYTlhCa1JVWnBZak5XTUV0RGEyZGxNWGg1V0VjMFowbERRV2RKUTBGblNVTlJiMHA1TlhGamVURm9XVzA1TVdSRE1XOWxXRTR3WWpOS05WZ3hPVFZhVjBaNVRGaE9jMkZYVW14amFXTndURzVPYzJGWFRuSkxTSFJqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkYVJ6a3dZM3B2WjFwdFJuTmpNbFZ6V0VoS1kySnBRV2RKUTBGblNVTkJaMGxEUVdkSlIwWjVZMjA1TTJONmIyZGFiVVp6WXpKVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRzZFZwdGJIVmhXRkpzVDJsQ01HTnVWbXhNUm5oNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFucGlSMnhyV2xoT1ZXSXhUbTlpTTJNMlNVUlZjMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoT2MyRlhVbXhqTVZKMlZUSk9lV0l5ZUhOUGFVRjRURVo0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVdsYzFNRnBZU2s1aU1sSnNUMmxDTUdOdVZteE1Sbmg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpKYVdFb3dZVmRPYUdKRWIyZGtTRW94V2xONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5XVEpXZFdSSFZubFZSMFpyV2tkc2RWcDZiMmRLZWxWM1kwaG5ia3hHZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2FHTXdOV2hrYTFwMlkycHZaMHA1TlhGamVURm9XVzA1TVdSRE1XOWxXRTR3WWpOS05WZ3hPV3BpTWpVd1dsYzFNRXhZVG5OaFYxSnNZMmxqYzFoSVNtTmlhVUZuU1VOQlowbERRV2RKUTBGblNVZGFkbGt6Vm5wVU1qVlVXbGQ0YkZrelVUWkpTRko1WkZkVmMxaElTbU5pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWN4ZGxsdGJITmFWVnB3WTI1T01FOXBRakJqYmxac1RFWjRlVmhITkdkSlEwRm5TVU5CWjBsRFFXZEpRMEo1V2xoT2QySXlOWHBoV0Zwc1QybENZbGhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRamRZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxbHVTbXhaVjNSM1lqSnNkV1JFYjJkWldFSjNVVEk1ZFZwdGJHNU1iVXA1V2xkR2NtTkhPWEJpYmxGMVlsZFJaMHhUUVhoTVJuaDVXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJVG14a1NGSndZbTFrZWs5cFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDVzWW01U2JHTnNRbWhhUjFKd1ltMWpOa2xEWXpOTlNFSTBTakY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlNERmpZMng0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZ3hZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuV0ZaNGVWaEhOR2RKUTBGblNVTkJaMGxJTUhCUE1YaDVXRWMwWjBsRFFXZEpRMEZuU1VOUmIwcDVOWEZqZVRGb1dXMDVNV1JETVc5bFdFNHdZak5LTlZneE9UVmFWMFo1VEZoT2MyRlhVbXhqYVdOd1RHMDVkVXREWkdsYVYxcDJZMjFXUkdGSFJuVmFNbFZ1VEVOQ2JXUlhOV3BrUjJ4MlltbEJiMXBZV214aWJsRnpTVWhPYzJGWFRuSk1RMEpxWkZoS2VWcFhOVEJWTW5od1drZFZjMGxITld4bFNGSlVZa2RzYTFwVGEyZGxNWGg1V0VjMGRreDVRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYW1JeU5YcGlNbmhzVEcxNGRscDVhSHBpUjJ4cVlYbHJOMWhJU21OaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOUmIyUkhhSEJqZVd0MVdtMXNkVnBEWjI1TWJEbDZZVmRLYzJGWE5XNUtlV3QxWTIxV2RHSXpXbXhSTW5ob1l6Tk5iMG94T1hwaFYwcHpZVmMxYmtwNWF6ZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxEVVc5ak1uaHdXVEp6ZFVwSVRuTmhWMUpzWXpGMGRWcFlhREJWTW5od1drZFdaRXRUTlhWYVdHZ3dTME5yZFZsWFVtdFJNbmhvWXpOTmIwb3hPWHBoVjBwellWYzFia3A1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERVVzlqTW5od1dUSnpkVXBJVG5OaFYxSnNZekYwZFZwWWFEQlZNbmh3V2tkV1pFdFROWGRqYlZZeVMwTnJkVmxYVW10Uk1uaG9Zek5OYjBveE9YcGhWMHB6WVZjMWJrcDVhemRZU0VwalltbEJaMGxEUVdkSlEwRm5abE5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RLUTJkdVRHMXdla3hYUm1saU0xWXdURmRvTldNelVuWmpibXhtV0RKT2RtSnVVbXhpYmxGMFl6SjRjRnBIVm5sS2VXdDFZeko0Y0ZreWMyOWxNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUW10aU0xSjZUMmxDYlZsWGVIcGFVM2hqWTJ4NGRVbERRV2RKUTBGblNVTkJaMGxEUVdkWldFcDVZak5rZWs5cFFtMVpWM2g2V2xONFkyTnNlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZVmMxYldGWE5YQmtSMVUyU1VoU2VXUlhWWE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSVRuTmhWMUpzWXpGU2RsVXlhSFprZW05blRWTjRZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWXpKNGNGcEhWbnBXUnpsVVdUTktkbUpIZHpaSlJFVnpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjFwb1drZFZOa2xJVW5sa1YxVnpXRWhLWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjBaNlZHMUdNbEp0T1hsUGFVRnVURzF3ZWt4WFJtbGlNMVl3VEZkb05XTXpVblpqYm14bVdETnNiRmxZU1hSak1uaHdXa2RXZVVwNWVHTmpiSGgxU1VOQlowbERRV2RKUTBGblNVTkJaMWxYVW1oalNGSndaRzFXU1ZwWGJHNWhTRkUyU1VoU2VXUlhWWE5ZU0VwalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsSFVubFpWMlJ1V1ZkS2MxcFViMmRhYlVaell6SldZMk5zZUhWSlEwRm5TVU5CWjBsRFFqbExWSFJqWTJ4NGRVbERRV2RKU0RGalkyeDRkVmhJU21OaWFVRm5TVU5DYldSWE5XcGtSMngyWW1sQ2NHSnRiREJTYld4eldsZHNkV05JVmpCTFEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERVVzlLZVRWeFkza3hiV0ZYZUd4aFZ6VjNaRmhTWmxneVRuVmtRMk53VEcxV2FGa3laMjlhYmxaMVdUTlNjR0l5TkdkTFEydG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGclMwaFNiMkZZVFhCTWJWSm9aRWRGYjBveVVteGFiVVl4WWtoUmJreERRV3RMU0ZKdllWaE5jRXh1VW14bFNGRnZTMU5yTjFoSVNtTmlhVUZuU1VOQlowbERRV2RtVTJzM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBwRFoyNU1iWEI2VEZkYWNHSkhWbkJpYmtJeFpFTmpjRXh0T1hWTFEyUnFZVWRHZFZveVZXNU1RMEp0WkZjMWFtUkhiSFppYVVGdldsTnJaMlV4ZUhsWVJ6Um5TVU5CWjBsRFFXZEpRMEZuU1VOQ2NGcHBRVzlrUjJod1kzazFiV0ZYZUd4amVXdG5aVEY0ZVZoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMlJ0Um5sSlIxcHdZa2RXVDFsWE1XeEpSREJuU2tOb01HRkhiSHBMVXpVeVdWZDNiMHRUTlhwalIzaHdaRU5uYmxoR2VHTllRMk53VEc1Q2RtTkRaM0JQTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tOb01HRkhiSHBMVXpWM1dWaEtiR0p1VVc5TFV6VnRZVmMxYTB0RFkzVmhiazEwV20xc2MxcFhiSFZqU0ZZd1dERTVhbUp1VVc1TFV6VXdXbGhvTUV0SFduQmlSMVpQV1ZjeGJFdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJaV2VIbFlSelJuU1VOQlowbERRV2RKU0RCd1R6RjRlVmhITkdkSlEwRm5abFo0ZVZoSE5XTmpiSGgxU1VOQlowbEhXakZpYlU0d1lWYzVkVWxIYkhWaFdGSkNZbTVTY0dNelFtaGlVMmR3U1VoMFkyTnNlSFZKUTBGblNVTkJaMGxEUW5wYVdGSlZZVmN4YkdJelZqQkxSMW94WW0xT01HRlhPWFZKUTJkd1NVaDBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tObmJtRlhOWGRrV0ZKaVltMUdkRnBVTVdOSmJWWjBXVmRzYzAweGQybFlVM2h3WW01Q01XUkdkSFZaVnpGc1VGWjNhV0ZYTlcxaU1YZHBXRk40Y0dKdVFqRmtSblIxV1ZjeGJGQldkMmxrUjFZMFpFWjNhVmhUWTNCTWJVWXdaRWhKYjBveldtaGlTRlpzU25sM1owcDVZM0JNYmxwb1lrTm5ia3A1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuWmxOM1owNVVRWGROUTJzM1dFaEtZMkpwUVdkSlEwSTVXRWhLWTJKc2VIbFlSelJuU1VOQloxcHVWblZaTTFKd1lqSTBaMkZYTlhCa1JVWnpZMGRvYUZsdFZqQkxRMnRuWlRGNGVWaEhOR2RKUTBGblNVTkJaMGxEVVc5S2VUVnhZM2t4YUdKSVFtOVpWMHBzWkVOQ2NHSnVRakZrUTJOd1RHMDVkVXREWkdwaFIwWjFXakpWYmt4RFFtMWtWelZxWkVkc2RtSnBRVzlMVTBJM1dFaEtZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpRMUZ2U25rMWNXTjVNV2hpU0VKdldWZEtiR1JEUW5OaFUyTndURzVLYkdKWE9USmFWVTV6V1ZoT2VrdERaR1paVjA0d1lWaGFiRXA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKUTJkclMwaFNiMkZZVFhCTWJrSjVZak5CYjBveVRtOWFWMDV5V2xkUmJrdFRhMmRsTVhoNVdFYzBaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tOb01HRkhiSHBMVXpWM1dWaEtiR0p1VW5wTFEyUnpZVk5qY0V4dFJtdGFSVTV6V1ZoT2VrdERaR1paVjA0d1lWaGFiRXA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElNV05qYkhoMVNVTkJaMGxEUVdkSlEwSTVTMVIwWTJOc2VIVkpRMEZuU1VOQlowbERRV3RMUTJOMVlXNU5kRmxYZUhkaFIwWnBXbGhSWjFsVFkzQk1iVGwxUzBOa2FtSkhiR3BoZVdOelNVZGFNV0p0VGpCaFZ6bDFTVU5vYkV0VFFqZFlTRXBqWW1sQlowbERRV2RKUTBGblNVTkJaMGxIVlhWalNFcHNaRzFXZFdSRlVteGFiVVl4WWtoUmIwdFVkR05qYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjBwRFoyNU1iWEI2VEZkR2MyTkhhR2haYlZZd1NVZDRjRXA1YTNWamJWWjBZak5hYkZFeWVHaGpNMDF2U2pFNWFGa3pVbkJrYlZWdVMxUjBZMk5zZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuU2tOb01HRkhiSHBMVXpWM1dWaEtiR0p1VW5wTFEyUnpZVk5qY0V4dFJtdGFSVTV6V1ZoT2VrdERaR1paVjA0d1lWaGFiRXA1YXpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKUTJnd1pWaENiR0l5V1dkaVZrNXNXVmhLYW1GRVNXZEpWREE1U1VOa01XSnRVbXhhYld4MVdsZFJia3RUUWpkWVNFcGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKMFZUSldhR050VG05TmFUVjVXbGhPYkdSRFozQlBNWGg1V0VjMFowbERRV2RKUTBGblNVTkJaMGxEUWpsWVNFcGpZbWxCWjBsRFFXZEpRMEZuWmxOck4xaElTbU5pYVVGblNVTkNPVmhJU21OaWJIaDVXRWMxT1V0VWRHTmpiSGgxVEhrNGFrbElUblprV0VwcVdsVXhhR05JUW5CaWJXUldWV3QzT1ZwSFJqQlpWSEJvWTBoQ2MyRlhUbWhrUjJ4MlltazVjV015T1hWUE1rNXZXVmhLZWxwWVVUbGtXRkp0VDBSMGFWbFlUbXhPYWxGeldsaHNTMDFzY0ZsVGJuQm9WbnBzTVZOWGNIWmxhM2hFVTI1V1dsWjZSbk5aTTJ4S1RteGplRTFJVGtwaVZFWnZXVEJvUTJOSFNuUmFTSEJLWVcwNWNGTlhiRE5oVjAxNVQxUkdhbUpWTlhOWk0yeEtUbXhrTlZOdGNHbE5ha1l3V1dwSk1HUlhSblZVVjJ4WlZUTmtjRmw2U1RWTlYwNTBWRzE0YWsxRk5USlpiVFZUWWtkS2RWVlhiRkJpU0U1d1dWZDRSMDFXY0ZsVGFsWk1VakZ2ZUZsdE1VOU5SMFpZVDFoV1NsRXlaSGRUVldnd1dUSk9jMlZJVmtwUk1FWnVVMVZhTTJGWFVsbFViWGhLVTBVMGQxa3lNWE5oYlZKSFpESnNVRTFZYURWWFJXTXhXVEpPYzJWSVZrcFJNRVp1VTFWT1VtSXhjRWhQVjNCclZucEdjMWx0TlZKalJYaDFVMjE0V2xZeFNURlRNR1JoVFZkS2RGUnFRbWhXZW13eFUxVk9ibU5GYkVsa1IwNXFZa2hvTVZkRmFFdFpNa3B3VVZka1NsRXdTVFZUTVZJd1dUSk9jMlZJVmtwUk1FWnVVMVZhTkdWV2FFaE9WR3hNVmtoT2NGZEdUak5oVm5CMFlraE9ZVlV3YXpKVFZ6RlBaRzFLV0UxWVdtbGhWRlo0V1ROc1MwOVRTbVJNUTBwdFlWZDRiRWxxYjJsWk1qbDBZbGM1ZFV4dGNIcEpiakE5SWwwc0ltWnBiR1VpT2lKamIyMXRiMjR1YW5NaWZRPT0iXSwiZmlsZSI6ImNvbW1vbi5qcyJ9
